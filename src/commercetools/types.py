# DO NOT EDIT! This file is automatically generated

import attr
import datetime
import enum
import typing


@attr.s(auto_attribs=True)
class Address:
    id: typing.Optional[str] = None
    key: typing.Optional[str] = None
    title: typing.Optional[str] = None
    salutation: typing.Optional[str] = None
    first_name: typing.Optional[str] = None
    last_name: typing.Optional[str] = None
    street_name: typing.Optional[str] = None
    street_number: typing.Optional[str] = None
    additional_street_info: typing.Optional[str] = None
    postal_code: typing.Optional[str] = None
    city: typing.Optional[str] = None
    region: typing.Optional[str] = None
    state: typing.Optional[str] = None
    country: typing.Optional["CountryCode"] = None
    company: typing.Optional[str] = None
    department: typing.Optional[str] = None
    building: typing.Optional[str] = None
    apartment: typing.Optional[str] = None
    p_o_box: typing.Optional[str] = None
    phone: typing.Optional[str] = None
    mobile: typing.Optional[str] = None
    email: typing.Optional[str] = None
    fax: typing.Optional[str] = None
    additional_address_info: typing.Optional[str] = None
    external_id: typing.Optional[str] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        salutation: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        street_name: typing.Optional[str] = None,
        street_number: typing.Optional[str] = None,
        additional_street_info: typing.Optional[str] = None,
        postal_code: typing.Optional[str] = None,
        city: typing.Optional[str] = None,
        region: typing.Optional[str] = None,
        state: typing.Optional[str] = None,
        country: typing.Optional["CountryCode"] = None,
        company: typing.Optional[str] = None,
        department: typing.Optional[str] = None,
        building: typing.Optional[str] = None,
        apartment: typing.Optional[str] = None,
        p_o_box: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        mobile: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        fax: typing.Optional[str] = None,
        additional_address_info: typing.Optional[str] = None,
        external_id: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            id,
            key,
            title,
            salutation,
            first_name,
            last_name,
            street_name,
            street_number,
            additional_street_info,
            postal_code,
            city,
            region,
            state,
            country,
            company,
            department,
            building,
            apartment,
            p_o_box,
            phone,
            mobile,
            email,
            fax,
            additional_address_info,
            external_id,
        )


@attr.s(auto_attribs=True)
class Asset:
    id: typing.Optional[str] = None
    sources: typing.Optional[typing.List["AssetSource"]] = None
    name: typing.Optional["LocalizedString"] = None
    description: typing.Optional["LocalizedString"] = None
    tags: typing.Optional[typing.List[str]] = None
    custom: typing.Optional["CustomFields"] = None
    key: typing.Optional[str] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        sources: typing.Optional[typing.List["AssetSource"]] = None,
        name: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        tags: typing.Optional[typing.List[str]] = None,
        custom: typing.Optional["CustomFields"] = None,
        key: typing.Optional[str] = None,
    ) -> None:
        super().__init__(id, sources, name, description, tags, custom, key)


@attr.s(auto_attribs=True)
class AssetDimensions:
    w: typing.Optional[int] = None
    h: typing.Optional[int] = None

    def __init__(
        self, w: typing.Optional[int] = None, h: typing.Optional[int] = None
    ) -> None:
        super().__init__(w, h)


@attr.s(auto_attribs=True)
class AssetDraft:
    sources: typing.Optional[typing.List["AssetSource"]] = None
    name: typing.Optional["LocalizedString"] = None
    description: typing.Optional["LocalizedString"] = None
    tags: typing.Optional[typing.List[str]] = None
    custom: typing.Optional["CustomFieldsDraft"] = None
    key: typing.Optional[str] = None

    def __init__(
        self,
        sources: typing.Optional[typing.List["AssetSource"]] = None,
        name: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        tags: typing.Optional[typing.List[str]] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        key: typing.Optional[str] = None,
    ) -> None:
        super().__init__(sources, name, description, tags, custom, key)


@attr.s(auto_attribs=True)
class AssetSource:
    uri: typing.Optional[str] = None
    key: typing.Optional[str] = None
    dimensions: typing.Optional["AssetDimensions"] = None
    content_type: typing.Optional[str] = None

    def __init__(
        self,
        uri: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        dimensions: typing.Optional["AssetDimensions"] = None,
        content_type: typing.Optional[str] = None,
    ) -> None:
        super().__init__(uri, key, dimensions, content_type)


@attr.s(auto_attribs=True)
class Attribute:
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(name, value)


@attr.s(auto_attribs=True)
class AttributeDefinition:
    type: typing.Optional["AttributeType"] = None
    name: typing.Optional[str] = None
    label: typing.Optional["LocalizedString"] = None
    is_required: typing.Optional[bool] = None
    attribute_constraint: typing.Optional["AttributeConstraintEnum"] = None
    input_tip: typing.Optional["LocalizedString"] = None
    input_hint: typing.Optional["TextInputHint"] = None
    is_searchable: typing.Optional[bool] = None

    def __init__(
        self,
        type: typing.Optional["AttributeType"] = None,
        name: typing.Optional[str] = None,
        label: typing.Optional["LocalizedString"] = None,
        is_required: typing.Optional[bool] = None,
        attribute_constraint: typing.Optional["AttributeConstraintEnum"] = None,
        input_tip: typing.Optional["LocalizedString"] = None,
        input_hint: typing.Optional["TextInputHint"] = None,
        is_searchable: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(
            type,
            name,
            label,
            is_required,
            attribute_constraint,
            input_tip,
            input_hint,
            is_searchable,
        )


@attr.s(auto_attribs=True)
class AttributeDefinitionDraft:
    type: typing.Optional["AttributeType"] = None
    name: typing.Optional[str] = None
    label: typing.Optional["LocalizedString"] = None
    is_required: typing.Optional[bool] = None
    attribute_constraint: typing.Optional["AttributeConstraintEnum"] = None
    input_tip: typing.Optional["LocalizedString"] = None
    input_hint: typing.Optional["TextInputHint"] = None
    is_searchable: typing.Optional[bool] = None

    def __init__(
        self,
        type: typing.Optional["AttributeType"] = None,
        name: typing.Optional[str] = None,
        label: typing.Optional["LocalizedString"] = None,
        is_required: typing.Optional[bool] = None,
        attribute_constraint: typing.Optional["AttributeConstraintEnum"] = None,
        input_tip: typing.Optional["LocalizedString"] = None,
        input_hint: typing.Optional["TextInputHint"] = None,
        is_searchable: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(
            type,
            name,
            label,
            is_required,
            attribute_constraint,
            input_tip,
            input_hint,
            is_searchable,
        )


@attr.s(auto_attribs=True)
class AttributeLocalizedEnumValue:
    key: typing.Optional[str] = None
    label: typing.Optional["LocalizedString"] = None

    def __init__(
        self,
        key: typing.Optional[str] = None,
        label: typing.Optional["LocalizedString"] = None,
    ) -> None:
        super().__init__(key, label)


@attr.s(auto_attribs=True)
class AttributePlainEnumValue:
    key: typing.Optional[str] = None
    label: typing.Optional[str] = None

    def __init__(
        self, key: typing.Optional[str] = None, label: typing.Optional[str] = None
    ) -> None:
        super().__init__(key, label)


@attr.s(auto_attribs=True)
class AttributeType:
    name: typing.Optional[str] = None

    def __init__(self, name: typing.Optional[str] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class AttributeValue:
    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class CartDiscountDraft:
    name: typing.Optional["LocalizedString"] = None
    description: typing.Optional["LocalizedString"] = None
    value: typing.Optional["CartDiscountValue"] = None
    cart_predicate: typing.Optional[str] = None
    target: typing.Optional["CartDiscountTarget"] = None
    sort_order: typing.Optional[str] = None
    is_active: typing.Optional[bool] = None
    valid_from: typing.Optional[datetime.datetime] = None
    valid_until: typing.Optional[datetime.datetime] = None
    requires_discount_code: typing.Optional[bool] = None
    stacking_mode: typing.Optional["StackingMode"] = None
    custom: typing.Optional["CustomFields"] = None

    def __init__(
        self,
        name: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        value: typing.Optional["CartDiscountValue"] = None,
        cart_predicate: typing.Optional[str] = None,
        target: typing.Optional["CartDiscountTarget"] = None,
        sort_order: typing.Optional[str] = None,
        is_active: typing.Optional[bool] = None,
        valid_from: typing.Optional[datetime.datetime] = None,
        valid_until: typing.Optional[datetime.datetime] = None,
        requires_discount_code: typing.Optional[bool] = None,
        stacking_mode: typing.Optional["StackingMode"] = None,
        custom: typing.Optional["CustomFields"] = None,
    ) -> None:
        super().__init__(
            name,
            description,
            value,
            cart_predicate,
            target,
            sort_order,
            is_active,
            valid_from,
            valid_until,
            requires_discount_code,
            stacking_mode,
            custom,
        )


@attr.s(auto_attribs=True)
class CartDiscountTarget:
    type: typing.Optional[str] = None

    def __init__(self, type: typing.Optional[str] = None) -> None:
        super().__init__(type)


@attr.s(auto_attribs=True)
class CartDiscountValue:
    type: typing.Optional[str] = None

    def __init__(self, type: typing.Optional[str] = None) -> None:
        super().__init__(type)


@attr.s(auto_attribs=True)
class CartDraft:
    currency: typing.Optional["CurrencyCode"] = None
    customer_id: typing.Optional[str] = None
    customer_email: typing.Optional[str] = None
    customer_group: typing.Optional["CustomerGroupReference"] = None
    anonymous_id: typing.Optional[str] = None
    country: typing.Optional[str] = None
    inventory_mode: typing.Optional["InventoryMode"] = None
    tax_mode: typing.Optional["TaxMode"] = None
    tax_rounding_mode: typing.Optional["RoundingMode"] = None
    tax_calculation_mode: typing.Optional["TaxCalculationMode"] = None
    line_items: typing.Optional[typing.List["LineItemDraft"]] = None
    custom_line_items: typing.Optional[typing.List["CustomLineItemDraft"]] = None
    shipping_address: typing.Optional["Address"] = None
    billing_address: typing.Optional["Address"] = None
    shipping_method: typing.Optional["ShippingMethodReference"] = None
    external_tax_rate_for_shipping_method: typing.Optional[
        "ExternalTaxRateDraft"
    ] = None
    custom: typing.Optional["CustomFieldsDraft"] = None
    locale: typing.Optional[str] = None
    delete_days_after_last_modification: typing.Optional[int] = None
    origin: typing.Optional["CartOrigin"] = None
    shipping_rate_input: typing.Optional["ShippingRateInputDraft"] = None
    item_shipping_addresses: typing.Optional[typing.List["Address"]] = None

    def __init__(
        self,
        currency: typing.Optional["CurrencyCode"] = None,
        customer_id: typing.Optional[str] = None,
        customer_email: typing.Optional[str] = None,
        customer_group: typing.Optional["CustomerGroupReference"] = None,
        anonymous_id: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        inventory_mode: typing.Optional["InventoryMode"] = None,
        tax_mode: typing.Optional["TaxMode"] = None,
        tax_rounding_mode: typing.Optional["RoundingMode"] = None,
        tax_calculation_mode: typing.Optional["TaxCalculationMode"] = None,
        line_items: typing.Optional[typing.List["LineItemDraft"]] = None,
        custom_line_items: typing.Optional[typing.List["CustomLineItemDraft"]] = None,
        shipping_address: typing.Optional["Address"] = None,
        billing_address: typing.Optional["Address"] = None,
        shipping_method: typing.Optional["ShippingMethodReference"] = None,
        external_tax_rate_for_shipping_method: typing.Optional[
            "ExternalTaxRateDraft"
        ] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        locale: typing.Optional[str] = None,
        delete_days_after_last_modification: typing.Optional[int] = None,
        origin: typing.Optional["CartOrigin"] = None,
        shipping_rate_input: typing.Optional["ShippingRateInputDraft"] = None,
        item_shipping_addresses: typing.Optional[typing.List["Address"]] = None,
    ) -> None:
        super().__init__(
            currency,
            customer_id,
            customer_email,
            customer_group,
            anonymous_id,
            country,
            inventory_mode,
            tax_mode,
            tax_rounding_mode,
            tax_calculation_mode,
            line_items,
            custom_line_items,
            shipping_address,
            billing_address,
            shipping_method,
            external_tax_rate_for_shipping_method,
            custom,
            locale,
            delete_days_after_last_modification,
            origin,
            shipping_rate_input,
            item_shipping_addresses,
        )


@attr.s(auto_attribs=True)
class CategoryDraft:
    name: typing.Optional["LocalizedString"] = None
    slug: typing.Optional["LocalizedString"] = None
    description: typing.Optional["LocalizedString"] = None
    parent: typing.Optional["CategoryReference"] = None
    order_hint: typing.Optional[str] = None
    external_id: typing.Optional[str] = None
    meta_title: typing.Optional["LocalizedString"] = None
    meta_description: typing.Optional["LocalizedString"] = None
    meta_keywords: typing.Optional["LocalizedString"] = None
    custom: typing.Optional["CustomFieldsDraft"] = None
    assets: typing.Optional[typing.List["AssetDraft"]] = None
    key: typing.Optional[str] = None

    def __init__(
        self,
        name: typing.Optional["LocalizedString"] = None,
        slug: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        parent: typing.Optional["CategoryReference"] = None,
        order_hint: typing.Optional[str] = None,
        external_id: typing.Optional[str] = None,
        meta_title: typing.Optional["LocalizedString"] = None,
        meta_description: typing.Optional["LocalizedString"] = None,
        meta_keywords: typing.Optional["LocalizedString"] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        assets: typing.Optional[typing.List["AssetDraft"]] = None,
        key: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            name,
            slug,
            description,
            parent,
            order_hint,
            external_id,
            meta_title,
            meta_description,
            meta_keywords,
            custom,
            assets,
            key,
        )


@attr.s(auto_attribs=True)
class ChangeSubscription:
    resource_type_id: typing.Optional[str] = None

    def __init__(self, resource_type_id: typing.Optional[str] = None) -> None:
        super().__init__(resource_type_id)


@attr.s(auto_attribs=True)
class ChannelDraft:
    key: typing.Optional[str] = None
    roles: typing.Optional[typing.List["ChannelRoleEnum"]] = None
    name: typing.Optional["LocalizedString"] = None
    description: typing.Optional["LocalizedString"] = None
    address: typing.Optional["Address"] = None
    custom: typing.Optional["CustomFieldsDraft"] = None
    geo_location: typing.Optional["GeoJsonPoint"] = None

    def __init__(
        self,
        key: typing.Optional[str] = None,
        roles: typing.Optional[typing.List["ChannelRoleEnum"]] = None,
        name: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        address: typing.Optional["Address"] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        geo_location: typing.Optional["GeoJsonPoint"] = None,
    ) -> None:
        super().__init__(key, roles, name, description, address, custom, geo_location)


@attr.s(auto_attribs=True)
class CustomFieldEnumValue:
    key: typing.Optional[str] = None
    label: typing.Optional[str] = None

    def __init__(
        self, key: typing.Optional[str] = None, label: typing.Optional[str] = None
    ) -> None:
        super().__init__(key, label)


@attr.s(auto_attribs=True)
class CustomFieldLocalizedEnumValue:
    key: typing.Optional[str] = None
    label: typing.Optional["LocalizedString"] = None

    def __init__(
        self,
        key: typing.Optional[str] = None,
        label: typing.Optional["LocalizedString"] = None,
    ) -> None:
        super().__init__(key, label)


@attr.s(auto_attribs=True)
class CustomFields:
    type: typing.Optional["TypeReference"] = None
    fields: typing.Optional["FieldContainer"] = None

    def __init__(
        self,
        type: typing.Optional["TypeReference"] = None,
        fields: typing.Optional["FieldContainer"] = None,
    ) -> None:
        super().__init__(type, fields)


@attr.s(auto_attribs=True)
class CustomFieldsDraft:
    type: typing.Optional["ResourceIdentifier"] = None
    fields: typing.Optional["FieldContainer"] = None

    def __init__(
        self,
        type: typing.Optional["ResourceIdentifier"] = None,
        fields: typing.Optional["FieldContainer"] = None,
    ) -> None:
        super().__init__(type, fields)


@attr.s(auto_attribs=True)
class CustomLineItem:
    id: typing.Optional[str] = None
    name: typing.Optional["LocalizedString"] = None
    money: typing.Optional["TypedMoney"] = None
    taxed_price: typing.Optional["TaxedItemPrice"] = None
    total_price: typing.Optional["TypedMoney"] = None
    slug: typing.Optional[str] = None
    quantity: typing.Optional[int] = None
    state: typing.Optional[typing.List["ItemState"]] = None
    tax_category: typing.Optional["TaxCategoryReference"] = None
    tax_rate: typing.Optional["TaxRate"] = None
    discounted_price_per_quantity: typing.Optional[
        typing.List["DiscountedLineItemPriceForQuantity"]
    ] = None
    custom: typing.Optional["CustomFields"] = None
    shipping_details: typing.Optional["ItemShippingDetails"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        name: typing.Optional["LocalizedString"] = None,
        money: typing.Optional["TypedMoney"] = None,
        taxed_price: typing.Optional["TaxedItemPrice"] = None,
        total_price: typing.Optional["TypedMoney"] = None,
        slug: typing.Optional[str] = None,
        quantity: typing.Optional[int] = None,
        state: typing.Optional[typing.List["ItemState"]] = None,
        tax_category: typing.Optional["TaxCategoryReference"] = None,
        tax_rate: typing.Optional["TaxRate"] = None,
        discounted_price_per_quantity: typing.Optional[
            typing.List["DiscountedLineItemPriceForQuantity"]
        ] = None,
        custom: typing.Optional["CustomFields"] = None,
        shipping_details: typing.Optional["ItemShippingDetails"] = None,
    ) -> None:
        super().__init__(
            id,
            name,
            money,
            taxed_price,
            total_price,
            slug,
            quantity,
            state,
            tax_category,
            tax_rate,
            discounted_price_per_quantity,
            custom,
            shipping_details,
        )


@attr.s(auto_attribs=True)
class CustomLineItemDraft:
    name: typing.Optional["LocalizedString"] = None
    quantity: typing.Optional[int] = None
    money: typing.Optional["Money"] = None
    slug: typing.Optional[str] = None
    tax_category: typing.Optional["TaxCategoryReference"] = None
    external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None
    custom: typing.Optional["CustomFields"] = None
    shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None

    def __init__(
        self,
        name: typing.Optional["LocalizedString"] = None,
        quantity: typing.Optional[int] = None,
        money: typing.Optional["Money"] = None,
        slug: typing.Optional[str] = None,
        tax_category: typing.Optional["TaxCategoryReference"] = None,
        external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None,
        custom: typing.Optional["CustomFields"] = None,
        shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None,
    ) -> None:
        super().__init__(
            name,
            quantity,
            money,
            slug,
            tax_category,
            external_tax_rate,
            custom,
            shipping_details,
        )


@attr.s(auto_attribs=True)
class CustomObjectDraft:
    container: typing.Optional[str] = None
    key: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None
    version: typing.Optional[int] = None

    def __init__(
        self,
        container: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
        version: typing.Optional[int] = None,
    ) -> None:
        super().__init__(container, key, value, version)


@attr.s(auto_attribs=True)
class CustomerChangePassword:
    id: typing.Optional[str] = None
    version: typing.Optional[int] = None
    current_password: typing.Optional[str] = None
    new_password: typing.Optional[str] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        current_password: typing.Optional[str] = None,
        new_password: typing.Optional[str] = None,
    ) -> None:
        super().__init__(id, version, current_password, new_password)


@attr.s(auto_attribs=True)
class CustomerCreateEmailToken:
    id: typing.Optional[str] = None
    version: typing.Optional[int] = None
    ttl_minutes: typing.Optional[int] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        ttl_minutes: typing.Optional[int] = None,
    ) -> None:
        super().__init__(id, version, ttl_minutes)


@attr.s(auto_attribs=True)
class CustomerCreatePasswordResetToken:
    email: typing.Optional[str] = None

    def __init__(self, email: typing.Optional[str] = None) -> None:
        super().__init__(email)


@attr.s(auto_attribs=True)
class CustomerDraft:
    customer_number: typing.Optional[str] = None
    email: typing.Optional[str] = None
    password: typing.Optional[str] = None
    first_name: typing.Optional[str] = None
    last_name: typing.Optional[str] = None
    middle_name: typing.Optional[str] = None
    title: typing.Optional[str] = None
    anonymous_cart_id: typing.Optional[str] = None
    anonymous_id: typing.Optional[str] = None
    date_of_birth: typing.Optional[datetime.date] = None
    company_name: typing.Optional[str] = None
    vat_id: typing.Optional[str] = None
    addresses: typing.Optional[typing.List["Address"]] = None
    default_shipping_address: typing.Optional[int] = None
    shipping_addresses: typing.Optional[typing.List[int]] = None
    default_billing_address: typing.Optional[int] = None
    billing_addresses: typing.Optional[typing.List[int]] = None
    is_email_verified: typing.Optional[bool] = None
    external_id: typing.Optional[str] = None
    customer_group: typing.Optional["CustomerGroupReference"] = None
    custom: typing.Optional["CustomFieldsDraft"] = None
    locale: typing.Optional[str] = None
    salutation: typing.Optional[str] = None
    key: typing.Optional[str] = None

    def __init__(
        self,
        customer_number: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        password: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        middle_name: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        anonymous_cart_id: typing.Optional[str] = None,
        anonymous_id: typing.Optional[str] = None,
        date_of_birth: typing.Optional[datetime.date] = None,
        company_name: typing.Optional[str] = None,
        vat_id: typing.Optional[str] = None,
        addresses: typing.Optional[typing.List["Address"]] = None,
        default_shipping_address: typing.Optional[int] = None,
        shipping_addresses: typing.Optional[typing.List[int]] = None,
        default_billing_address: typing.Optional[int] = None,
        billing_addresses: typing.Optional[typing.List[int]] = None,
        is_email_verified: typing.Optional[bool] = None,
        external_id: typing.Optional[str] = None,
        customer_group: typing.Optional["CustomerGroupReference"] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        locale: typing.Optional[str] = None,
        salutation: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            customer_number,
            email,
            password,
            first_name,
            last_name,
            middle_name,
            title,
            anonymous_cart_id,
            anonymous_id,
            date_of_birth,
            company_name,
            vat_id,
            addresses,
            default_shipping_address,
            shipping_addresses,
            default_billing_address,
            billing_addresses,
            is_email_verified,
            external_id,
            customer_group,
            custom,
            locale,
            salutation,
            key,
        )


@attr.s(auto_attribs=True)
class CustomerEmailVerify:
    version: typing.Optional[int] = None
    token_value: typing.Optional[str] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        token_value: typing.Optional[str] = None,
    ) -> None:
        super().__init__(version, token_value)


@attr.s(auto_attribs=True)
class CustomerGroupDraft:
    key: typing.Optional[str] = None
    group_name: typing.Optional[str] = None
    custom: typing.Optional["CustomFields"] = None

    def __init__(
        self,
        key: typing.Optional[str] = None,
        group_name: typing.Optional[str] = None,
        custom: typing.Optional["CustomFields"] = None,
    ) -> None:
        super().__init__(key, group_name, custom)


@attr.s(auto_attribs=True)
class CustomerResetPassword:
    token_value: typing.Optional[str] = None
    new_password: typing.Optional[str] = None
    version: typing.Optional[int] = None

    def __init__(
        self,
        token_value: typing.Optional[str] = None,
        new_password: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
    ) -> None:
        super().__init__(token_value, new_password, version)


@attr.s(auto_attribs=True)
class CustomerSignInResult:
    customer: typing.Optional["Customer"] = None
    cart: typing.Optional[object] = None

    def __init__(
        self,
        customer: typing.Optional["Customer"] = None,
        cart: typing.Optional[object] = None,
    ) -> None:
        super().__init__(customer, cart)


@attr.s(auto_attribs=True)
class CustomerSignin:
    email: typing.Optional[str] = None
    password: typing.Optional[str] = None
    anonymous_cart_id: typing.Optional[str] = None
    anonymous_cart_sign_in_mode: typing.Optional["AnonymousCartSignInMode"] = None
    anonymous_id: typing.Optional[str] = None

    def __init__(
        self,
        email: typing.Optional[str] = None,
        password: typing.Optional[str] = None,
        anonymous_cart_id: typing.Optional[str] = None,
        anonymous_cart_sign_in_mode: typing.Optional["AnonymousCartSignInMode"] = None,
        anonymous_id: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            email,
            password,
            anonymous_cart_id,
            anonymous_cart_sign_in_mode,
            anonymous_id,
        )


@attr.s(auto_attribs=True)
class CustomerToken:
    id: typing.Optional[str] = None
    created_at: typing.Optional[datetime.datetime] = None
    last_modified_at: typing.Optional[datetime.datetime] = None
    customer_id: typing.Optional[str] = None
    expires_at: typing.Optional[datetime.datetime] = None
    value: typing.Optional[str] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        customer_id: typing.Optional[str] = None,
        expires_at: typing.Optional[datetime.datetime] = None,
        value: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            id, created_at, last_modified_at, customer_id, expires_at, value
        )


@attr.s(auto_attribs=True)
class Delivery:
    id: typing.Optional[str] = None
    created_at: typing.Optional[datetime.datetime] = None
    items: typing.Optional[typing.List["DeliveryItem"]] = None
    parcels: typing.Optional[typing.List["Parcel"]] = None
    address: typing.Optional["Address"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        items: typing.Optional[typing.List["DeliveryItem"]] = None,
        parcels: typing.Optional[typing.List["Parcel"]] = None,
        address: typing.Optional["Address"] = None,
    ) -> None:
        super().__init__(id, created_at, items, parcels, address)


@attr.s(auto_attribs=True)
class DeliveryItem:
    id: typing.Optional[str] = None
    quantity: typing.Optional[int] = None

    def __init__(
        self, id: typing.Optional[str] = None, quantity: typing.Optional[int] = None
    ) -> None:
        super().__init__(id, quantity)


@attr.s(auto_attribs=True)
class Destination:
    type: typing.Optional[str] = None

    def __init__(self, type: typing.Optional[str] = None) -> None:
        super().__init__(type)


@attr.s(auto_attribs=True)
class DiscountCodeDraft:
    name: typing.Optional["LocalizedString"] = None
    description: typing.Optional["LocalizedString"] = None
    code: typing.Optional[str] = None
    cart_discounts: typing.Optional[typing.List["CartDiscountReference"]] = None
    cart_predicate: typing.Optional[str] = None
    is_active: typing.Optional[bool] = None
    max_applications: typing.Optional[int] = None
    max_applications_per_customer: typing.Optional[int] = None
    custom: typing.Optional["CustomFieldsDraft"] = None
    groups: typing.Optional[list] = None
    valid_from: typing.Optional[datetime.datetime] = None
    valid_until: typing.Optional[datetime.datetime] = None

    def __init__(
        self,
        name: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        code: typing.Optional[str] = None,
        cart_discounts: typing.Optional[typing.List["CartDiscountReference"]] = None,
        cart_predicate: typing.Optional[str] = None,
        is_active: typing.Optional[bool] = None,
        max_applications: typing.Optional[int] = None,
        max_applications_per_customer: typing.Optional[int] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        groups: typing.Optional[list] = None,
        valid_from: typing.Optional[datetime.datetime] = None,
        valid_until: typing.Optional[datetime.datetime] = None,
    ) -> None:
        super().__init__(
            name,
            description,
            code,
            cart_discounts,
            cart_predicate,
            is_active,
            max_applications,
            max_applications_per_customer,
            custom,
            groups,
            valid_from,
            valid_until,
        )


@attr.s(auto_attribs=True)
class DiscountCodeInfo:
    discount_code: typing.Optional["DiscountCodeReference"] = None
    state: typing.Optional["DiscountCodeState"] = None

    def __init__(
        self,
        discount_code: typing.Optional["DiscountCodeReference"] = None,
        state: typing.Optional["DiscountCodeState"] = None,
    ) -> None:
        super().__init__(discount_code, state)


@attr.s(auto_attribs=True)
class DiscountedLineItemPortion:
    discount: typing.Optional["CartDiscountReference"] = None
    discounted_amount: typing.Optional["Money"] = None

    def __init__(
        self,
        discount: typing.Optional["CartDiscountReference"] = None,
        discounted_amount: typing.Optional["Money"] = None,
    ) -> None:
        super().__init__(discount, discounted_amount)


@attr.s(auto_attribs=True)
class DiscountedLineItemPrice:
    value: typing.Optional["TypedMoney"] = None
    included_discounts: typing.Optional[typing.List["DiscountedLineItemPortion"]] = None

    def __init__(
        self,
        value: typing.Optional["TypedMoney"] = None,
        included_discounts: typing.Optional[
            typing.List["DiscountedLineItemPortion"]
        ] = None,
    ) -> None:
        super().__init__(value, included_discounts)


@attr.s(auto_attribs=True)
class DiscountedLineItemPriceDraft:
    value: typing.Optional["Money"] = None
    included_discounts: typing.Optional[typing.List["DiscountedLineItemPortion"]] = None

    def __init__(
        self,
        value: typing.Optional["Money"] = None,
        included_discounts: typing.Optional[
            typing.List["DiscountedLineItemPortion"]
        ] = None,
    ) -> None:
        super().__init__(value, included_discounts)


@attr.s(auto_attribs=True)
class DiscountedLineItemPriceForQuantity:
    quantity: typing.Optional[int] = None
    discounted_price: typing.Optional["DiscountedLineItemPrice"] = None

    def __init__(
        self,
        quantity: typing.Optional[int] = None,
        discounted_price: typing.Optional["DiscountedLineItemPrice"] = None,
    ) -> None:
        super().__init__(quantity, discounted_price)


@attr.s(auto_attribs=True)
class DiscountedPrice:
    value: typing.Optional["Money"] = None
    discount: typing.Optional["ProductDiscountReference"] = None

    def __init__(
        self,
        value: typing.Optional["Money"] = None,
        discount: typing.Optional["ProductDiscountReference"] = None,
    ) -> None:
        super().__init__(value, discount)


@attr.s(auto_attribs=True)
class ErrorObject:
    code: typing.Optional[str] = None
    message: typing.Optional[str] = None

    def __init__(
        self, code: typing.Optional[str] = None, message: typing.Optional[str] = None
    ) -> None:
        super().__init__(code, message)


@attr.s(auto_attribs=True)
class ErrorResponse:
    status_code: typing.Optional[int] = None
    message: typing.Optional[str] = None
    error: typing.Optional[str] = None
    error_description: typing.Optional[str] = None
    errors: typing.Optional[list] = None

    def __init__(
        self,
        status_code: typing.Optional[int] = None,
        message: typing.Optional[str] = None,
        error: typing.Optional[str] = None,
        error_description: typing.Optional[str] = None,
        errors: typing.Optional[list] = None,
    ) -> None:
        super().__init__(status_code, message, error, error_description, errors)


@attr.s(auto_attribs=True)
class ExtensionDestination:
    type: typing.Optional[str] = None

    def __init__(self, type: typing.Optional[str] = None) -> None:
        super().__init__(type)


@attr.s(auto_attribs=True)
class ExtensionDraft:
    key: typing.Optional[str] = None
    destination: typing.Optional["ExtensionDestination"] = None
    triggers: typing.Optional[typing.List["ExtensionTrigger"]] = None

    def __init__(
        self,
        key: typing.Optional[str] = None,
        destination: typing.Optional["ExtensionDestination"] = None,
        triggers: typing.Optional[typing.List["ExtensionTrigger"]] = None,
    ) -> None:
        super().__init__(key, destination, triggers)


@attr.s(auto_attribs=True)
class ExtensionHttpDestinationAuthentication:
    type: typing.Optional[str] = None

    def __init__(self, type: typing.Optional[str] = None) -> None:
        super().__init__(type)


@attr.s(auto_attribs=True)
class ExtensionInput:
    action: typing.Optional["ExtensionAction"] = None
    resource: typing.Optional["Reference"] = None

    def __init__(
        self,
        action: typing.Optional["ExtensionAction"] = None,
        resource: typing.Optional["Reference"] = None,
    ) -> None:
        super().__init__(action, resource)


@attr.s(auto_attribs=True)
class ExtensionTrigger:
    resource_type_id: typing.Optional["ExtensionResourceTypeId"] = None
    actions: typing.Optional[typing.List["ExtensionAction"]] = None

    def __init__(
        self,
        resource_type_id: typing.Optional["ExtensionResourceTypeId"] = None,
        actions: typing.Optional[typing.List["ExtensionAction"]] = None,
    ) -> None:
        super().__init__(resource_type_id, actions)


@attr.s(auto_attribs=True)
class ExternalLineItemTotalPrice:
    price: typing.Optional["Money"] = None
    total_price: typing.Optional["Money"] = None

    def __init__(
        self,
        price: typing.Optional["Money"] = None,
        total_price: typing.Optional["Money"] = None,
    ) -> None:
        super().__init__(price, total_price)


@attr.s(auto_attribs=True)
class ExternalTaxAmountDraft:
    total_gross: typing.Optional["Money"] = None
    tax_rate: typing.Optional["ExternalTaxRateDraft"] = None

    def __init__(
        self,
        total_gross: typing.Optional["Money"] = None,
        tax_rate: typing.Optional["ExternalTaxRateDraft"] = None,
    ) -> None:
        super().__init__(total_gross, tax_rate)


@attr.s(auto_attribs=True)
class ExternalTaxRateDraft:
    name: typing.Optional[str] = None
    amount: typing.Optional[int] = None
    country: typing.Optional[str] = None
    state: typing.Optional[str] = None
    sub_rates: typing.Optional[typing.List["SubRate"]] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        amount: typing.Optional[int] = None,
        country: typing.Optional[str] = None,
        state: typing.Optional[str] = None,
        sub_rates: typing.Optional[typing.List["SubRate"]] = None,
    ) -> None:
        super().__init__(name, amount, country, state, sub_rates)


@attr.s(auto_attribs=True)
class FacetResult:
    type: typing.Optional["FacetTypes"] = None

    def __init__(self, type: typing.Optional["FacetTypes"] = None) -> None:
        super().__init__(type)


@attr.s(auto_attribs=True)
class FacetResultRange:
    from_: typing.Optional[int] = None
    from_str: typing.Optional[str] = None
    to: typing.Optional[int] = None
    to_str: typing.Optional[str] = None
    count: typing.Optional[int] = None
    product_count: typing.Optional[int] = None
    total: typing.Optional[int] = None
    min: typing.Optional[int] = None
    max: typing.Optional[int] = None
    mean: typing.Optional[int] = None

    def __init__(
        self,
        from_: typing.Optional[int] = None,
        from_str: typing.Optional[str] = None,
        to: typing.Optional[int] = None,
        to_str: typing.Optional[str] = None,
        count: typing.Optional[int] = None,
        product_count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        min: typing.Optional[int] = None,
        max: typing.Optional[int] = None,
        mean: typing.Optional[int] = None,
    ) -> None:
        super().__init__(
            from_, from_str, to, to_str, count, product_count, total, min, max, mean
        )


@attr.s(auto_attribs=True)
class FacetResultTerm:
    term: typing.Optional[typing.Any] = None
    count: typing.Optional[int] = None
    product_count: typing.Optional[int] = None

    def __init__(
        self,
        term: typing.Optional[typing.Any] = None,
        count: typing.Optional[int] = None,
        product_count: typing.Optional[int] = None,
    ) -> None:
        super().__init__(term, count, product_count)


@attr.s(auto_attribs=True)
class FacetResults:
    def __init__(self=None) -> None:
        super().__init__(None)


@attr.s(auto_attribs=True)
class FieldDefinition:
    type: typing.Optional[object] = None
    name: typing.Optional[str] = None
    label: typing.Optional["LocalizedString"] = None
    required: typing.Optional[bool] = None
    input_hint: typing.Optional[str] = None

    def __init__(
        self,
        type: typing.Optional[object] = None,
        name: typing.Optional[str] = None,
        label: typing.Optional["LocalizedString"] = None,
        required: typing.Optional[bool] = None,
        input_hint: typing.Optional[str] = None,
    ) -> None:
        super().__init__(type, name, label, required, input_hint)


@attr.s(auto_attribs=True)
class FieldType:
    name: typing.Optional[str] = None

    def __init__(self, name: typing.Optional[str] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class GeoJson:
    type: typing.Optional[str] = None
    coordinates: typing.Optional[list] = None

    def __init__(
        self,
        type: typing.Optional[str] = None,
        coordinates: typing.Optional[list] = None,
    ) -> None:
        super().__init__(type, coordinates)


@attr.s(auto_attribs=True)
class Image:
    url: typing.Optional[str] = None
    dimensions: typing.Optional["ImageDimensions"] = None
    label: typing.Optional[str] = None

    def __init__(
        self,
        url: typing.Optional[str] = None,
        dimensions: typing.Optional["ImageDimensions"] = None,
        label: typing.Optional[str] = None,
    ) -> None:
        super().__init__(url, dimensions, label)


@attr.s(auto_attribs=True)
class ImageDimensions:
    w: typing.Optional[int] = None
    h: typing.Optional[int] = None

    def __init__(
        self, w: typing.Optional[int] = None, h: typing.Optional[int] = None
    ) -> None:
        super().__init__(w, h)


@attr.s(auto_attribs=True)
class InventoryEntryDraft:
    sku: typing.Optional[str] = None
    supply_channel: typing.Optional["ChannelReference"] = None
    quantity_on_stock: typing.Optional[int] = None
    restockable_in_days: typing.Optional[int] = None
    expected_delivery: typing.Optional[datetime.datetime] = None
    custom: typing.Optional["CustomFieldsDraft"] = None

    def __init__(
        self,
        sku: typing.Optional[str] = None,
        supply_channel: typing.Optional["ChannelReference"] = None,
        quantity_on_stock: typing.Optional[int] = None,
        restockable_in_days: typing.Optional[int] = None,
        expected_delivery: typing.Optional[datetime.datetime] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
    ) -> None:
        super().__init__(
            sku,
            supply_channel,
            quantity_on_stock,
            restockable_in_days,
            expected_delivery,
            custom,
        )


@attr.s(auto_attribs=True)
class ItemShippingDetails:
    targets: typing.Optional[typing.List["ItemShippingTarget"]] = None
    valid: typing.Optional[bool] = None

    def __init__(
        self,
        targets: typing.Optional[typing.List["ItemShippingTarget"]] = None,
        valid: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(targets, valid)


@attr.s(auto_attribs=True)
class ItemShippingDetailsDraft:
    targets: typing.Optional[typing.List["ItemShippingTarget"]] = None

    def __init__(
        self, targets: typing.Optional[typing.List["ItemShippingTarget"]] = None
    ) -> None:
        super().__init__(targets)


@attr.s(auto_attribs=True)
class ItemShippingTarget:
    address_key: typing.Optional[str] = None
    quantity: typing.Optional[int] = None

    def __init__(
        self,
        address_key: typing.Optional[str] = None,
        quantity: typing.Optional[int] = None,
    ) -> None:
        super().__init__(address_key, quantity)


@attr.s(auto_attribs=True)
class ItemState:
    quantity: typing.Optional[int] = None
    state: typing.Optional["StateReference"] = None

    def __init__(
        self,
        quantity: typing.Optional[int] = None,
        state: typing.Optional["StateReference"] = None,
    ) -> None:
        super().__init__(quantity, state)


@attr.s(auto_attribs=True)
class LineItem:
    id: typing.Optional[str] = None
    product_id: typing.Optional[str] = None
    name: typing.Optional["LocalizedString"] = None
    product_slug: typing.Optional["LocalizedString"] = None
    product_type: typing.Optional["ProductTypeReference"] = None
    variant: typing.Optional["ProductVariant"] = None
    price: typing.Optional["Price"] = None
    taxed_price: typing.Optional["TaxedItemPrice"] = None
    total_price: typing.Optional["Money"] = None
    quantity: typing.Optional[int] = None
    state: typing.Optional[typing.List["ItemState"]] = None
    tax_rate: typing.Optional["TaxRate"] = None
    supply_channel: typing.Optional["ChannelReference"] = None
    distribution_channel: typing.Optional["ChannelReference"] = None
    discounted_price_per_quantity: typing.Optional[
        typing.List["DiscountedLineItemPriceForQuantity"]
    ] = None
    price_mode: typing.Optional["LineItemPriceMode"] = None
    line_item_mode: typing.Optional["LineItemMode"] = None
    custom: typing.Optional["CustomFields"] = None
    shipping_details: typing.Optional["ItemShippingDetails"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        product_id: typing.Optional[str] = None,
        name: typing.Optional["LocalizedString"] = None,
        product_slug: typing.Optional["LocalizedString"] = None,
        product_type: typing.Optional["ProductTypeReference"] = None,
        variant: typing.Optional["ProductVariant"] = None,
        price: typing.Optional["Price"] = None,
        taxed_price: typing.Optional["TaxedItemPrice"] = None,
        total_price: typing.Optional["Money"] = None,
        quantity: typing.Optional[int] = None,
        state: typing.Optional[typing.List["ItemState"]] = None,
        tax_rate: typing.Optional["TaxRate"] = None,
        supply_channel: typing.Optional["ChannelReference"] = None,
        distribution_channel: typing.Optional["ChannelReference"] = None,
        discounted_price_per_quantity: typing.Optional[
            typing.List["DiscountedLineItemPriceForQuantity"]
        ] = None,
        price_mode: typing.Optional["LineItemPriceMode"] = None,
        line_item_mode: typing.Optional["LineItemMode"] = None,
        custom: typing.Optional["CustomFields"] = None,
        shipping_details: typing.Optional["ItemShippingDetails"] = None,
    ) -> None:
        super().__init__(
            id,
            product_id,
            name,
            product_slug,
            product_type,
            variant,
            price,
            taxed_price,
            total_price,
            quantity,
            state,
            tax_rate,
            supply_channel,
            distribution_channel,
            discounted_price_per_quantity,
            price_mode,
            line_item_mode,
            custom,
            shipping_details,
        )


@attr.s(auto_attribs=True)
class LineItemDraft:
    product_id: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    sku: typing.Optional[str] = None
    quantity: typing.Optional[int] = None
    supply_channel: typing.Optional["ChannelReference"] = None
    distribution_channel: typing.Optional["ChannelReference"] = None
    external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None
    custom: typing.Optional["CustomFieldsDraft"] = None
    external_price: typing.Optional["Money"] = None
    external_total_price: typing.Optional["ExternalLineItemTotalPrice"] = None
    shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None

    def __init__(
        self,
        product_id: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        sku: typing.Optional[str] = None,
        quantity: typing.Optional[int] = None,
        supply_channel: typing.Optional["ChannelReference"] = None,
        distribution_channel: typing.Optional["ChannelReference"] = None,
        external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        external_price: typing.Optional["Money"] = None,
        external_total_price: typing.Optional["ExternalLineItemTotalPrice"] = None,
        shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None,
    ) -> None:
        super().__init__(
            product_id,
            variant_id,
            sku,
            quantity,
            supply_channel,
            distribution_channel,
            external_tax_rate,
            custom,
            external_price,
            external_total_price,
            shipping_details,
        )


@attr.s(auto_attribs=True)
class LineItemImportDraft:
    product_id: typing.Optional[str] = None
    name: typing.Optional["LocalizedString"] = None
    variant: typing.Optional["ProductVariantImportDraft"] = None
    price: typing.Optional["PriceDraft"] = None
    quantity: typing.Optional[int] = None
    state: typing.Optional[typing.List["ItemState"]] = None
    supply_channel: typing.Optional["ChannelReference"] = None
    tax_rate: typing.Optional["TaxRate"] = None
    custom: typing.Optional["CustomFieldsDraft"] = None
    shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None

    def __init__(
        self,
        product_id: typing.Optional[str] = None,
        name: typing.Optional["LocalizedString"] = None,
        variant: typing.Optional["ProductVariantImportDraft"] = None,
        price: typing.Optional["PriceDraft"] = None,
        quantity: typing.Optional[int] = None,
        state: typing.Optional[typing.List["ItemState"]] = None,
        supply_channel: typing.Optional["ChannelReference"] = None,
        tax_rate: typing.Optional["TaxRate"] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None,
    ) -> None:
        super().__init__(
            product_id,
            name,
            variant,
            price,
            quantity,
            state,
            supply_channel,
            tax_rate,
            custom,
            shipping_details,
        )


@attr.s(auto_attribs=True)
class Location:
    country: typing.Optional["CountryCode"] = None
    state: typing.Optional[str] = None

    def __init__(
        self,
        country: typing.Optional["CountryCode"] = None,
        state: typing.Optional[str] = None,
    ) -> None:
        super().__init__(country, state)


@attr.s(auto_attribs=True)
class Message:
    id: typing.Optional[str] = None
    version: typing.Optional[int] = None
    created_at: typing.Optional[datetime.datetime] = None
    last_modified_at: typing.Optional[datetime.datetime] = None
    sequence_number: typing.Optional[int] = None
    resource: typing.Optional["Reference"] = None
    resource_version: typing.Optional[int] = None
    type: typing.Optional[str] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        type: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            type,
        )


@attr.s(auto_attribs=True)
class MessageConfiguration:
    enabled: typing.Optional[bool] = None

    def __init__(self, enabled: typing.Optional[bool] = None) -> None:
        super().__init__(enabled)


@attr.s(auto_attribs=True)
class MessageSubscription:
    resource_type_id: typing.Optional[str] = None
    types: typing.Optional[typing.List[str]] = None

    def __init__(
        self,
        resource_type_id: typing.Optional[str] = None,
        types: typing.Optional[typing.List[str]] = None,
    ) -> None:
        super().__init__(resource_type_id, types)


@attr.s(auto_attribs=True)
class Money:
    cent_amount: typing.Optional[int] = None
    currency_code: typing.Optional["CurrencyCode"] = None

    def __init__(
        self,
        cent_amount: typing.Optional[int] = None,
        currency_code: typing.Optional["CurrencyCode"] = None,
    ) -> None:
        super().__init__(cent_amount, currency_code)


@attr.s(auto_attribs=True)
class MyCartDraft:
    currency: typing.Optional["CurrencyCode"] = None
    customer_email: typing.Optional[str] = None
    country: typing.Optional[str] = None
    inventory_mode: typing.Optional["InventoryMode"] = None
    line_items: typing.Optional[typing.List["MyLineItemDraft"]] = None
    shipping_address: typing.Optional["Address"] = None
    billing_address: typing.Optional["Address"] = None
    shipping_method: typing.Optional["ShippingMethodReference"] = None
    custom: typing.Optional["CustomFieldsDraft"] = None
    locale: typing.Optional[str] = None
    tax_mode: typing.Optional["TaxMode"] = None
    delete_days_after_last_modification: typing.Optional[int] = None
    item_shipping_addresses: typing.Optional[typing.List["Address"]] = None

    def __init__(
        self,
        currency: typing.Optional["CurrencyCode"] = None,
        customer_email: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        inventory_mode: typing.Optional["InventoryMode"] = None,
        line_items: typing.Optional[typing.List["MyLineItemDraft"]] = None,
        shipping_address: typing.Optional["Address"] = None,
        billing_address: typing.Optional["Address"] = None,
        shipping_method: typing.Optional["ShippingMethodReference"] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        locale: typing.Optional[str] = None,
        tax_mode: typing.Optional["TaxMode"] = None,
        delete_days_after_last_modification: typing.Optional[int] = None,
        item_shipping_addresses: typing.Optional[typing.List["Address"]] = None,
    ) -> None:
        super().__init__(
            currency,
            customer_email,
            country,
            inventory_mode,
            line_items,
            shipping_address,
            billing_address,
            shipping_method,
            custom,
            locale,
            tax_mode,
            delete_days_after_last_modification,
            item_shipping_addresses,
        )


@attr.s(auto_attribs=True)
class MyCustomerDraft:
    email: typing.Optional[str] = None
    password: typing.Optional[str] = None
    first_name: typing.Optional[str] = None
    last_name: typing.Optional[str] = None
    middle_name: typing.Optional[str] = None
    title: typing.Optional[str] = None
    date_of_birth: typing.Optional[datetime.date] = None
    company_name: typing.Optional[str] = None
    vat_id: typing.Optional[str] = None
    addresses: typing.Optional[typing.List["Address"]] = None
    default_shipping_address: typing.Optional[int] = None
    default_billing_address: typing.Optional[int] = None
    custom: typing.Optional["CustomFields"] = None
    locale: typing.Optional[str] = None

    def __init__(
        self,
        email: typing.Optional[str] = None,
        password: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        middle_name: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        date_of_birth: typing.Optional[datetime.date] = None,
        company_name: typing.Optional[str] = None,
        vat_id: typing.Optional[str] = None,
        addresses: typing.Optional[typing.List["Address"]] = None,
        default_shipping_address: typing.Optional[int] = None,
        default_billing_address: typing.Optional[int] = None,
        custom: typing.Optional["CustomFields"] = None,
        locale: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            email,
            password,
            first_name,
            last_name,
            middle_name,
            title,
            date_of_birth,
            company_name,
            vat_id,
            addresses,
            default_shipping_address,
            default_billing_address,
            custom,
            locale,
        )


@attr.s(auto_attribs=True)
class MyLineItemDraft:
    product_id: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    quantity: typing.Optional[int] = None
    supply_channel: typing.Optional["ChannelReference"] = None
    distribution_channel: typing.Optional["ChannelReference"] = None
    custom: typing.Optional["CustomFieldsDraft"] = None
    shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None

    def __init__(
        self,
        product_id: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        quantity: typing.Optional[int] = None,
        supply_channel: typing.Optional["ChannelReference"] = None,
        distribution_channel: typing.Optional["ChannelReference"] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None,
    ) -> None:
        super().__init__(
            product_id,
            variant_id,
            quantity,
            supply_channel,
            distribution_channel,
            custom,
            shipping_details,
        )


@attr.s(auto_attribs=True)
class MyOrderFromCartDraft:
    id: typing.Optional[str] = None
    version: typing.Optional[int] = None

    def __init__(
        self, id: typing.Optional[str] = None, version: typing.Optional[int] = None
    ) -> None:
        super().__init__(id, version)


@attr.s(auto_attribs=True)
class OrderFromCartDraft:
    id: typing.Optional[str] = None
    version: typing.Optional[int] = None
    order_number: typing.Optional[str] = None
    payment_state: typing.Optional["PaymentState"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        order_number: typing.Optional[str] = None,
        payment_state: typing.Optional["PaymentState"] = None,
    ) -> None:
        super().__init__(id, version, order_number, payment_state)


@attr.s(auto_attribs=True)
class OrderImportDraft:
    order_number: typing.Optional[str] = None
    customer_id: typing.Optional[str] = None
    customer_email: typing.Optional[str] = None
    line_items: typing.Optional[typing.List["LineItemImportDraft"]] = None
    custom_line_items: typing.Optional[typing.List["CustomLineItemDraft"]] = None
    total_price: typing.Optional["Money"] = None
    taxed_price: typing.Optional["TaxedPrice"] = None
    shipping_address: typing.Optional["Address"] = None
    billing_address: typing.Optional["Address"] = None
    customer_group: typing.Optional["CustomerGroupReference"] = None
    country: typing.Optional[str] = None
    order_state: typing.Optional["OrderState"] = None
    shipment_state: typing.Optional["ShipmentState"] = None
    payment_state: typing.Optional["PaymentState"] = None
    shipping_info: typing.Optional["ShippingInfoDraft"] = None
    completed_at: typing.Optional[datetime.datetime] = None
    custom: typing.Optional["CustomFieldsDraft"] = None
    inventory_mode: typing.Optional["InventoryMode"] = None
    tax_rounding_mode: typing.Optional["RoundingMode"] = None
    item_shipping_addresses: typing.Optional[typing.List["Address"]] = None

    def __init__(
        self,
        order_number: typing.Optional[str] = None,
        customer_id: typing.Optional[str] = None,
        customer_email: typing.Optional[str] = None,
        line_items: typing.Optional[typing.List["LineItemImportDraft"]] = None,
        custom_line_items: typing.Optional[typing.List["CustomLineItemDraft"]] = None,
        total_price: typing.Optional["Money"] = None,
        taxed_price: typing.Optional["TaxedPrice"] = None,
        shipping_address: typing.Optional["Address"] = None,
        billing_address: typing.Optional["Address"] = None,
        customer_group: typing.Optional["CustomerGroupReference"] = None,
        country: typing.Optional[str] = None,
        order_state: typing.Optional["OrderState"] = None,
        shipment_state: typing.Optional["ShipmentState"] = None,
        payment_state: typing.Optional["PaymentState"] = None,
        shipping_info: typing.Optional["ShippingInfoDraft"] = None,
        completed_at: typing.Optional[datetime.datetime] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        inventory_mode: typing.Optional["InventoryMode"] = None,
        tax_rounding_mode: typing.Optional["RoundingMode"] = None,
        item_shipping_addresses: typing.Optional[typing.List["Address"]] = None,
    ) -> None:
        super().__init__(
            order_number,
            customer_id,
            customer_email,
            line_items,
            custom_line_items,
            total_price,
            taxed_price,
            shipping_address,
            billing_address,
            customer_group,
            country,
            order_state,
            shipment_state,
            payment_state,
            shipping_info,
            completed_at,
            custom,
            inventory_mode,
            tax_rounding_mode,
            item_shipping_addresses,
        )


@attr.s(auto_attribs=True)
class PagedQueryResponse:
    count: typing.Optional[int] = None
    total: typing.Optional[int] = None
    offset: typing.Optional[int] = None
    results: typing.Optional[typing.List["Resource"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["Resource"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class Parcel:
    id: typing.Optional[str] = None
    created_at: typing.Optional[datetime.datetime] = None
    measurements: typing.Optional["ParcelMeasurements"] = None
    tracking_data: typing.Optional["TrackingData"] = None
    items: typing.Optional[typing.List["DeliveryItem"]] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        measurements: typing.Optional["ParcelMeasurements"] = None,
        tracking_data: typing.Optional["TrackingData"] = None,
        items: typing.Optional[typing.List["DeliveryItem"]] = None,
    ) -> None:
        super().__init__(id, created_at, measurements, tracking_data, items)


@attr.s(auto_attribs=True)
class ParcelDraft:
    measurements: typing.Optional["ParcelMeasurements"] = None
    tracking_data: typing.Optional["TrackingData"] = None
    items: typing.Optional[typing.List["DeliveryItem"]] = None

    def __init__(
        self,
        measurements: typing.Optional["ParcelMeasurements"] = None,
        tracking_data: typing.Optional["TrackingData"] = None,
        items: typing.Optional[typing.List["DeliveryItem"]] = None,
    ) -> None:
        super().__init__(measurements, tracking_data, items)


@attr.s(auto_attribs=True)
class ParcelMeasurements:
    height_in_millimeter: typing.Optional[int] = None
    length_in_millimeter: typing.Optional[int] = None
    width_in_millimeter: typing.Optional[int] = None
    weight_in_gram: typing.Optional[int] = None

    def __init__(
        self,
        height_in_millimeter: typing.Optional[int] = None,
        length_in_millimeter: typing.Optional[int] = None,
        width_in_millimeter: typing.Optional[int] = None,
        weight_in_gram: typing.Optional[int] = None,
    ) -> None:
        super().__init__(
            height_in_millimeter,
            length_in_millimeter,
            width_in_millimeter,
            weight_in_gram,
        )


@attr.s(auto_attribs=True)
class PayloadNotIncluded:
    reason: typing.Optional[str] = None
    payload_type: typing.Optional[str] = None

    def __init__(
        self,
        reason: typing.Optional[str] = None,
        payload_type: typing.Optional[str] = None,
    ) -> None:
        super().__init__(reason, payload_type)


@attr.s(auto_attribs=True)
class PaymentDraft:
    customer: typing.Optional["CustomerReference"] = None
    anonymous_id: typing.Optional[str] = None
    external_id: typing.Optional[str] = None
    interface_id: typing.Optional[str] = None
    amount_planned: typing.Optional["Money"] = None
    amount_authorized: typing.Optional["Money"] = None
    authorized_until: typing.Optional[str] = None
    amount_paid: typing.Optional["Money"] = None
    amount_refunded: typing.Optional["Money"] = None
    payment_method_info: typing.Optional["PaymentMethodInfo"] = None
    payment_status: typing.Optional["PaymentStatus"] = None
    transactions: typing.Optional[typing.List["TransactionDraft"]] = None
    interface_interactions: typing.Optional[typing.List["CustomFieldsDraft"]] = None
    custom: typing.Optional["CustomFieldsDraft"] = None
    key: typing.Optional[str] = None

    def __init__(
        self,
        customer: typing.Optional["CustomerReference"] = None,
        anonymous_id: typing.Optional[str] = None,
        external_id: typing.Optional[str] = None,
        interface_id: typing.Optional[str] = None,
        amount_planned: typing.Optional["Money"] = None,
        amount_authorized: typing.Optional["Money"] = None,
        authorized_until: typing.Optional[str] = None,
        amount_paid: typing.Optional["Money"] = None,
        amount_refunded: typing.Optional["Money"] = None,
        payment_method_info: typing.Optional["PaymentMethodInfo"] = None,
        payment_status: typing.Optional["PaymentStatus"] = None,
        transactions: typing.Optional[typing.List["TransactionDraft"]] = None,
        interface_interactions: typing.Optional[
            typing.List["CustomFieldsDraft"]
        ] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        key: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            customer,
            anonymous_id,
            external_id,
            interface_id,
            amount_planned,
            amount_authorized,
            authorized_until,
            amount_paid,
            amount_refunded,
            payment_method_info,
            payment_status,
            transactions,
            interface_interactions,
            custom,
            key,
        )


@attr.s(auto_attribs=True)
class PaymentInfo:
    payments: typing.Optional[typing.List["PaymentReference"]] = None

    def __init__(
        self, payments: typing.Optional[typing.List["PaymentReference"]] = None
    ) -> None:
        super().__init__(payments)


@attr.s(auto_attribs=True)
class PaymentMethodInfo:
    payment_interface: typing.Optional[str] = None
    method: typing.Optional[str] = None
    name: typing.Optional["LocalizedString"] = None

    def __init__(
        self,
        payment_interface: typing.Optional[str] = None,
        method: typing.Optional[str] = None,
        name: typing.Optional["LocalizedString"] = None,
    ) -> None:
        super().__init__(payment_interface, method, name)


@attr.s(auto_attribs=True)
class PaymentStatus:
    interface_code: typing.Optional[str] = None
    interface_text: typing.Optional[str] = None
    state: typing.Optional["StateReference"] = None

    def __init__(
        self,
        interface_code: typing.Optional[str] = None,
        interface_text: typing.Optional[str] = None,
        state: typing.Optional["StateReference"] = None,
    ) -> None:
        super().__init__(interface_code, interface_text, state)


@attr.s(auto_attribs=True)
class Price:
    id: typing.Optional[str] = None
    value: typing.Optional["Money"] = None
    country: typing.Optional["CountryCode"] = None
    customer_group: typing.Optional["CustomerGroupReference"] = None
    channel: typing.Optional["ChannelReference"] = None
    valid_from: typing.Optional[datetime.datetime] = None
    valid_until: typing.Optional[datetime.datetime] = None
    discounted: typing.Optional["DiscountedPrice"] = None
    custom: typing.Optional["CustomFields"] = None
    tiers: typing.Optional[typing.List["PriceTier"]] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        value: typing.Optional["Money"] = None,
        country: typing.Optional["CountryCode"] = None,
        customer_group: typing.Optional["CustomerGroupReference"] = None,
        channel: typing.Optional["ChannelReference"] = None,
        valid_from: typing.Optional[datetime.datetime] = None,
        valid_until: typing.Optional[datetime.datetime] = None,
        discounted: typing.Optional["DiscountedPrice"] = None,
        custom: typing.Optional["CustomFields"] = None,
        tiers: typing.Optional[typing.List["PriceTier"]] = None,
    ) -> None:
        super().__init__(
            id,
            value,
            country,
            customer_group,
            channel,
            valid_from,
            valid_until,
            discounted,
            custom,
            tiers,
        )


@attr.s(auto_attribs=True)
class PriceDraft:
    value: typing.Optional["Money"] = None
    country: typing.Optional["CountryCode"] = None
    customer_group: typing.Optional["CustomerGroupReference"] = None
    channel: typing.Optional["ChannelReference"] = None
    valid_from: typing.Optional[datetime.datetime] = None
    valid_until: typing.Optional[datetime.datetime] = None
    custom: typing.Optional["CustomFieldsDraft"] = None
    tiers: typing.Optional[typing.List["PriceTier"]] = None

    def __init__(
        self,
        value: typing.Optional["Money"] = None,
        country: typing.Optional["CountryCode"] = None,
        customer_group: typing.Optional["CustomerGroupReference"] = None,
        channel: typing.Optional["ChannelReference"] = None,
        valid_from: typing.Optional[datetime.datetime] = None,
        valid_until: typing.Optional[datetime.datetime] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        tiers: typing.Optional[typing.List["PriceTier"]] = None,
    ) -> None:
        super().__init__(
            value,
            country,
            customer_group,
            channel,
            valid_from,
            valid_until,
            custom,
            tiers,
        )


@attr.s(auto_attribs=True)
class PriceFunction:
    currency_code: typing.Optional["CurrencyCode"] = None
    function: typing.Optional[str] = None

    def __init__(
        self,
        currency_code: typing.Optional["CurrencyCode"] = None,
        function: typing.Optional[str] = None,
    ) -> None:
        super().__init__(currency_code, function)


@attr.s(auto_attribs=True)
class PriceTier:
    minimum_quantity: typing.Optional[int] = None
    value: typing.Optional["Money"] = None

    def __init__(
        self,
        minimum_quantity: typing.Optional[int] = None,
        value: typing.Optional["Money"] = None,
    ) -> None:
        super().__init__(minimum_quantity, value)


@attr.s(auto_attribs=True)
class ProductCatalogData:
    published: typing.Optional[bool] = None
    current: typing.Optional["ProductData"] = None
    staged: typing.Optional["ProductData"] = None
    has_staged_changes: typing.Optional[bool] = None

    def __init__(
        self,
        published: typing.Optional[bool] = None,
        current: typing.Optional["ProductData"] = None,
        staged: typing.Optional["ProductData"] = None,
        has_staged_changes: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(published, current, staged, has_staged_changes)


@attr.s(auto_attribs=True)
class ProductData:
    name: typing.Optional["LocalizedString"] = None
    categories: typing.Optional[typing.List["CategoryReference"]] = None
    category_order_hints: typing.Optional["CategoryOrderHints"] = None
    description: typing.Optional["LocalizedString"] = None
    slug: typing.Optional["LocalizedString"] = None
    meta_title: typing.Optional["LocalizedString"] = None
    meta_description: typing.Optional["LocalizedString"] = None
    meta_keywords: typing.Optional["LocalizedString"] = None
    master_variant: typing.Optional["ProductVariant"] = None
    variants: typing.Optional[typing.List["ProductVariant"]] = None
    search_keywords: typing.Optional["SearchKeywords"] = None

    def __init__(
        self,
        name: typing.Optional["LocalizedString"] = None,
        categories: typing.Optional[typing.List["CategoryReference"]] = None,
        category_order_hints: typing.Optional["CategoryOrderHints"] = None,
        description: typing.Optional["LocalizedString"] = None,
        slug: typing.Optional["LocalizedString"] = None,
        meta_title: typing.Optional["LocalizedString"] = None,
        meta_description: typing.Optional["LocalizedString"] = None,
        meta_keywords: typing.Optional["LocalizedString"] = None,
        master_variant: typing.Optional["ProductVariant"] = None,
        variants: typing.Optional[typing.List["ProductVariant"]] = None,
        search_keywords: typing.Optional["SearchKeywords"] = None,
    ) -> None:
        super().__init__(
            name,
            categories,
            category_order_hints,
            description,
            slug,
            meta_title,
            meta_description,
            meta_keywords,
            master_variant,
            variants,
            search_keywords,
        )


@attr.s(auto_attribs=True)
class ProductDiscountDraft:
    name: typing.Optional["LocalizedString"] = None
    description: typing.Optional["LocalizedString"] = None
    value: typing.Optional["ProductDiscountValue"] = None
    predicate: typing.Optional[str] = None
    sort_order: typing.Optional[str] = None
    is_active: typing.Optional[bool] = None
    valid_from: typing.Optional[datetime.datetime] = None
    valid_until: typing.Optional[datetime.datetime] = None

    def __init__(
        self,
        name: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        value: typing.Optional["ProductDiscountValue"] = None,
        predicate: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        is_active: typing.Optional[bool] = None,
        valid_from: typing.Optional[datetime.datetime] = None,
        valid_until: typing.Optional[datetime.datetime] = None,
    ) -> None:
        super().__init__(
            name,
            description,
            value,
            predicate,
            sort_order,
            is_active,
            valid_from,
            valid_until,
        )


@attr.s(auto_attribs=True)
class ProductDiscountMatchQuery:
    product_id: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    staged: typing.Optional[bool] = None
    price: typing.Optional["Price"] = None

    def __init__(
        self,
        product_id: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        staged: typing.Optional[bool] = None,
        price: typing.Optional["Price"] = None,
    ) -> None:
        super().__init__(product_id, variant_id, staged, price)


@attr.s(auto_attribs=True)
class ProductDiscountValue:
    type: typing.Optional[str] = None

    def __init__(self, type: typing.Optional[str] = None) -> None:
        super().__init__(type)


@attr.s(auto_attribs=True)
class ProductDraft:
    product_type: typing.Optional["ProductTypeReference"] = None
    name: typing.Optional["LocalizedString"] = None
    slug: typing.Optional["LocalizedString"] = None
    key: typing.Optional[str] = None
    description: typing.Optional["LocalizedString"] = None
    categories: typing.Optional[typing.List["CategoryReference"]] = None
    category_order_hints: typing.Optional["CategoryOrderHints"] = None
    meta_title: typing.Optional["LocalizedString"] = None
    meta_description: typing.Optional["LocalizedString"] = None
    meta_keywords: typing.Optional["LocalizedString"] = None
    master_variant: typing.Optional["ProductVariantDraft"] = None
    variants: typing.Optional[typing.List["ProductVariantDraft"]] = None
    tax_category: typing.Optional["TaxCategoryReference"] = None
    search_keywords: typing.Optional["SearchKeywords"] = None
    state: typing.Optional["StateReference"] = None
    publish: typing.Optional[bool] = None

    def __init__(
        self,
        product_type: typing.Optional["ProductTypeReference"] = None,
        name: typing.Optional["LocalizedString"] = None,
        slug: typing.Optional["LocalizedString"] = None,
        key: typing.Optional[str] = None,
        description: typing.Optional["LocalizedString"] = None,
        categories: typing.Optional[typing.List["CategoryReference"]] = None,
        category_order_hints: typing.Optional["CategoryOrderHints"] = None,
        meta_title: typing.Optional["LocalizedString"] = None,
        meta_description: typing.Optional["LocalizedString"] = None,
        meta_keywords: typing.Optional["LocalizedString"] = None,
        master_variant: typing.Optional["ProductVariantDraft"] = None,
        variants: typing.Optional[typing.List["ProductVariantDraft"]] = None,
        tax_category: typing.Optional["TaxCategoryReference"] = None,
        search_keywords: typing.Optional["SearchKeywords"] = None,
        state: typing.Optional["StateReference"] = None,
        publish: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(
            product_type,
            name,
            slug,
            key,
            description,
            categories,
            category_order_hints,
            meta_title,
            meta_description,
            meta_keywords,
            master_variant,
            variants,
            tax_category,
            search_keywords,
            state,
            publish,
        )


@attr.s(auto_attribs=True)
class ProductTypeDraft:
    key: typing.Optional[str] = None
    name: typing.Optional[str] = None
    description: typing.Optional[str] = None
    attributes: typing.Optional[typing.List["AttributeDefinitionDraft"]] = None

    def __init__(
        self,
        key: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        attributes: typing.Optional[typing.List["AttributeDefinitionDraft"]] = None,
    ) -> None:
        super().__init__(key, name, description, attributes)


@attr.s(auto_attribs=True)
class ProductVariant:
    id: typing.Optional[int] = None
    sku: typing.Optional[str] = None
    key: typing.Optional[str] = None
    prices: typing.Optional[typing.List["Price"]] = None
    attributes: typing.Optional[typing.List["Attribute"]] = None
    price: typing.Optional["Price"] = None
    images: typing.Optional[typing.List["Image"]] = None
    assets: typing.Optional[typing.List["Asset"]] = None
    availability: typing.Optional["ProductVariantAvailability"] = None
    is_matching_variant: typing.Optional[bool] = None
    scoped_price: typing.Optional["ScopedPrice"] = None
    scoped_price_discounted: typing.Optional[bool] = None

    def __init__(
        self,
        id: typing.Optional[int] = None,
        sku: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        prices: typing.Optional[typing.List["Price"]] = None,
        attributes: typing.Optional[typing.List["Attribute"]] = None,
        price: typing.Optional["Price"] = None,
        images: typing.Optional[typing.List["Image"]] = None,
        assets: typing.Optional[typing.List["Asset"]] = None,
        availability: typing.Optional["ProductVariantAvailability"] = None,
        is_matching_variant: typing.Optional[bool] = None,
        scoped_price: typing.Optional["ScopedPrice"] = None,
        scoped_price_discounted: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(
            id,
            sku,
            key,
            prices,
            attributes,
            price,
            images,
            assets,
            availability,
            is_matching_variant,
            scoped_price,
            scoped_price_discounted,
        )


@attr.s(auto_attribs=True)
class ProductVariantAvailability:
    is_on_stock: typing.Optional[bool] = None
    restockable_in_days: typing.Optional[int] = None
    available_quantity: typing.Optional[int] = None
    channels: typing.Optional["ProductVariantChannelAvailabilityMap"] = None

    def __init__(
        self,
        is_on_stock: typing.Optional[bool] = None,
        restockable_in_days: typing.Optional[int] = None,
        available_quantity: typing.Optional[int] = None,
        channels: typing.Optional["ProductVariantChannelAvailabilityMap"] = None,
    ) -> None:
        super().__init__(is_on_stock, restockable_in_days, available_quantity, channels)


@attr.s(auto_attribs=True)
class ProductVariantChannelAvailability:
    is_on_stock: typing.Optional[bool] = None
    restockable_in_days: typing.Optional[int] = None
    available_quantity: typing.Optional[int] = None

    def __init__(
        self,
        is_on_stock: typing.Optional[bool] = None,
        restockable_in_days: typing.Optional[int] = None,
        available_quantity: typing.Optional[int] = None,
    ) -> None:
        super().__init__(is_on_stock, restockable_in_days, available_quantity)


@attr.s(auto_attribs=True)
class ProductVariantChannelAvailabilityMap:
    def __init__(self=None) -> None:
        super().__init__(None)


@attr.s(auto_attribs=True)
class ProductVariantDraft:
    sku: typing.Optional[str] = None
    key: typing.Optional[str] = None
    prices: typing.Optional[typing.List["PriceDraft"]] = None
    attributes: typing.Optional[typing.List["Attribute"]] = None
    images: typing.Optional[typing.List["Image"]] = None
    assets: typing.Optional[typing.List["AssetDraft"]] = None

    def __init__(
        self,
        sku: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        prices: typing.Optional[typing.List["PriceDraft"]] = None,
        attributes: typing.Optional[typing.List["Attribute"]] = None,
        images: typing.Optional[typing.List["Image"]] = None,
        assets: typing.Optional[typing.List["AssetDraft"]] = None,
    ) -> None:
        super().__init__(sku, key, prices, attributes, images, assets)


@attr.s(auto_attribs=True)
class ProductVariantImportDraft:
    id: typing.Optional[int] = None
    sku: typing.Optional[str] = None
    prices: typing.Optional[typing.List["Price"]] = None
    attributes: typing.Optional[typing.List["Attribute"]] = None
    images: typing.Optional[typing.List["Image"]] = None

    def __init__(
        self,
        id: typing.Optional[int] = None,
        sku: typing.Optional[str] = None,
        prices: typing.Optional[typing.List["Price"]] = None,
        attributes: typing.Optional[typing.List["Attribute"]] = None,
        images: typing.Optional[typing.List["Image"]] = None,
    ) -> None:
        super().__init__(id, sku, prices, attributes, images)


@attr.s(auto_attribs=True)
class Project:
    version: typing.Optional[int] = None
    key: typing.Optional[str] = None
    name: typing.Optional[str] = None
    countries: typing.Optional[typing.List["CountryCode"]] = None
    currencies: typing.Optional[typing.List["CurrencyCode"]] = None
    languages: typing.Optional[typing.List["Locale"]] = None
    created_at: typing.Optional[datetime.datetime] = None
    trial_until: typing.Optional[str] = None
    messages: typing.Optional["MessageConfiguration"] = None
    shipping_rate_input_type: typing.Optional["ShippingRateInputType"] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        key: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        countries: typing.Optional[typing.List["CountryCode"]] = None,
        currencies: typing.Optional[typing.List["CurrencyCode"]] = None,
        languages: typing.Optional[typing.List["Locale"]] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        trial_until: typing.Optional[str] = None,
        messages: typing.Optional["MessageConfiguration"] = None,
        shipping_rate_input_type: typing.Optional["ShippingRateInputType"] = None,
    ) -> None:
        super().__init__(
            version,
            key,
            name,
            countries,
            currencies,
            languages,
            created_at,
            trial_until,
            messages,
            shipping_rate_input_type,
        )


@attr.s(auto_attribs=True)
class ReplicaCartDraft:
    reference: typing.Optional["Reference"] = None

    def __init__(self, reference: typing.Optional["Reference"] = None) -> None:
        super().__init__(reference)


@attr.s(auto_attribs=True)
class Resource:
    id: typing.Optional[str] = None
    version: typing.Optional[int] = None
    created_at: typing.Optional[datetime.datetime] = None
    last_modified_at: typing.Optional[datetime.datetime] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
    ) -> None:
        super().__init__(id, version, created_at, last_modified_at)


@attr.s(auto_attribs=True)
class ResourceIdentifier:
    type_id: typing.Optional["ReferenceTypeId"] = None
    id: typing.Optional[str] = None
    key: typing.Optional[str] = None

    def __init__(
        self,
        type_id: typing.Optional["ReferenceTypeId"] = None,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
    ) -> None:
        super().__init__(type_id, id, key)


@attr.s(auto_attribs=True)
class ReturnInfo:
    items: typing.Optional[typing.List["ReturnItem"]] = None
    return_tracking_id: typing.Optional[str] = None
    return_date: typing.Optional[datetime.datetime] = None

    def __init__(
        self,
        items: typing.Optional[typing.List["ReturnItem"]] = None,
        return_tracking_id: typing.Optional[str] = None,
        return_date: typing.Optional[datetime.datetime] = None,
    ) -> None:
        super().__init__(items, return_tracking_id, return_date)


@attr.s(auto_attribs=True)
class ReturnItem:
    id: typing.Optional[str] = None
    quantity: typing.Optional[int] = None
    line_item_id: typing.Optional[str] = None
    comment: typing.Optional[str] = None
    shipment_state: typing.Optional["ReturnShipmentState"] = None
    payment_state: typing.Optional["ReturnPaymentState"] = None
    last_modified_at: typing.Optional[datetime.datetime] = None
    created_at: typing.Optional[datetime.datetime] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        quantity: typing.Optional[int] = None,
        line_item_id: typing.Optional[str] = None,
        comment: typing.Optional[str] = None,
        shipment_state: typing.Optional["ReturnShipmentState"] = None,
        payment_state: typing.Optional["ReturnPaymentState"] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        created_at: typing.Optional[datetime.datetime] = None,
    ) -> None:
        super().__init__(
            id,
            quantity,
            line_item_id,
            comment,
            shipment_state,
            payment_state,
            last_modified_at,
            created_at,
        )


@attr.s(auto_attribs=True)
class ReturnItemDraft:
    quantity: typing.Optional[int] = None
    line_item_id: typing.Optional[str] = None
    comment: typing.Optional[str] = None
    shipment_state: typing.Optional["ReturnShipmentState"] = None

    def __init__(
        self,
        quantity: typing.Optional[int] = None,
        line_item_id: typing.Optional[str] = None,
        comment: typing.Optional[str] = None,
        shipment_state: typing.Optional["ReturnShipmentState"] = None,
    ) -> None:
        super().__init__(quantity, line_item_id, comment, shipment_state)


@attr.s(auto_attribs=True)
class ReviewDraft:
    key: typing.Optional[str] = None
    uniqueness_value: typing.Optional[str] = None
    locale: typing.Optional[str] = None
    author_name: typing.Optional[str] = None
    title: typing.Optional[str] = None
    text: typing.Optional[str] = None
    target: typing.Optional["ProductReference"] = None
    state: typing.Optional["ResourceIdentifier"] = None
    rating: typing.Optional[int] = None
    customer: typing.Optional["CustomerReference"] = None
    custom: typing.Optional["CustomFieldsDraft"] = None

    def __init__(
        self,
        key: typing.Optional[str] = None,
        uniqueness_value: typing.Optional[str] = None,
        locale: typing.Optional[str] = None,
        author_name: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        text: typing.Optional[str] = None,
        target: typing.Optional["ProductReference"] = None,
        state: typing.Optional["ResourceIdentifier"] = None,
        rating: typing.Optional[int] = None,
        customer: typing.Optional["CustomerReference"] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
    ) -> None:
        super().__init__(
            key,
            uniqueness_value,
            locale,
            author_name,
            title,
            text,
            target,
            state,
            rating,
            customer,
            custom,
        )


@attr.s(auto_attribs=True)
class ReviewRatingStatistics:
    average_rating: typing.Optional[int] = None
    highest_rating: typing.Optional[int] = None
    lowest_rating: typing.Optional[int] = None
    count: typing.Optional[int] = None
    ratings_distribution: typing.Optional[object] = None

    def __init__(
        self,
        average_rating: typing.Optional[int] = None,
        highest_rating: typing.Optional[int] = None,
        lowest_rating: typing.Optional[int] = None,
        count: typing.Optional[int] = None,
        ratings_distribution: typing.Optional[object] = None,
    ) -> None:
        super().__init__(
            average_rating, highest_rating, lowest_rating, count, ratings_distribution
        )


@attr.s(auto_attribs=True)
class ScopedPrice:
    id: typing.Optional[str] = None
    value: typing.Optional["TypedMoney"] = None
    current_value: typing.Optional["TypedMoney"] = None
    country: typing.Optional["CountryCode"] = None
    customer_group: typing.Optional["CustomerGroupReference"] = None
    channel: typing.Optional["ChannelReference"] = None
    valid_from: typing.Optional[datetime.datetime] = None
    valid_until: typing.Optional[datetime.datetime] = None
    discounted: typing.Optional["DiscountedPrice"] = None
    custom: typing.Optional["CustomFields"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        value: typing.Optional["TypedMoney"] = None,
        current_value: typing.Optional["TypedMoney"] = None,
        country: typing.Optional["CountryCode"] = None,
        customer_group: typing.Optional["CustomerGroupReference"] = None,
        channel: typing.Optional["ChannelReference"] = None,
        valid_from: typing.Optional[datetime.datetime] = None,
        valid_until: typing.Optional[datetime.datetime] = None,
        discounted: typing.Optional["DiscountedPrice"] = None,
        custom: typing.Optional["CustomFields"] = None,
    ) -> None:
        super().__init__(
            id,
            value,
            current_value,
            country,
            customer_group,
            channel,
            valid_from,
            valid_until,
            discounted,
            custom,
        )


@attr.s(auto_attribs=True)
class SearchKeyword:
    text: typing.Optional[str] = None
    suggest_tokenizer: typing.Optional["SuggestTokenizer"] = None

    def __init__(
        self,
        text: typing.Optional[str] = None,
        suggest_tokenizer: typing.Optional["SuggestTokenizer"] = None,
    ) -> None:
        super().__init__(text, suggest_tokenizer)


@attr.s(auto_attribs=True)
class SearchKeywords:
    def __init__(self=None) -> None:
        super().__init__(None)


@attr.s(auto_attribs=True)
class ShippingInfo:
    shipping_method_name: typing.Optional[str] = None
    price: typing.Optional["TypedMoney"] = None
    shipping_rate: typing.Optional["ShippingRate"] = None
    taxed_price: typing.Optional["TaxedItemPrice"] = None
    tax_rate: typing.Optional["TaxRate"] = None
    tax_category: typing.Optional["TaxCategoryReference"] = None
    shipping_method: typing.Optional["ShippingMethodReference"] = None
    deliveries: typing.Optional[typing.List["Delivery"]] = None
    discounted_price: typing.Optional["DiscountedLineItemPrice"] = None
    shipping_method_state: typing.Optional["ShippingMethodState"] = None

    def __init__(
        self,
        shipping_method_name: typing.Optional[str] = None,
        price: typing.Optional["TypedMoney"] = None,
        shipping_rate: typing.Optional["ShippingRate"] = None,
        taxed_price: typing.Optional["TaxedItemPrice"] = None,
        tax_rate: typing.Optional["TaxRate"] = None,
        tax_category: typing.Optional["TaxCategoryReference"] = None,
        shipping_method: typing.Optional["ShippingMethodReference"] = None,
        deliveries: typing.Optional[typing.List["Delivery"]] = None,
        discounted_price: typing.Optional["DiscountedLineItemPrice"] = None,
        shipping_method_state: typing.Optional["ShippingMethodState"] = None,
    ) -> None:
        super().__init__(
            shipping_method_name,
            price,
            shipping_rate,
            taxed_price,
            tax_rate,
            tax_category,
            shipping_method,
            deliveries,
            discounted_price,
            shipping_method_state,
        )


@attr.s(auto_attribs=True)
class ShippingInfoDraft:
    shipping_method_name: typing.Optional[str] = None
    price: typing.Optional["Money"] = None
    shipping_rate: typing.Optional["ShippingRateDraft"] = None
    taxed_price: typing.Optional["TaxedItemPriceDraft"] = None
    tax_rate: typing.Optional["TaxRate"] = None
    tax_category: typing.Optional["TaxCategoryReference"] = None
    shipping_method: typing.Optional["ShippingMethodReference"] = None
    deliveries: typing.Optional[typing.List["Delivery"]] = None
    discounted_price: typing.Optional["DiscountedLineItemPriceDraft"] = None
    shipping_method_state: typing.Optional["ShippingMethodState"] = None

    def __init__(
        self,
        shipping_method_name: typing.Optional[str] = None,
        price: typing.Optional["Money"] = None,
        shipping_rate: typing.Optional["ShippingRateDraft"] = None,
        taxed_price: typing.Optional["TaxedItemPriceDraft"] = None,
        tax_rate: typing.Optional["TaxRate"] = None,
        tax_category: typing.Optional["TaxCategoryReference"] = None,
        shipping_method: typing.Optional["ShippingMethodReference"] = None,
        deliveries: typing.Optional[typing.List["Delivery"]] = None,
        discounted_price: typing.Optional["DiscountedLineItemPriceDraft"] = None,
        shipping_method_state: typing.Optional["ShippingMethodState"] = None,
    ) -> None:
        super().__init__(
            shipping_method_name,
            price,
            shipping_rate,
            taxed_price,
            tax_rate,
            tax_category,
            shipping_method,
            deliveries,
            discounted_price,
            shipping_method_state,
        )


@attr.s(auto_attribs=True)
class ShippingMethodDraft:
    key: typing.Optional[str] = None
    name: typing.Optional[str] = None
    description: typing.Optional[str] = None
    tax_category: typing.Optional["TaxCategoryReference"] = None
    zone_rates: typing.Optional[typing.List["ZoneRateDraft"]] = None
    is_default: typing.Optional[bool] = None
    predicate: typing.Optional[str] = None

    def __init__(
        self,
        key: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        tax_category: typing.Optional["TaxCategoryReference"] = None,
        zone_rates: typing.Optional[typing.List["ZoneRateDraft"]] = None,
        is_default: typing.Optional[bool] = None,
        predicate: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            key, name, description, tax_category, zone_rates, is_default, predicate
        )


@attr.s(auto_attribs=True)
class ShippingRate:
    price: typing.Optional["TypedMoney"] = None
    free_above: typing.Optional["TypedMoney"] = None
    is_matching: typing.Optional[bool] = None
    tiers: typing.Optional[typing.List["ShippingRatePriceTier"]] = None

    def __init__(
        self,
        price: typing.Optional["TypedMoney"] = None,
        free_above: typing.Optional["TypedMoney"] = None,
        is_matching: typing.Optional[bool] = None,
        tiers: typing.Optional[typing.List["ShippingRatePriceTier"]] = None,
    ) -> None:
        super().__init__(price, free_above, is_matching, tiers)


@attr.s(auto_attribs=True)
class ShippingRateDraft:
    price: typing.Optional["Money"] = None
    free_above: typing.Optional["Money"] = None
    tiers: typing.Optional[typing.List["ShippingRatePriceTier"]] = None

    def __init__(
        self,
        price: typing.Optional["Money"] = None,
        free_above: typing.Optional["Money"] = None,
        tiers: typing.Optional[typing.List["ShippingRatePriceTier"]] = None,
    ) -> None:
        super().__init__(price, free_above, tiers)


@attr.s(auto_attribs=True)
class ShippingRateInput:
    type: typing.Optional[str] = None

    def __init__(self, type: typing.Optional[str] = None) -> None:
        super().__init__(type)


@attr.s(auto_attribs=True)
class ShippingRateInputDraft:
    type: typing.Optional[str] = None

    def __init__(self, type: typing.Optional[str] = None) -> None:
        super().__init__(type)


@attr.s(auto_attribs=True)
class ShippingRateInputType:
    type: typing.Optional["ShippingRateTierType"] = None

    def __init__(self, type: typing.Optional["ShippingRateTierType"] = None) -> None:
        super().__init__(type)


@attr.s(auto_attribs=True)
class ShippingRatePriceTier:
    type: typing.Optional["ShippingRateTierType"] = None

    def __init__(self, type: typing.Optional["ShippingRateTierType"] = None) -> None:
        super().__init__(type)


@attr.s(auto_attribs=True)
class ShoppingListDraft:
    custom: typing.Optional["CustomFieldsDraft"] = None
    customer: typing.Optional["CustomerReference"] = None
    delete_days_after_last_modification: typing.Optional[int] = None
    description: typing.Optional["LocalizedString"] = None
    key: typing.Optional[str] = None
    line_items: typing.Optional[typing.List["ShoppingListLineItemDraft"]] = None
    name: typing.Optional["LocalizedString"] = None
    slug: typing.Optional["LocalizedString"] = None
    text_line_items: typing.Optional[typing.List["TextLineItemDraft"]] = None
    anonymous_id: typing.Optional[str] = None

    def __init__(
        self,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        customer: typing.Optional["CustomerReference"] = None,
        delete_days_after_last_modification: typing.Optional[int] = None,
        description: typing.Optional["LocalizedString"] = None,
        key: typing.Optional[str] = None,
        line_items: typing.Optional[typing.List["ShoppingListLineItemDraft"]] = None,
        name: typing.Optional["LocalizedString"] = None,
        slug: typing.Optional["LocalizedString"] = None,
        text_line_items: typing.Optional[typing.List["TextLineItemDraft"]] = None,
        anonymous_id: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            custom,
            customer,
            delete_days_after_last_modification,
            description,
            key,
            line_items,
            name,
            slug,
            text_line_items,
            anonymous_id,
        )


@attr.s(auto_attribs=True)
class ShoppingListLineItem:
    added_at: typing.Optional[datetime.datetime] = None
    custom: typing.Optional["CustomFields"] = None
    deactivated_at: typing.Optional[datetime.datetime] = None
    id: typing.Optional[str] = None
    name: typing.Optional["LocalizedString"] = None
    product_id: typing.Optional[str] = None
    product_slug: typing.Optional["LocalizedString"] = None
    product_type: typing.Optional["ProductTypeReference"] = None
    quantity: typing.Optional[int] = None
    variant: typing.Optional["ProductVariant"] = None
    variant_id: typing.Optional[int] = None

    def __init__(
        self,
        added_at: typing.Optional[datetime.datetime] = None,
        custom: typing.Optional["CustomFields"] = None,
        deactivated_at: typing.Optional[datetime.datetime] = None,
        id: typing.Optional[str] = None,
        name: typing.Optional["LocalizedString"] = None,
        product_id: typing.Optional[str] = None,
        product_slug: typing.Optional["LocalizedString"] = None,
        product_type: typing.Optional["ProductTypeReference"] = None,
        quantity: typing.Optional[int] = None,
        variant: typing.Optional["ProductVariant"] = None,
        variant_id: typing.Optional[int] = None,
    ) -> None:
        super().__init__(
            added_at,
            custom,
            deactivated_at,
            id,
            name,
            product_id,
            product_slug,
            product_type,
            quantity,
            variant,
            variant_id,
        )


@attr.s(auto_attribs=True)
class ShoppingListLineItemDraft:
    added_at: typing.Optional[datetime.datetime] = None
    custom: typing.Optional["CustomFieldsDraft"] = None
    sku: typing.Optional[str] = None
    product_id: typing.Optional[str] = None
    quantity: typing.Optional[int] = None
    variant_id: typing.Optional[int] = None

    def __init__(
        self,
        added_at: typing.Optional[datetime.datetime] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        sku: typing.Optional[str] = None,
        product_id: typing.Optional[str] = None,
        quantity: typing.Optional[int] = None,
        variant_id: typing.Optional[int] = None,
    ) -> None:
        super().__init__(added_at, custom, sku, product_id, quantity, variant_id)


@attr.s(auto_attribs=True)
class StateDraft:
    key: typing.Optional[str] = None
    type: typing.Optional["StateTypeEnum"] = None
    name: typing.Optional["LocalizedString"] = None
    description: typing.Optional["LocalizedString"] = None
    initial: typing.Optional[bool] = None
    roles: typing.Optional[typing.List["StateRoleEnum"]] = None
    transitions: typing.Optional[typing.List["StateReference"]] = None

    def __init__(
        self,
        key: typing.Optional[str] = None,
        type: typing.Optional["StateTypeEnum"] = None,
        name: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        initial: typing.Optional[bool] = None,
        roles: typing.Optional[typing.List["StateRoleEnum"]] = None,
        transitions: typing.Optional[typing.List["StateReference"]] = None,
    ) -> None:
        super().__init__(key, type, name, description, initial, roles, transitions)


@attr.s(auto_attribs=True)
class SubRate:
    name: typing.Optional[str] = None
    amount: typing.Optional[int] = None

    def __init__(
        self, name: typing.Optional[str] = None, amount: typing.Optional[int] = None
    ) -> None:
        super().__init__(name, amount)


@attr.s(auto_attribs=True)
class SubscriptionDelivery:
    project_key: typing.Optional[str] = None
    notification_type: typing.Optional[str] = None
    resource: typing.Optional["Reference"] = None

    def __init__(
        self,
        project_key: typing.Optional[str] = None,
        notification_type: typing.Optional[str] = None,
        resource: typing.Optional["Reference"] = None,
    ) -> None:
        super().__init__(project_key, notification_type, resource)


@attr.s(auto_attribs=True)
class SubscriptionDraft:
    changes: typing.Optional[typing.List["ChangeSubscription"]] = None
    destination: typing.Optional["Destination"] = None
    key: typing.Optional[str] = None
    messages: typing.Optional[typing.List["MessageSubscription"]] = None

    def __init__(
        self,
        changes: typing.Optional[typing.List["ChangeSubscription"]] = None,
        destination: typing.Optional["Destination"] = None,
        key: typing.Optional[str] = None,
        messages: typing.Optional[typing.List["MessageSubscription"]] = None,
    ) -> None:
        super().__init__(changes, destination, key, messages)


@attr.s(auto_attribs=True)
class SuggestTokenizer:
    type: typing.Optional[str] = None

    def __init__(self, type: typing.Optional[str] = None) -> None:
        super().__init__(type)


@attr.s(auto_attribs=True)
class Suggestion:
    text: typing.Optional[str] = None

    def __init__(self, text: typing.Optional[str] = None) -> None:
        super().__init__(text)


@attr.s(auto_attribs=True)
class SuggestionResult:
    def __init__(self=None) -> None:
        super().__init__(None)


@attr.s(auto_attribs=True)
class SyncInfo:
    channel: typing.Optional["ChannelReference"] = None
    external_id: typing.Optional[str] = None
    synced_at: typing.Optional[datetime.datetime] = None

    def __init__(
        self,
        channel: typing.Optional["ChannelReference"] = None,
        external_id: typing.Optional[str] = None,
        synced_at: typing.Optional[datetime.datetime] = None,
    ) -> None:
        super().__init__(channel, external_id, synced_at)


@attr.s(auto_attribs=True)
class TaxCategoryDraft:
    name: typing.Optional[str] = None
    description: typing.Optional[str] = None
    rates: typing.Optional[typing.List["TaxRateDraft"]] = None
    key: typing.Optional[str] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        rates: typing.Optional[typing.List["TaxRateDraft"]] = None,
        key: typing.Optional[str] = None,
    ) -> None:
        super().__init__(name, description, rates, key)


@attr.s(auto_attribs=True)
class TaxPortion:
    name: typing.Optional[str] = None
    rate: typing.Optional[int] = None
    amount: typing.Optional["Money"] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        rate: typing.Optional[int] = None,
        amount: typing.Optional["Money"] = None,
    ) -> None:
        super().__init__(name, rate, amount)


@attr.s(auto_attribs=True)
class TaxRate:
    id: typing.Optional[str] = None
    name: typing.Optional[str] = None
    amount: typing.Optional[int] = None
    included_in_price: typing.Optional[bool] = None
    country: typing.Optional["CountryCode"] = None
    state: typing.Optional[str] = None
    sub_rates: typing.Optional[typing.List["SubRate"]] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        amount: typing.Optional[int] = None,
        included_in_price: typing.Optional[bool] = None,
        country: typing.Optional["CountryCode"] = None,
        state: typing.Optional[str] = None,
        sub_rates: typing.Optional[typing.List["SubRate"]] = None,
    ) -> None:
        super().__init__(id, name, amount, included_in_price, country, state, sub_rates)


@attr.s(auto_attribs=True)
class TaxRateDraft:
    name: typing.Optional[str] = None
    amount: typing.Optional[int] = None
    included_in_price: typing.Optional[bool] = None
    country: typing.Optional["CountryCode"] = None
    state: typing.Optional[str] = None
    sub_rates: typing.Optional[typing.List["SubRate"]] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        amount: typing.Optional[int] = None,
        included_in_price: typing.Optional[bool] = None,
        country: typing.Optional["CountryCode"] = None,
        state: typing.Optional[str] = None,
        sub_rates: typing.Optional[typing.List["SubRate"]] = None,
    ) -> None:
        super().__init__(name, amount, included_in_price, country, state, sub_rates)


@attr.s(auto_attribs=True)
class TaxedItemPrice:
    total_net: typing.Optional["TypedMoney"] = None
    total_gross: typing.Optional["TypedMoney"] = None

    def __init__(
        self,
        total_net: typing.Optional["TypedMoney"] = None,
        total_gross: typing.Optional["TypedMoney"] = None,
    ) -> None:
        super().__init__(total_net, total_gross)


@attr.s(auto_attribs=True)
class TaxedItemPriceDraft:
    total_net: typing.Optional["Money"] = None
    total_gross: typing.Optional["Money"] = None

    def __init__(
        self,
        total_net: typing.Optional["Money"] = None,
        total_gross: typing.Optional["Money"] = None,
    ) -> None:
        super().__init__(total_net, total_gross)


@attr.s(auto_attribs=True)
class TaxedPrice:
    total_net: typing.Optional["Money"] = None
    total_gross: typing.Optional["Money"] = None
    tax_portions: typing.Optional[typing.List["TaxPortion"]] = None

    def __init__(
        self,
        total_net: typing.Optional["Money"] = None,
        total_gross: typing.Optional["Money"] = None,
        tax_portions: typing.Optional[typing.List["TaxPortion"]] = None,
    ) -> None:
        super().__init__(total_net, total_gross, tax_portions)


@attr.s(auto_attribs=True)
class TextLineItem:
    added_at: typing.Optional[datetime.datetime] = None
    custom: typing.Optional["CustomFields"] = None
    description: typing.Optional["LocalizedString"] = None
    id: typing.Optional[str] = None
    name: typing.Optional["LocalizedString"] = None
    quantity: typing.Optional[int] = None

    def __init__(
        self,
        added_at: typing.Optional[datetime.datetime] = None,
        custom: typing.Optional["CustomFields"] = None,
        description: typing.Optional["LocalizedString"] = None,
        id: typing.Optional[str] = None,
        name: typing.Optional["LocalizedString"] = None,
        quantity: typing.Optional[int] = None,
    ) -> None:
        super().__init__(added_at, custom, description, id, name, quantity)


@attr.s(auto_attribs=True)
class TextLineItemDraft:
    added_at: typing.Optional[datetime.datetime] = None
    custom: typing.Optional["CustomFieldsDraft"] = None
    description: typing.Optional["LocalizedString"] = None
    name: typing.Optional["LocalizedString"] = None
    quantity: typing.Optional[int] = None

    def __init__(
        self,
        added_at: typing.Optional[datetime.datetime] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        description: typing.Optional["LocalizedString"] = None,
        name: typing.Optional["LocalizedString"] = None,
        quantity: typing.Optional[int] = None,
    ) -> None:
        super().__init__(added_at, custom, description, name, quantity)


@attr.s(auto_attribs=True)
class TrackingData:
    tracking_id: typing.Optional[str] = None
    carrier: typing.Optional[str] = None
    provider: typing.Optional[str] = None
    provider_transaction: typing.Optional[str] = None
    is_return: typing.Optional[bool] = None

    def __init__(
        self,
        tracking_id: typing.Optional[str] = None,
        carrier: typing.Optional[str] = None,
        provider: typing.Optional[str] = None,
        provider_transaction: typing.Optional[str] = None,
        is_return: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(
            tracking_id, carrier, provider, provider_transaction, is_return
        )


@attr.s(auto_attribs=True)
class Transaction:
    id: typing.Optional[str] = None
    timestamp: typing.Optional[datetime.datetime] = None
    type: typing.Optional["TransactionType"] = None
    amount: typing.Optional["TypedMoney"] = None
    interaction_id: typing.Optional[str] = None
    state: typing.Optional["TransactionState"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        timestamp: typing.Optional[datetime.datetime] = None,
        type: typing.Optional["TransactionType"] = None,
        amount: typing.Optional["TypedMoney"] = None,
        interaction_id: typing.Optional[str] = None,
        state: typing.Optional["TransactionState"] = None,
    ) -> None:
        super().__init__(id, timestamp, type, amount, interaction_id, state)


@attr.s(auto_attribs=True)
class TransactionDraft:
    timestamp: typing.Optional[datetime.datetime] = None
    type: typing.Optional["TransactionType"] = None
    amount: typing.Optional["Money"] = None
    interaction_id: typing.Optional[str] = None
    state: typing.Optional["TransactionState"] = None

    def __init__(
        self,
        timestamp: typing.Optional[datetime.datetime] = None,
        type: typing.Optional["TransactionType"] = None,
        amount: typing.Optional["Money"] = None,
        interaction_id: typing.Optional[str] = None,
        state: typing.Optional["TransactionState"] = None,
    ) -> None:
        super().__init__(timestamp, type, amount, interaction_id, state)


@attr.s(auto_attribs=True)
class TypeDraft:
    key: typing.Optional[str] = None
    name: typing.Optional["LocalizedString"] = None
    description: typing.Optional["LocalizedString"] = None
    resource_type_ids: typing.Optional[typing.List["ResourceTypeId"]] = None
    field_definitions: typing.Optional[typing.List["FieldDefinition"]] = None

    def __init__(
        self,
        key: typing.Optional[str] = None,
        name: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        resource_type_ids: typing.Optional[typing.List["ResourceTypeId"]] = None,
        field_definitions: typing.Optional[typing.List["FieldDefinition"]] = None,
    ) -> None:
        super().__init__(key, name, description, resource_type_ids, field_definitions)


@attr.s(auto_attribs=True)
class Update:
    version: typing.Optional[int] = None
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class UpdateAction:
    action: typing.Optional[str] = None

    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class VariantValues:
    sku: typing.Optional[str] = None
    prices: typing.Optional[typing.List["Price"]] = None
    attributes: typing.Optional[typing.List["Attribute"]] = None

    def __init__(
        self,
        sku: typing.Optional[str] = None,
        prices: typing.Optional[typing.List["Price"]] = None,
        attributes: typing.Optional[typing.List["Attribute"]] = None,
    ) -> None:
        super().__init__(sku, prices, attributes)


@attr.s(auto_attribs=True)
class ZoneDraft:
    name: typing.Optional[str] = None
    description: typing.Optional[str] = None
    locations: typing.Optional[typing.List["Location"]] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        locations: typing.Optional[typing.List["Location"]] = None,
    ) -> None:
        super().__init__(name, description, locations)


@attr.s(auto_attribs=True)
class ZoneRate:
    zone: typing.Optional["ZoneReference"] = None
    shipping_rates: typing.Optional[typing.List["ShippingRate"]] = None

    def __init__(
        self,
        zone: typing.Optional["ZoneReference"] = None,
        shipping_rates: typing.Optional[typing.List["ShippingRate"]] = None,
    ) -> None:
        super().__init__(zone, shipping_rates)


@attr.s(auto_attribs=True)
class ZoneRateDraft:
    zone: typing.Optional["ZoneReference"] = None
    shipping_rates: typing.Optional[typing.List["ShippingRateDraft"]] = None

    def __init__(
        self,
        zone: typing.Optional["ZoneReference"] = None,
        shipping_rates: typing.Optional[typing.List["ShippingRateDraft"]] = None,
    ) -> None:
        super().__init__(zone, shipping_rates)


@attr.s(auto_attribs=True)
class AccessDeniedError(ErrorObject):
    code: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="access_denied"
    )

    def __init__(self, message: typing.Optional[str] = None) -> None:
        super().__init__(message)


class AnonymousCartSignInMode(enum.Enum):
    MERGE_WITH_EXISTING_CUSTOMER_CART = "MergeWithExistingCustomerCart"
    USE_AS_NEW_ACTIVE_CUSTOMER_CART = "UseAsNewActiveCustomerCart"


@attr.s(auto_attribs=True)
class AttributeBooleanType(AttributeType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="boolean")

    def __init__(self) -> None:
        super().__init__()


class AttributeConstraintEnum(enum.Enum):
    NONE = "None"
    UNIQUE = "Unique"
    COMBINATION_UNIQUE = "CombinationUnique"
    SAME_FOR_ALL = "SameForAll"


@attr.s(auto_attribs=True)
class AttributeDateTimeType(AttributeType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="datetime")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class AttributeDateType(AttributeType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="date")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class AttributeEnumType(AttributeType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="enum")
    values: typing.Optional[typing.List["AttributePlainEnumValue"]] = None

    def __init__(
        self, values: typing.Optional[typing.List["AttributePlainEnumValue"]] = None
    ) -> None:
        super().__init__(values)


@attr.s(auto_attribs=True)
class AttributeLocalizableTextType(AttributeType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="ltext")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class AttributeLocalizedEnumType(AttributeType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="lenum")
    values: typing.Optional[typing.List["AttributeLocalizedEnumValue"]] = None

    def __init__(
        self, values: typing.Optional[typing.List["AttributeLocalizedEnumValue"]] = None
    ) -> None:
        super().__init__(values)


@attr.s(auto_attribs=True)
class AttributeMoneyType(AttributeType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="money")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class AttributeNestedType(AttributeType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="nested")
    type_reference: typing.Optional["ProductTypeReference"] = None

    def __init__(
        self, type_reference: typing.Optional["ProductTypeReference"] = None
    ) -> None:
        super().__init__(type_reference)


@attr.s(auto_attribs=True)
class AttributeNumberType(AttributeType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="number")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class AttributeReferenceType(AttributeType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="reference")
    reference_type_id: typing.Optional["ReferenceTypeId"] = None

    def __init__(
        self, reference_type_id: typing.Optional["ReferenceTypeId"] = None
    ) -> None:
        super().__init__(reference_type_id)


@attr.s(auto_attribs=True)
class AttributeSetType(AttributeType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="set")
    element_type: typing.Optional["AttributeType"] = None

    def __init__(self, element_type: typing.Optional["AttributeType"] = None) -> None:
        super().__init__(element_type)


@attr.s(auto_attribs=True)
class AttributeTextType(AttributeType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="text")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class AttributeTimeType(AttributeType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="time")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class AzureEventGridDestination(Destination):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="EventGrid")
    uri: typing.Optional[str] = None
    access_key: typing.Optional[str] = None

    def __init__(
        self, uri: typing.Optional[str] = None, access_key: typing.Optional[str] = None
    ) -> None:
        super().__init__(uri, access_key)


@attr.s(auto_attribs=True)
class AzureServiceBusDestination(Destination):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="AzureServiceBus"
    )
    connection_string: typing.Optional[str] = None

    def __init__(self, connection_string: typing.Optional[str] = None) -> None:
        super().__init__(connection_string)


@attr.s(auto_attribs=True)
class Cart(Resource):
    customer_id: typing.Optional[str] = None
    customer_email: typing.Optional[str] = None
    anonymous_id: typing.Optional[str] = None
    line_items: typing.Optional[typing.List["LineItem"]] = None
    custom_line_items: typing.Optional[typing.List["CustomLineItem"]] = None
    total_price: typing.Optional["TypedMoney"] = None
    taxed_price: typing.Optional["TaxedPrice"] = None
    cart_state: typing.Optional["CartState"] = None
    shipping_address: typing.Optional["Address"] = None
    billing_address: typing.Optional["Address"] = None
    inventory_mode: typing.Optional["InventoryMode"] = None
    tax_mode: typing.Optional["TaxMode"] = None
    tax_rounding_mode: typing.Optional["RoundingMode"] = None
    tax_calculation_mode: typing.Optional["TaxCalculationMode"] = None
    customer_group: typing.Optional["CustomerGroupReference"] = None
    country: typing.Optional["CountryCode"] = None
    shipping_info: typing.Optional["ShippingInfo"] = None
    discount_codes: typing.Optional[typing.List["DiscountCodeInfo"]] = None
    custom: typing.Optional["CustomFields"] = None
    payment_info: typing.Optional["PaymentInfo"] = None
    locale: typing.Optional[str] = None
    delete_days_after_last_modification: typing.Optional[int] = None
    refused_gifts: typing.Optional[typing.List["CartDiscountReference"]] = None
    origin: typing.Optional["CartOrigin"] = None
    shipping_rate_input: typing.Optional["ShippingRateInput"] = None
    item_shipping_addresses: typing.Optional[typing.List["Address"]] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        customer_id: typing.Optional[str] = None,
        customer_email: typing.Optional[str] = None,
        anonymous_id: typing.Optional[str] = None,
        line_items: typing.Optional[typing.List["LineItem"]] = None,
        custom_line_items: typing.Optional[typing.List["CustomLineItem"]] = None,
        total_price: typing.Optional["TypedMoney"] = None,
        taxed_price: typing.Optional["TaxedPrice"] = None,
        cart_state: typing.Optional["CartState"] = None,
        shipping_address: typing.Optional["Address"] = None,
        billing_address: typing.Optional["Address"] = None,
        inventory_mode: typing.Optional["InventoryMode"] = None,
        tax_mode: typing.Optional["TaxMode"] = None,
        tax_rounding_mode: typing.Optional["RoundingMode"] = None,
        tax_calculation_mode: typing.Optional["TaxCalculationMode"] = None,
        customer_group: typing.Optional["CustomerGroupReference"] = None,
        country: typing.Optional["CountryCode"] = None,
        shipping_info: typing.Optional["ShippingInfo"] = None,
        discount_codes: typing.Optional[typing.List["DiscountCodeInfo"]] = None,
        custom: typing.Optional["CustomFields"] = None,
        payment_info: typing.Optional["PaymentInfo"] = None,
        locale: typing.Optional[str] = None,
        delete_days_after_last_modification: typing.Optional[int] = None,
        refused_gifts: typing.Optional[typing.List["CartDiscountReference"]] = None,
        origin: typing.Optional["CartOrigin"] = None,
        shipping_rate_input: typing.Optional["ShippingRateInput"] = None,
        item_shipping_addresses: typing.Optional[typing.List["Address"]] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            customer_id,
            customer_email,
            anonymous_id,
            line_items,
            custom_line_items,
            total_price,
            taxed_price,
            cart_state,
            shipping_address,
            billing_address,
            inventory_mode,
            tax_mode,
            tax_rounding_mode,
            tax_calculation_mode,
            customer_group,
            country,
            shipping_info,
            discount_codes,
            custom,
            payment_info,
            locale,
            delete_days_after_last_modification,
            refused_gifts,
            origin,
            shipping_rate_input,
            item_shipping_addresses,
        )


@attr.s(auto_attribs=True)
class CartClassificationTier(ShippingRatePriceTier):
    type: typing.Optional["ShippingRateTierType"] = attr.ib(
        repr=False, init=False, default="CartClassification"
    )
    value: typing.Optional[str] = None
    price: typing.Optional["Money"] = None
    is_matching: typing.Optional[bool] = None

    def __init__(
        self,
        value: typing.Optional[str] = None,
        price: typing.Optional["Money"] = None,
        is_matching: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(value, price, is_matching)


@attr.s(auto_attribs=True)
class CartClassificationType(ShippingRateInputType):
    type: typing.Optional["ShippingRateTierType"] = attr.ib(
        repr=False, init=False, default="CartClassification"
    )
    values: typing.Optional[list] = None

    def __init__(self, values: typing.Optional[list] = None) -> None:
        super().__init__(values)


@attr.s(auto_attribs=True)
class CartDiscount(Resource):
    name: typing.Optional["LocalizedString"] = None
    description: typing.Optional["LocalizedString"] = None
    value: typing.Optional["CartDiscountValue"] = None
    cart_predicate: typing.Optional[str] = None
    target: typing.Optional["CartDiscountTarget"] = None
    sort_order: typing.Optional[str] = None
    is_active: typing.Optional[bool] = None
    valid_from: typing.Optional[datetime.datetime] = None
    valid_until: typing.Optional[datetime.datetime] = None
    requires_discount_code: typing.Optional[bool] = None
    references: typing.Optional[typing.List["Reference"]] = None
    stacking_mode: typing.Optional["StackingMode"] = None
    custom: typing.Optional["CustomFields"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        name: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        value: typing.Optional["CartDiscountValue"] = None,
        cart_predicate: typing.Optional[str] = None,
        target: typing.Optional["CartDiscountTarget"] = None,
        sort_order: typing.Optional[str] = None,
        is_active: typing.Optional[bool] = None,
        valid_from: typing.Optional[datetime.datetime] = None,
        valid_until: typing.Optional[datetime.datetime] = None,
        requires_discount_code: typing.Optional[bool] = None,
        references: typing.Optional[typing.List["Reference"]] = None,
        stacking_mode: typing.Optional["StackingMode"] = None,
        custom: typing.Optional["CustomFields"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            name,
            description,
            value,
            cart_predicate,
            target,
            sort_order,
            is_active,
            valid_from,
            valid_until,
            requires_discount_code,
            references,
            stacking_mode,
            custom,
        )


@attr.s(auto_attribs=True)
class CartDiscountCustomLineItemsTarget(CartDiscountTarget):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="customLineItems"
    )
    predicate: typing.Optional[str] = None

    def __init__(self, predicate: typing.Optional[str] = None) -> None:
        super().__init__(predicate)


@attr.s(auto_attribs=True)
class CartDiscountLineItemsTarget(CartDiscountTarget):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="lineItems")
    predicate: typing.Optional[str] = None

    def __init__(self, predicate: typing.Optional[str] = None) -> None:
        super().__init__(predicate)


@attr.s(auto_attribs=True)
class CartDiscountPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["CartDiscount"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["CartDiscount"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class CartDiscountShippingCostTarget(CartDiscountTarget):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="shipping")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class CartDiscountUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class CartDiscountUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class CartDiscountValueAbsolute(CartDiscountValue):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="absolute")
    money: typing.Optional[typing.List["Money"]] = None

    def __init__(self, money: typing.Optional[typing.List["Money"]] = None) -> None:
        super().__init__(money)


@attr.s(auto_attribs=True)
class CartDiscountValueGiftLineItem(CartDiscountValue):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="giftLineItem")
    product: typing.Optional["ProductReference"] = None
    variant_id: typing.Optional[int] = None
    supply_channel: typing.Optional["ChannelReference"] = None
    distribution_channel: typing.Optional["ChannelReference"] = None

    def __init__(
        self,
        product: typing.Optional["ProductReference"] = None,
        variant_id: typing.Optional[int] = None,
        supply_channel: typing.Optional["ChannelReference"] = None,
        distribution_channel: typing.Optional["ChannelReference"] = None,
    ) -> None:
        super().__init__(product, variant_id, supply_channel, distribution_channel)


@attr.s(auto_attribs=True)
class CartDiscountValueRelative(CartDiscountValue):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="relative")
    permyriad: typing.Optional[int] = None

    def __init__(self, permyriad: typing.Optional[int] = None) -> None:
        super().__init__(permyriad)


class CartOrigin(enum.Enum):
    CUSTOMER = "Customer"
    MERCHANT = "Merchant"


@attr.s(auto_attribs=True)
class CartPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["Cart"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["Cart"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class CartScoreTier(ShippingRatePriceTier):
    type: typing.Optional["ShippingRateTierType"] = attr.ib(
        repr=False, init=False, default="CartScore"
    )
    score: typing.Optional[int] = None
    price: typing.Optional["Money"] = None
    price_function: typing.Optional["PriceFunction"] = None
    is_matching: typing.Optional[bool] = None

    def __init__(
        self,
        score: typing.Optional[int] = None,
        price: typing.Optional["Money"] = None,
        price_function: typing.Optional["PriceFunction"] = None,
        is_matching: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(score, price, price_function, is_matching)


@attr.s(auto_attribs=True)
class CartScoreType(ShippingRateInputType):
    type: typing.Optional["ShippingRateTierType"] = attr.ib(
        repr=False, init=False, default="CartScore"
    )

    def __init__(self) -> None:
        super().__init__()


class CartState(enum.Enum):
    ACTIVE = "Active"
    MERGED = "Merged"
    ORDERED = "Ordered"


@attr.s(auto_attribs=True)
class CartUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class CartUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class CartValueTier(ShippingRatePriceTier):
    type: typing.Optional["ShippingRateTierType"] = attr.ib(
        repr=False, init=False, default="CartValue"
    )
    minimum_cent_amount: typing.Optional[int] = None
    price: typing.Optional["Money"] = None
    is_matching: typing.Optional[bool] = None

    def __init__(
        self,
        minimum_cent_amount: typing.Optional[int] = None,
        price: typing.Optional["Money"] = None,
        is_matching: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(minimum_cent_amount, price, is_matching)


@attr.s(auto_attribs=True)
class CartValueType(ShippingRateInputType):
    type: typing.Optional["ShippingRateTierType"] = attr.ib(
        repr=False, init=False, default="CartValue"
    )

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class Category(Resource):
    name: typing.Optional["LocalizedString"] = None
    slug: typing.Optional["LocalizedString"] = None
    description: typing.Optional["LocalizedString"] = None
    ancestors: typing.Optional[typing.List["CategoryReference"]] = None
    parent: typing.Optional["CategoryReference"] = None
    order_hint: typing.Optional[str] = None
    external_id: typing.Optional[str] = None
    meta_title: typing.Optional["LocalizedString"] = None
    meta_description: typing.Optional["LocalizedString"] = None
    meta_keywords: typing.Optional["LocalizedString"] = None
    custom: typing.Optional["CustomFields"] = None
    assets: typing.Optional[typing.List["Asset"]] = None
    key: typing.Optional[str] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        name: typing.Optional["LocalizedString"] = None,
        slug: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        ancestors: typing.Optional[typing.List["CategoryReference"]] = None,
        parent: typing.Optional["CategoryReference"] = None,
        order_hint: typing.Optional[str] = None,
        external_id: typing.Optional[str] = None,
        meta_title: typing.Optional["LocalizedString"] = None,
        meta_description: typing.Optional["LocalizedString"] = None,
        meta_keywords: typing.Optional["LocalizedString"] = None,
        custom: typing.Optional["CustomFields"] = None,
        assets: typing.Optional[typing.List["Asset"]] = None,
        key: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            name,
            slug,
            description,
            ancestors,
            parent,
            order_hint,
            external_id,
            meta_title,
            meta_description,
            meta_keywords,
            custom,
            assets,
            key,
        )


@attr.s(auto_attribs=True)
class CategoryCreatedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="CategoryCreated"
    )
    category: typing.Optional["Category"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        category: typing.Optional["Category"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            category,
        )


class CategoryOrderHints(dict):
    pass


@attr.s(auto_attribs=True)
class CategoryPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["Category"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["Category"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class CategorySlugChangedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="CategorySlugChanged"
    )
    slug: typing.Optional["LocalizedString"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        slug: typing.Optional["LocalizedString"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            slug,
        )


@attr.s(auto_attribs=True)
class CategoryUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class CategoryUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class Channel(Resource):
    key: typing.Optional[str] = None
    roles: typing.Optional[typing.List["ChannelRoleEnum"]] = None
    name: typing.Optional["LocalizedString"] = None
    description: typing.Optional["LocalizedString"] = None
    address: typing.Optional["Address"] = None
    review_rating_statistics: typing.Optional["ReviewRatingStatistics"] = None
    custom: typing.Optional["CustomFields"] = None
    geo_location: typing.Optional["GeoJsonPoint"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        key: typing.Optional[str] = None,
        roles: typing.Optional[typing.List["ChannelRoleEnum"]] = None,
        name: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        address: typing.Optional["Address"] = None,
        review_rating_statistics: typing.Optional["ReviewRatingStatistics"] = None,
        custom: typing.Optional["CustomFields"] = None,
        geo_location: typing.Optional["GeoJsonPoint"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            key,
            roles,
            name,
            description,
            address,
            review_rating_statistics,
            custom,
            geo_location,
        )


@attr.s(auto_attribs=True)
class ChannelPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["Channel"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["Channel"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


class ChannelRoleEnum(enum.Enum):
    INVENTORY_SUPPLY = "InventorySupply"
    PRODUCT_DISTRIBUTION = "ProductDistribution"
    ORDER_EXPORT = "OrderExport"
    ORDER_IMPORT = "OrderImport"
    PRIMARY = "Primary"


@attr.s(auto_attribs=True)
class ChannelUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class ChannelUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class ClassificationShippingRateInput(ShippingRateInput):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="Classification"
    )
    key: typing.Optional[str] = None
    label: typing.Optional["LocalizedString"] = None

    def __init__(
        self,
        key: typing.Optional[str] = None,
        label: typing.Optional["LocalizedString"] = None,
    ) -> None:
        super().__init__(key, label)


@attr.s(auto_attribs=True)
class ClassificationShippingRateInputDraft(ShippingRateInputDraft):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="Classification"
    )
    key: typing.Optional[str] = None

    def __init__(self, key: typing.Optional[str] = None) -> None:
        super().__init__(key)


@attr.s(auto_attribs=True)
class ConcurrentModificationError(ErrorObject):
    code: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ConcurrentModification"
    )
    current_version: typing.Optional[int] = None

    def __init__(
        self,
        message: typing.Optional[str] = None,
        current_version: typing.Optional[int] = None,
    ) -> None:
        super().__init__(message, current_version)


@attr.s(auto_attribs=True)
class CountryCode(str):
    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class CurrencyCode(str):
    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class CustomFieldBooleanType(FieldType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="Boolean")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class CustomFieldDateTimeType(FieldType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="DateTime")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class CustomFieldDateType(FieldType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="Date")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class CustomFieldEnumType(FieldType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="Enum")
    values: typing.Optional[typing.List["CustomFieldEnumValue"]] = None

    def __init__(
        self, values: typing.Optional[typing.List["CustomFieldEnumValue"]] = None
    ) -> None:
        super().__init__(values)


@attr.s(auto_attribs=True)
class CustomFieldLocalizedEnumType(FieldType):
    name: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="LocalizedEnum"
    )
    values: typing.Optional[typing.List["CustomFieldLocalizedEnumValue"]] = None

    def __init__(
        self,
        values: typing.Optional[typing.List["CustomFieldLocalizedEnumValue"]] = None,
    ) -> None:
        super().__init__(values)


@attr.s(auto_attribs=True)
class CustomFieldLocalizedStringType(FieldType):
    name: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="LocalizedString"
    )

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class CustomFieldMoneyType(FieldType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="Money")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class CustomFieldNumberType(FieldType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="Number")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class CustomFieldReferenceType(FieldType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="Reference")
    reference_type_id: typing.Optional["ReferenceTypeId"] = None

    def __init__(
        self, reference_type_id: typing.Optional["ReferenceTypeId"] = None
    ) -> None:
        super().__init__(reference_type_id)


@attr.s(auto_attribs=True)
class CustomFieldSetType(FieldType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="Set")
    element_type: typing.Optional["FieldType"] = None

    def __init__(self, element_type: typing.Optional["FieldType"] = None) -> None:
        super().__init__(element_type)


@attr.s(auto_attribs=True)
class CustomFieldStringType(FieldType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="String")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class CustomFieldTimeType(FieldType):
    name: typing.Optional[str] = attr.ib(repr=False, init=False, default="Time")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class CustomLineItemStateTransitionMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="CustomLineItemStateTransition"
    )
    custom_line_item_id: typing.Optional[str] = None
    transition_date: typing.Optional[datetime.datetime] = None
    quantity: typing.Optional[int] = None
    from_state: typing.Optional["StateReference"] = None
    to_state: typing.Optional["StateReference"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        custom_line_item_id: typing.Optional[str] = None,
        transition_date: typing.Optional[datetime.datetime] = None,
        quantity: typing.Optional[int] = None,
        from_state: typing.Optional["StateReference"] = None,
        to_state: typing.Optional["StateReference"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            custom_line_item_id,
            transition_date,
            quantity,
            from_state,
            to_state,
        )


@attr.s(auto_attribs=True)
class CustomObject(Resource):
    container: typing.Optional[str] = None
    key: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        container: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(
            id, version, created_at, last_modified_at, container, key, value
        )


@attr.s(auto_attribs=True)
class CustomObjectPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["CustomObject"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["CustomObject"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class CustomTokenizer(SuggestTokenizer):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="custom")
    inputs: typing.Optional[typing.List[str]] = None

    def __init__(self, inputs: typing.Optional[typing.List[str]] = None) -> None:
        super().__init__(inputs)


@attr.s(auto_attribs=True)
class Customer(Resource):
    customer_number: typing.Optional[str] = None
    email: typing.Optional[str] = None
    password: typing.Optional[str] = None
    first_name: typing.Optional[str] = None
    last_name: typing.Optional[str] = None
    middle_name: typing.Optional[str] = None
    title: typing.Optional[str] = None
    date_of_birth: typing.Optional[datetime.date] = None
    company_name: typing.Optional[str] = None
    vat_id: typing.Optional[str] = None
    addresses: typing.Optional[typing.List["Address"]] = None
    default_shipping_address_id: typing.Optional[str] = None
    shipping_address_ids: typing.Optional[typing.List[str]] = None
    default_billing_address_id: typing.Optional[str] = None
    billing_address_ids: typing.Optional[typing.List[str]] = None
    is_email_verified: typing.Optional[bool] = None
    external_id: typing.Optional[str] = None
    customer_group: typing.Optional["CustomerGroupReference"] = None
    custom: typing.Optional["CustomFields"] = None
    locale: typing.Optional[str] = None
    salutation: typing.Optional[str] = None
    key: typing.Optional[str] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        customer_number: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        password: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        middle_name: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        date_of_birth: typing.Optional[datetime.date] = None,
        company_name: typing.Optional[str] = None,
        vat_id: typing.Optional[str] = None,
        addresses: typing.Optional[typing.List["Address"]] = None,
        default_shipping_address_id: typing.Optional[str] = None,
        shipping_address_ids: typing.Optional[typing.List[str]] = None,
        default_billing_address_id: typing.Optional[str] = None,
        billing_address_ids: typing.Optional[typing.List[str]] = None,
        is_email_verified: typing.Optional[bool] = None,
        external_id: typing.Optional[str] = None,
        customer_group: typing.Optional["CustomerGroupReference"] = None,
        custom: typing.Optional["CustomFields"] = None,
        locale: typing.Optional[str] = None,
        salutation: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            customer_number,
            email,
            password,
            first_name,
            last_name,
            middle_name,
            title,
            date_of_birth,
            company_name,
            vat_id,
            addresses,
            default_shipping_address_id,
            shipping_address_ids,
            default_billing_address_id,
            billing_address_ids,
            is_email_verified,
            external_id,
            customer_group,
            custom,
            locale,
            salutation,
            key,
        )


@attr.s(auto_attribs=True)
class CustomerAddressAddedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="CustomerAddressAdded"
    )
    address: typing.Optional["Address"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        address: typing.Optional["Address"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            address,
        )


@attr.s(auto_attribs=True)
class CustomerAddressChangedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="CustomerAddressChanged"
    )
    address: typing.Optional["Address"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        address: typing.Optional["Address"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            address,
        )


@attr.s(auto_attribs=True)
class CustomerAddressRemovedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="CustomerAddressRemoved"
    )
    address: typing.Optional["Address"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        address: typing.Optional["Address"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            address,
        )


@attr.s(auto_attribs=True)
class CustomerCompanyNameSetMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="CustomerCompanyNameSet"
    )
    company_name: typing.Optional[str] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        company_name: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            company_name,
        )


@attr.s(auto_attribs=True)
class CustomerCreatedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="CustomerCreated"
    )
    customer: typing.Optional["Customer"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        customer: typing.Optional["Customer"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            customer,
        )


@attr.s(auto_attribs=True)
class CustomerDateOfBirthSetMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="CustomerDateOfBirthSet"
    )
    date_of_birth: typing.Optional[datetime.date] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        date_of_birth: typing.Optional[datetime.date] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            date_of_birth,
        )


@attr.s(auto_attribs=True)
class CustomerEmailChangedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="CustomerEmailChanged"
    )
    email: typing.Optional[str] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        email: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            email,
        )


@attr.s(auto_attribs=True)
class CustomerEmailVerifiedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="CustomerEmailVerified"
    )

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
        )


@attr.s(auto_attribs=True)
class CustomerGroup(Resource):
    key: typing.Optional[str] = None
    name: typing.Optional[str] = None
    custom: typing.Optional["CustomFields"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        key: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        custom: typing.Optional["CustomFields"] = None,
    ) -> None:
        super().__init__(id, version, created_at, last_modified_at, key, name, custom)


@attr.s(auto_attribs=True)
class CustomerGroupPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["CustomerGroup"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["CustomerGroup"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class CustomerGroupSetMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="CustomerGroupSet"
    )
    customer_group: typing.Optional["CustomerGroupReference"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        customer_group: typing.Optional["CustomerGroupReference"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            customer_group,
        )


@attr.s(auto_attribs=True)
class CustomerGroupUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class CustomerGroupUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class CustomerPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["Customer"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["Customer"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class CustomerUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class CustomerUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class DeliveryAddedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="DeliveryAdded"
    )
    delivery: typing.Optional["Delivery"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        delivery: typing.Optional["Delivery"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            delivery,
        )


@attr.s(auto_attribs=True)
class DeliveryAddressSetMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="DeliveryAddressSet"
    )
    delivery_id: typing.Optional[str] = None
    address: typing.Optional["Address"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        delivery_id: typing.Optional[str] = None,
        address: typing.Optional["Address"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            delivery_id,
            address,
        )


@attr.s(auto_attribs=True)
class DeliveryItemsUpdatedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="DeliveryItemsUpdated"
    )
    delivery_id: typing.Optional[str] = None
    items: typing.Optional[typing.List["DeliveryItem"]] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        delivery_id: typing.Optional[str] = None,
        items: typing.Optional[typing.List["DeliveryItem"]] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            delivery_id,
            items,
        )


@attr.s(auto_attribs=True)
class DeliveryRemovedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="DeliveryRemoved"
    )
    delivery: typing.Optional["Delivery"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        delivery: typing.Optional["Delivery"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            delivery,
        )


@attr.s(auto_attribs=True)
class DiscountCode(Resource):
    name: typing.Optional["LocalizedString"] = None
    description: typing.Optional["LocalizedString"] = None
    code: typing.Optional[str] = None
    cart_discounts: typing.Optional[typing.List["CartDiscountReference"]] = None
    cart_predicate: typing.Optional[str] = None
    is_active: typing.Optional[bool] = None
    references: typing.Optional[typing.List["Reference"]] = None
    max_applications: typing.Optional[int] = None
    max_applications_per_customer: typing.Optional[int] = None
    custom: typing.Optional["CustomFields"] = None
    groups: typing.Optional[typing.List[str]] = None
    valid_from: typing.Optional[datetime.datetime] = None
    valid_until: typing.Optional[datetime.datetime] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        name: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        code: typing.Optional[str] = None,
        cart_discounts: typing.Optional[typing.List["CartDiscountReference"]] = None,
        cart_predicate: typing.Optional[str] = None,
        is_active: typing.Optional[bool] = None,
        references: typing.Optional[typing.List["Reference"]] = None,
        max_applications: typing.Optional[int] = None,
        max_applications_per_customer: typing.Optional[int] = None,
        custom: typing.Optional["CustomFields"] = None,
        groups: typing.Optional[typing.List[str]] = None,
        valid_from: typing.Optional[datetime.datetime] = None,
        valid_until: typing.Optional[datetime.datetime] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            name,
            description,
            code,
            cart_discounts,
            cart_predicate,
            is_active,
            references,
            max_applications,
            max_applications_per_customer,
            custom,
            groups,
            valid_from,
            valid_until,
        )


@attr.s(auto_attribs=True)
class DiscountCodeNonApplicableError(ErrorObject):
    code: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="DiscountCodeNonApplicable"
    )

    def __init__(self, message: typing.Optional[str] = None) -> None:
        super().__init__(message)


@attr.s(auto_attribs=True)
class DiscountCodePagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["DiscountCode"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["DiscountCode"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


class DiscountCodeState(enum.Enum):
    NOT_ACTIVE = "NotActive"
    DOES_NOT_MATCH_CART = "DoesNotMatchCart"
    MATCHES_CART = "MatchesCart"
    MAX_APPLICATION_REACHED = "MaxApplicationReached"


@attr.s(auto_attribs=True)
class DiscountCodeUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class DiscountCodeUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class DuplicateAttributeValueError(ErrorObject):
    code: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="DuplicateAttributeValue"
    )
    attribute: typing.Optional["Attribute"] = None

    def __init__(
        self,
        message: typing.Optional[str] = None,
        attribute: typing.Optional["Attribute"] = None,
    ) -> None:
        super().__init__(message, attribute)


@attr.s(auto_attribs=True)
class DuplicateAttributeValuesError(ErrorObject):
    code: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="DuplicateAttributeValues"
    )
    attributes: typing.Optional[typing.List["Attribute"]] = None

    def __init__(
        self,
        message: typing.Optional[str] = None,
        attributes: typing.Optional[typing.List["Attribute"]] = None,
    ) -> None:
        super().__init__(message, attributes)


@attr.s(auto_attribs=True)
class DuplicateFieldError(ErrorObject):
    code: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="DuplicateField"
    )
    field: typing.Optional[str] = None
    duplicate_value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        message: typing.Optional[str] = None,
        field: typing.Optional[str] = None,
        duplicate_value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(message, field, duplicate_value)


@attr.s(auto_attribs=True)
class DuplicatePriceScopeError(ErrorObject):
    code: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="DuplicatePriceScope"
    )
    conflicting_prices: typing.Optional[typing.List["Price"]] = None

    def __init__(
        self,
        message: typing.Optional[str] = None,
        conflicting_prices: typing.Optional[typing.List["Price"]] = None,
    ) -> None:
        super().__init__(message, conflicting_prices)


@attr.s(auto_attribs=True)
class DuplicateVariantValuesError(ErrorObject):
    code: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="DuplicateVariantValues"
    )
    variant_values: typing.Optional["VariantValues"] = None

    def __init__(
        self,
        message: typing.Optional[str] = None,
        variant_values: typing.Optional["VariantValues"] = None,
    ) -> None:
        super().__init__(message, variant_values)


@attr.s(auto_attribs=True)
class Extension(Resource):
    key: typing.Optional[str] = None
    destination: typing.Optional["ExtensionDestination"] = None
    triggers: typing.Optional[typing.List["ExtensionTrigger"]] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        key: typing.Optional[str] = None,
        destination: typing.Optional["ExtensionDestination"] = None,
        triggers: typing.Optional[typing.List["ExtensionTrigger"]] = None,
    ) -> None:
        super().__init__(
            id, version, created_at, last_modified_at, key, destination, triggers
        )


@attr.s(auto_attribs=True)
class ExtensionAWSLambdaDestination(ExtensionDestination):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="AWSLambda")
    arn: typing.Optional[str] = None
    access_key: typing.Optional[str] = None
    access_secret: typing.Optional[str] = None

    def __init__(
        self,
        arn: typing.Optional[str] = None,
        access_key: typing.Optional[str] = None,
        access_secret: typing.Optional[str] = None,
    ) -> None:
        super().__init__(arn, access_key, access_secret)


class ExtensionAction(enum.Enum):
    CREATE = "Create"
    UPDATE = "Update"


@attr.s(auto_attribs=True)
class ExtensionAuthorizationHeaderAuthentication(
    ExtensionHttpDestinationAuthentication
):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="AuthorizationHeader"
    )
    header_value: typing.Optional[str] = None

    def __init__(self, header_value: typing.Optional[str] = None) -> None:
        super().__init__(header_value)


@attr.s(auto_attribs=True)
class ExtensionAzureFunctionsAuthentication(ExtensionHttpDestinationAuthentication):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="AzureFunctions"
    )
    key: typing.Optional[str] = None

    def __init__(self, key: typing.Optional[str] = None) -> None:
        super().__init__(key)


@attr.s(auto_attribs=True)
class ExtensionHttpDestination(ExtensionDestination):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="HTTP")
    url: typing.Optional[str] = None
    authentication: typing.Optional["ExtensionHttpDestinationAuthentication"] = None

    def __init__(
        self,
        url: typing.Optional[str] = None,
        authentication: typing.Optional[
            "ExtensionHttpDestinationAuthentication"
        ] = None,
    ) -> None:
        super().__init__(url, authentication)


@attr.s(auto_attribs=True)
class ExtensionPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["Extension"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["Extension"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


class ExtensionResourceTypeId(enum.Enum):
    CART = "cart"
    ORDER = "order"
    PAYMENT = "payment"
    CUSTOMER = "customer"


@attr.s(auto_attribs=True)
class ExtensionUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class ExtensionUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


class FacetTypes(enum.Enum):
    TERMS = "terms"
    RANGE = "range"
    FILTER = "filter"


class FieldContainer(dict):
    pass


@attr.s(auto_attribs=True)
class FilteredFacetResult(FacetResult):
    type: typing.Optional["FacetTypes"] = attr.ib(
        repr=False, init=False, default="filter"
    )
    count: typing.Optional[int] = None
    product_count: typing.Optional[int] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        product_count: typing.Optional[int] = None,
    ) -> None:
        super().__init__(count, product_count)


@attr.s(auto_attribs=True)
class GeoJsonPoint(GeoJson):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="Point")

    def __init__(self, coordinates: typing.Optional[list] = None) -> None:
        super().__init__(coordinates)


@attr.s(auto_attribs=True)
class GoogleCloudPubSubDestination(Destination):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="GoogleCloudPubSub"
    )
    project_id: typing.Optional[str] = None
    topic: typing.Optional[str] = None

    def __init__(
        self,
        project_id: typing.Optional[str] = None,
        topic: typing.Optional[str] = None,
    ) -> None:
        super().__init__(project_id, topic)


@attr.s(auto_attribs=True)
class InsufficientScopeError(ErrorObject):
    code: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="insufficient_scope"
    )

    def __init__(self, message: typing.Optional[str] = None) -> None:
        super().__init__(message)


@attr.s(auto_attribs=True)
class InvalidCredentialsError(ErrorObject):
    code: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="InvalidCredentials"
    )

    def __init__(self, message: typing.Optional[str] = None) -> None:
        super().__init__(message)


@attr.s(auto_attribs=True)
class InvalidCurrentPasswordError(ErrorObject):
    code: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="InvalidCurrentPassword"
    )

    def __init__(self, message: typing.Optional[str] = None) -> None:
        super().__init__(message)


@attr.s(auto_attribs=True)
class InvalidFieldError(ErrorObject):
    code: typing.Optional[str] = attr.ib(repr=False, init=False, default="InvalidField")
    field: typing.Optional[str] = None
    invalid_value: typing.Optional[typing.Any] = None
    allowed_values: typing.Optional[list] = None

    def __init__(
        self,
        message: typing.Optional[str] = None,
        field: typing.Optional[str] = None,
        invalid_value: typing.Optional[typing.Any] = None,
        allowed_values: typing.Optional[list] = None,
    ) -> None:
        super().__init__(message, field, invalid_value, allowed_values)


@attr.s(auto_attribs=True)
class InvalidItemShippingDetailsError(ErrorObject):
    code: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="InvalidItemShippingDetails"
    )
    subject: typing.Optional[str] = None
    item_id: typing.Optional[str] = None

    def __init__(
        self,
        message: typing.Optional[str] = None,
        subject: typing.Optional[str] = None,
        item_id: typing.Optional[str] = None,
    ) -> None:
        super().__init__(message, subject, item_id)


@attr.s(auto_attribs=True)
class InvalidOperationError(ErrorObject):
    code: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="InvalidOperation"
    )

    def __init__(self, message: typing.Optional[str] = None) -> None:
        super().__init__(message)


@attr.s(auto_attribs=True)
class InvalidSubjectError(ErrorObject):
    code: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="InvalidSubject"
    )

    def __init__(self, message: typing.Optional[str] = None) -> None:
        super().__init__(message)


@attr.s(auto_attribs=True)
class InvalidTokenError(ErrorObject):
    code: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="invalid_token"
    )

    def __init__(self, message: typing.Optional[str] = None) -> None:
        super().__init__(message)


@attr.s(auto_attribs=True)
class InventoryEntry(Resource):
    sku: typing.Optional[str] = None
    supply_channel: typing.Optional["ChannelReference"] = None
    quantity_on_stock: typing.Optional[int] = None
    available_quantity: typing.Optional[int] = None
    restockable_in_days: typing.Optional[int] = None
    expected_delivery: typing.Optional[datetime.datetime] = None
    custom: typing.Optional["CustomFields"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sku: typing.Optional[str] = None,
        supply_channel: typing.Optional["ChannelReference"] = None,
        quantity_on_stock: typing.Optional[int] = None,
        available_quantity: typing.Optional[int] = None,
        restockable_in_days: typing.Optional[int] = None,
        expected_delivery: typing.Optional[datetime.datetime] = None,
        custom: typing.Optional["CustomFields"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sku,
            supply_channel,
            quantity_on_stock,
            available_quantity,
            restockable_in_days,
            expected_delivery,
            custom,
        )


@attr.s(auto_attribs=True)
class InventoryEntryDeletedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="InventoryEntryDeleted"
    )
    sku: typing.Optional[str] = None
    supply_channel: typing.Optional["ChannelReference"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        sku: typing.Optional[str] = None,
        supply_channel: typing.Optional["ChannelReference"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            sku,
            supply_channel,
        )


class InventoryMode(enum.Enum):
    TRACK_ONLY = "TrackOnly"
    RESERVE_ON_ORDER = "ReserveOnOrder"
    NONE = "None"


@attr.s(auto_attribs=True)
class InventoryPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["InventoryEntry"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["InventoryEntry"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class InventoryUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class InventoryUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class IronMqDestination(Destination):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="IronMQ")
    uri: typing.Optional[str] = None

    def __init__(self, uri: typing.Optional[str] = None) -> None:
        super().__init__(uri)


class LineItemMode(enum.Enum):
    STANDARD = "Standard"
    GIFT_LINE_ITEM = "GiftLineItem"


class LineItemPriceMode(enum.Enum):
    PLATFORM = "Platform"
    EXTERNAL_TOTAL = "ExternalTotal"
    EXTERNAL_PRICE = "ExternalPrice"


@attr.s(auto_attribs=True)
class LineItemStateTransitionMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="LineItemStateTransition"
    )
    line_item_id: typing.Optional[str] = None
    transition_date: typing.Optional[datetime.datetime] = None
    quantity: typing.Optional[int] = None
    from_state: typing.Optional["StateReference"] = None
    to_state: typing.Optional["StateReference"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        line_item_id: typing.Optional[str] = None,
        transition_date: typing.Optional[datetime.datetime] = None,
        quantity: typing.Optional[int] = None,
        from_state: typing.Optional["StateReference"] = None,
        to_state: typing.Optional["StateReference"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            line_item_id,
            transition_date,
            quantity,
            from_state,
            to_state,
        )


@attr.s(auto_attribs=True)
class Locale(str):
    def __init__(self) -> None:
        super().__init__()


class LocalizedString(dict):
    pass


@attr.s(auto_attribs=True)
class MessageDelivery(SubscriptionDelivery):
    notification_type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="Message"
    )
    id: typing.Optional[str] = None
    version: typing.Optional[int] = None
    created_at: typing.Optional[datetime.datetime] = None
    last_modified_at: typing.Optional[datetime.datetime] = None
    sequence_number: typing.Optional[int] = None
    resource_version: typing.Optional[int] = None
    payload_not_included: typing.Optional["PayloadNotIncluded"] = None

    def __init__(
        self,
        project_key: typing.Optional[str] = None,
        resource: typing.Optional["Reference"] = None,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource_version: typing.Optional[int] = None,
        payload_not_included: typing.Optional["PayloadNotIncluded"] = None,
    ) -> None:
        super().__init__(
            project_key,
            resource,
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource_version,
            payload_not_included,
        )


@attr.s(auto_attribs=True)
class MessagePagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["Message"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["Message"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


class MoneyType(enum.Enum):
    CENT_PRECISION = "centPrecision"
    HIGH_PRECISION = "highPrecision"


@attr.s(auto_attribs=True)
class MultiBuyCustomLineItemsTarget(CartDiscountTarget):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="multiBuyCustomLineItems"
    )
    predicate: typing.Optional[str] = None
    trigger_quantity: typing.Optional[int] = None
    discounted_quantity: typing.Optional[int] = None
    max_occurrence: typing.Optional[int] = None
    selection_mode: typing.Optional["SelectionMode"] = None

    def __init__(
        self,
        predicate: typing.Optional[str] = None,
        trigger_quantity: typing.Optional[int] = None,
        discounted_quantity: typing.Optional[int] = None,
        max_occurrence: typing.Optional[int] = None,
        selection_mode: typing.Optional["SelectionMode"] = None,
    ) -> None:
        super().__init__(
            predicate,
            trigger_quantity,
            discounted_quantity,
            max_occurrence,
            selection_mode,
        )


@attr.s(auto_attribs=True)
class MultiBuyLineItemsTarget(CartDiscountTarget):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="multiBuyLineItems"
    )
    predicate: typing.Optional[str] = None
    trigger_quantity: typing.Optional[int] = None
    discounted_quantity: typing.Optional[int] = None
    max_occurrence: typing.Optional[int] = None
    selection_mode: typing.Optional["SelectionMode"] = None

    def __init__(
        self,
        predicate: typing.Optional[str] = None,
        trigger_quantity: typing.Optional[int] = None,
        discounted_quantity: typing.Optional[int] = None,
        max_occurrence: typing.Optional[int] = None,
        selection_mode: typing.Optional["SelectionMode"] = None,
    ) -> None:
        super().__init__(
            predicate,
            trigger_quantity,
            discounted_quantity,
            max_occurrence,
            selection_mode,
        )


@attr.s(auto_attribs=True)
class Order(Resource):
    completed_at: typing.Optional[datetime.datetime] = None
    order_number: typing.Optional[str] = None
    customer_id: typing.Optional[str] = None
    customer_email: typing.Optional[str] = None
    anonymous_id: typing.Optional[str] = None
    line_items: typing.Optional[typing.List["LineItem"]] = None
    custom_line_items: typing.Optional[typing.List["CustomLineItem"]] = None
    total_price: typing.Optional["Money"] = None
    taxed_price: typing.Optional["TaxedPrice"] = None
    shipping_address: typing.Optional["Address"] = None
    billing_address: typing.Optional["Address"] = None
    tax_mode: typing.Optional["TaxMode"] = None
    tax_rounding_mode: typing.Optional["RoundingMode"] = None
    customer_group: typing.Optional["CustomerGroupReference"] = None
    country: typing.Optional[str] = None
    order_state: typing.Optional["OrderState"] = None
    state: typing.Optional["StateReference"] = None
    shipment_state: typing.Optional["ShipmentState"] = None
    payment_state: typing.Optional["PaymentState"] = None
    shipping_info: typing.Optional["ShippingInfo"] = None
    sync_info: typing.Optional[typing.List["SyncInfo"]] = None
    return_info: typing.Optional[typing.List["ReturnInfo"]] = None
    discount_codes: typing.Optional[typing.List["DiscountCodeInfo"]] = None
    last_message_sequence_number: typing.Optional[int] = None
    cart: typing.Optional["CartReference"] = None
    custom: typing.Optional["CustomFields"] = None
    payment_info: typing.Optional["PaymentInfo"] = None
    locale: typing.Optional[str] = None
    inventory_mode: typing.Optional["InventoryMode"] = None
    origin: typing.Optional["CartOrigin"] = None
    tax_calculation_mode: typing.Optional["TaxCalculationMode"] = None
    shipping_rate_input: typing.Optional["ShippingRateInput"] = None
    item_shipping_addresses: typing.Optional[typing.List["Address"]] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        completed_at: typing.Optional[datetime.datetime] = None,
        order_number: typing.Optional[str] = None,
        customer_id: typing.Optional[str] = None,
        customer_email: typing.Optional[str] = None,
        anonymous_id: typing.Optional[str] = None,
        line_items: typing.Optional[typing.List["LineItem"]] = None,
        custom_line_items: typing.Optional[typing.List["CustomLineItem"]] = None,
        total_price: typing.Optional["Money"] = None,
        taxed_price: typing.Optional["TaxedPrice"] = None,
        shipping_address: typing.Optional["Address"] = None,
        billing_address: typing.Optional["Address"] = None,
        tax_mode: typing.Optional["TaxMode"] = None,
        tax_rounding_mode: typing.Optional["RoundingMode"] = None,
        customer_group: typing.Optional["CustomerGroupReference"] = None,
        country: typing.Optional[str] = None,
        order_state: typing.Optional["OrderState"] = None,
        state: typing.Optional["StateReference"] = None,
        shipment_state: typing.Optional["ShipmentState"] = None,
        payment_state: typing.Optional["PaymentState"] = None,
        shipping_info: typing.Optional["ShippingInfo"] = None,
        sync_info: typing.Optional[typing.List["SyncInfo"]] = None,
        return_info: typing.Optional[typing.List["ReturnInfo"]] = None,
        discount_codes: typing.Optional[typing.List["DiscountCodeInfo"]] = None,
        last_message_sequence_number: typing.Optional[int] = None,
        cart: typing.Optional["CartReference"] = None,
        custom: typing.Optional["CustomFields"] = None,
        payment_info: typing.Optional["PaymentInfo"] = None,
        locale: typing.Optional[str] = None,
        inventory_mode: typing.Optional["InventoryMode"] = None,
        origin: typing.Optional["CartOrigin"] = None,
        tax_calculation_mode: typing.Optional["TaxCalculationMode"] = None,
        shipping_rate_input: typing.Optional["ShippingRateInput"] = None,
        item_shipping_addresses: typing.Optional[typing.List["Address"]] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            completed_at,
            order_number,
            customer_id,
            customer_email,
            anonymous_id,
            line_items,
            custom_line_items,
            total_price,
            taxed_price,
            shipping_address,
            billing_address,
            tax_mode,
            tax_rounding_mode,
            customer_group,
            country,
            order_state,
            state,
            shipment_state,
            payment_state,
            shipping_info,
            sync_info,
            return_info,
            discount_codes,
            last_message_sequence_number,
            cart,
            custom,
            payment_info,
            locale,
            inventory_mode,
            origin,
            tax_calculation_mode,
            shipping_rate_input,
            item_shipping_addresses,
        )


@attr.s(auto_attribs=True)
class OrderBillingAddressSetMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="OrderBillingAddressSet"
    )
    address: typing.Optional["Address"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        address: typing.Optional["Address"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            address,
        )


@attr.s(auto_attribs=True)
class OrderCreatedMessage(Message):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="OrderCreated")
    order: typing.Optional["Order"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        order: typing.Optional["Order"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            order,
        )


@attr.s(auto_attribs=True)
class OrderCustomerEmailSetMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="OrderCustomerEmailSet"
    )
    email: typing.Optional[str] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        email: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            email,
        )


@attr.s(auto_attribs=True)
class OrderCustomerSetMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="OrderCustomerSet"
    )
    customer: typing.Optional["CustomerReference"] = None
    customer_group: typing.Optional["CustomerGroupReference"] = None
    old_customer: typing.Optional["CustomerReference"] = None
    old_customer_group: typing.Optional["CustomerGroupReference"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        customer: typing.Optional["CustomerReference"] = None,
        customer_group: typing.Optional["CustomerGroupReference"] = None,
        old_customer: typing.Optional["CustomerReference"] = None,
        old_customer_group: typing.Optional["CustomerGroupReference"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            customer,
            customer_group,
            old_customer,
            old_customer_group,
        )


@attr.s(auto_attribs=True)
class OrderDeletedMessage(Message):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="OrderDeleted")
    order: typing.Optional["Order"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        order: typing.Optional["Order"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            order,
        )


@attr.s(auto_attribs=True)
class OrderImportedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="OrderImported"
    )
    order: typing.Optional["Order"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        order: typing.Optional["Order"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            order,
        )


@attr.s(auto_attribs=True)
class OrderPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["Order"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["Order"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class OrderPaymentChangedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="OrderPaymentStateChanged"
    )
    payment_state: typing.Optional[str] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        payment_state: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            payment_state,
        )


@attr.s(auto_attribs=True)
class OrderReturnInfoAddedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ReturnInfoAdded"
    )
    return_info: typing.Optional["ReturnInfo"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        return_info: typing.Optional["ReturnInfo"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            return_info,
        )


@attr.s(auto_attribs=True)
class OrderReturnShipmentStateChangedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="OrderReturnShipmentStateChanged"
    )
    return_item_id: typing.Optional[str] = None
    return_shipment_state: typing.Optional["ReturnShipmentState"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        return_item_id: typing.Optional[str] = None,
        return_shipment_state: typing.Optional["ReturnShipmentState"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            return_item_id,
            return_shipment_state,
        )


@attr.s(auto_attribs=True)
class OrderShipmentStateChangedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="OrderShipmentStateChanged"
    )
    shipment_state: typing.Optional["ShipmentState"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        shipment_state: typing.Optional["ShipmentState"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            shipment_state,
        )


@attr.s(auto_attribs=True)
class OrderShippingAddressSetMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="OrderShippingAddressSet"
    )
    address: typing.Optional["Address"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        address: typing.Optional["Address"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            address,
        )


class OrderState(enum.Enum):
    OPEN = "Open"
    CONFIRMED = "Confirmed"
    COMPLETE = "Complete"
    CANCELLED = "Cancelled"


@attr.s(auto_attribs=True)
class OrderStateChangedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="OrderStateChanged"
    )
    order_state: typing.Optional[str] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        order_state: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            order_state,
        )


@attr.s(auto_attribs=True)
class OrderStateTransitionMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="OrderStateTransition"
    )
    state: typing.Optional["StateReference"] = None
    force: typing.Optional[bool] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        state: typing.Optional["StateReference"] = None,
        force: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            state,
            force,
        )


@attr.s(auto_attribs=True)
class OrderUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class OrderUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class OutOfStockError(ErrorObject):
    code: typing.Optional[str] = attr.ib(repr=False, init=False, default="OutOfStock")
    line_items: typing.Optional[typing.List[str]] = None
    skus: typing.Optional[typing.List[str]] = None

    def __init__(
        self,
        message: typing.Optional[str] = None,
        line_items: typing.Optional[typing.List[str]] = None,
        skus: typing.Optional[typing.List[str]] = None,
    ) -> None:
        super().__init__(message, line_items, skus)


@attr.s(auto_attribs=True)
class ParcelAddedToDeliveryMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ParcelAddedToDelivery"
    )
    delivery: typing.Optional["Delivery"] = None
    parcel: typing.Optional["Parcel"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        delivery: typing.Optional["Delivery"] = None,
        parcel: typing.Optional["Parcel"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            delivery,
            parcel,
        )


@attr.s(auto_attribs=True)
class ParcelItemsUpdatedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ParcelItemsUpdated"
    )
    parcel_id: typing.Optional[str] = None
    delivery_id: typing.Optional[str] = None
    items: typing.Optional[typing.List["DeliveryItem"]] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        parcel_id: typing.Optional[str] = None,
        delivery_id: typing.Optional[str] = None,
        items: typing.Optional[typing.List["DeliveryItem"]] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            parcel_id,
            delivery_id,
            items,
        )


@attr.s(auto_attribs=True)
class ParcelMeasurementsUpdatedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ParcelMeasurementsUpdated"
    )
    delivery_id: typing.Optional[str] = None
    parcel_id: typing.Optional[str] = None
    measurements: typing.Optional["ParcelMeasurements"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        delivery_id: typing.Optional[str] = None,
        parcel_id: typing.Optional[str] = None,
        measurements: typing.Optional["ParcelMeasurements"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            delivery_id,
            parcel_id,
            measurements,
        )


@attr.s(auto_attribs=True)
class ParcelRemovedFromDeliveryMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ParcelRemovedFromDelivery"
    )
    delivery_id: typing.Optional[str] = None
    parcel: typing.Optional["Parcel"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        delivery_id: typing.Optional[str] = None,
        parcel: typing.Optional["Parcel"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            delivery_id,
            parcel,
        )


@attr.s(auto_attribs=True)
class ParcelTrackingDataUpdatedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ParcelTrackingDataUpdated"
    )
    delivery_id: typing.Optional[str] = None
    parcel_id: typing.Optional[str] = None
    tracking_data: typing.Optional["TrackingData"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        delivery_id: typing.Optional[str] = None,
        parcel_id: typing.Optional[str] = None,
        tracking_data: typing.Optional["TrackingData"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            delivery_id,
            parcel_id,
            tracking_data,
        )


@attr.s(auto_attribs=True)
class Payment(Resource):
    customer: typing.Optional["CustomerReference"] = None
    anonymous_id: typing.Optional[str] = None
    external_id: typing.Optional[str] = None
    interface_id: typing.Optional[str] = None
    amount_planned: typing.Optional["TypedMoney"] = None
    amount_authorized: typing.Optional["TypedMoney"] = None
    authorized_until: typing.Optional[str] = None
    amount_paid: typing.Optional["TypedMoney"] = None
    amount_refunded: typing.Optional["TypedMoney"] = None
    payment_method_info: typing.Optional["PaymentMethodInfo"] = None
    payment_status: typing.Optional["PaymentStatus"] = None
    transactions: typing.Optional[typing.List["Transaction"]] = None
    interface_interactions: typing.Optional[typing.List["CustomFields"]] = None
    custom: typing.Optional["CustomFields"] = None
    key: typing.Optional[str] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        customer: typing.Optional["CustomerReference"] = None,
        anonymous_id: typing.Optional[str] = None,
        external_id: typing.Optional[str] = None,
        interface_id: typing.Optional[str] = None,
        amount_planned: typing.Optional["TypedMoney"] = None,
        amount_authorized: typing.Optional["TypedMoney"] = None,
        authorized_until: typing.Optional[str] = None,
        amount_paid: typing.Optional["TypedMoney"] = None,
        amount_refunded: typing.Optional["TypedMoney"] = None,
        payment_method_info: typing.Optional["PaymentMethodInfo"] = None,
        payment_status: typing.Optional["PaymentStatus"] = None,
        transactions: typing.Optional[typing.List["Transaction"]] = None,
        interface_interactions: typing.Optional[typing.List["CustomFields"]] = None,
        custom: typing.Optional["CustomFields"] = None,
        key: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            customer,
            anonymous_id,
            external_id,
            interface_id,
            amount_planned,
            amount_authorized,
            authorized_until,
            amount_paid,
            amount_refunded,
            payment_method_info,
            payment_status,
            transactions,
            interface_interactions,
            custom,
            key,
        )


@attr.s(auto_attribs=True)
class PaymentCreatedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="PaymentCreated"
    )
    payment: typing.Optional["Payment"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        payment: typing.Optional["Payment"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            payment,
        )


@attr.s(auto_attribs=True)
class PaymentInteractionAddedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="PaymentInteractionAdded"
    )
    interaction: typing.Optional["CustomFields"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        interaction: typing.Optional["CustomFields"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            interaction,
        )


@attr.s(auto_attribs=True)
class PaymentPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["Payment"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["Payment"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


class PaymentState(enum.Enum):
    BALANCE_DUE = "BalanceDue"
    FAILED = "Failed"
    PENDING = "Pending"
    CREDIT_OWED = "CreditOwed"
    PAID = "Paid"


@attr.s(auto_attribs=True)
class PaymentStatusInterfaceCodeSetMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="PaymentStatusInterfaceCodeSet"
    )
    payment_id: typing.Optional[str] = None
    interface_code: typing.Optional[str] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        payment_id: typing.Optional[str] = None,
        interface_code: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            payment_id,
            interface_code,
        )


@attr.s(auto_attribs=True)
class PaymentStatusStateTransitionMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="PaymentStatusStateTransition"
    )
    state: typing.Optional["StateReference"] = None
    force: typing.Optional[bool] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        state: typing.Optional["StateReference"] = None,
        force: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            state,
            force,
        )


@attr.s(auto_attribs=True)
class PaymentTransactionAddedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="PaymentTransactionAdded"
    )
    transaction: typing.Optional["Transaction"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        transaction: typing.Optional["Transaction"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            transaction,
        )


@attr.s(auto_attribs=True)
class PaymentTransactionStateChangedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="PaymentTransactionStateChanged"
    )
    transaction_id: typing.Optional[str] = None
    state: typing.Optional["TransactionState"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        transaction_id: typing.Optional[str] = None,
        state: typing.Optional["TransactionState"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            transaction_id,
            state,
        )


@attr.s(auto_attribs=True)
class PaymentUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class PaymentUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class PriceChangedError(ErrorObject):
    code: typing.Optional[str] = attr.ib(repr=False, init=False, default="PriceChanged")
    line_items: typing.Optional[typing.List[str]] = None
    shipping: typing.Optional[bool] = None

    def __init__(
        self,
        message: typing.Optional[str] = None,
        line_items: typing.Optional[typing.List[str]] = None,
        shipping: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(message, line_items, shipping)


@attr.s(auto_attribs=True)
class Product(Resource):
    key: typing.Optional[str] = None
    product_type: typing.Optional["ProductTypeReference"] = None
    master_data: typing.Optional["ProductCatalogData"] = None
    tax_category: typing.Optional["TaxCategoryReference"] = None
    state: typing.Optional["StateReference"] = None
    review_rating_statistics: typing.Optional["ReviewRatingStatistics"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        key: typing.Optional[str] = None,
        product_type: typing.Optional["ProductTypeReference"] = None,
        master_data: typing.Optional["ProductCatalogData"] = None,
        tax_category: typing.Optional["TaxCategoryReference"] = None,
        state: typing.Optional["StateReference"] = None,
        review_rating_statistics: typing.Optional["ReviewRatingStatistics"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            key,
            product_type,
            master_data,
            tax_category,
            state,
            review_rating_statistics,
        )


@attr.s(auto_attribs=True)
class ProductCreatedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ProductCreated"
    )
    product_projection: typing.Optional["ProductProjection"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        product_projection: typing.Optional["ProductProjection"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            product_projection,
        )


@attr.s(auto_attribs=True)
class ProductDeletedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ProductDeleted"
    )
    removed_image_urls: typing.Optional[list] = None
    current_projection: typing.Optional["ProductProjection"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        removed_image_urls: typing.Optional[list] = None,
        current_projection: typing.Optional["ProductProjection"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            removed_image_urls,
            current_projection,
        )


@attr.s(auto_attribs=True)
class ProductDiscount(Resource):
    name: typing.Optional["LocalizedString"] = None
    description: typing.Optional["LocalizedString"] = None
    value: typing.Optional["ProductDiscountValue"] = None
    predicate: typing.Optional[str] = None
    sort_order: typing.Optional[str] = None
    is_active: typing.Optional[bool] = None
    references: typing.Optional[typing.List["Reference"]] = None
    valid_from: typing.Optional[datetime.datetime] = None
    valid_until: typing.Optional[datetime.datetime] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        name: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        value: typing.Optional["ProductDiscountValue"] = None,
        predicate: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        is_active: typing.Optional[bool] = None,
        references: typing.Optional[typing.List["Reference"]] = None,
        valid_from: typing.Optional[datetime.datetime] = None,
        valid_until: typing.Optional[datetime.datetime] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            name,
            description,
            value,
            predicate,
            sort_order,
            is_active,
            references,
            valid_from,
            valid_until,
        )


@attr.s(auto_attribs=True)
class ProductDiscountPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["ProductDiscount"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["ProductDiscount"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class ProductDiscountUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class ProductDiscountUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class ProductDiscountValueAbsolute(ProductDiscountValue):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="absolute")
    money: typing.Optional[typing.List["Money"]] = None

    def __init__(self, money: typing.Optional[typing.List["Money"]] = None) -> None:
        super().__init__(money)


@attr.s(auto_attribs=True)
class ProductDiscountValueExternal(ProductDiscountValue):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="external")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class ProductDiscountValueRelative(ProductDiscountValue):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="relative")
    permyriad: typing.Optional[int] = None

    def __init__(self, permyriad: typing.Optional[int] = None) -> None:
        super().__init__(permyriad)


@attr.s(auto_attribs=True)
class ProductImageAddedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ProductImageAdded"
    )
    variant_id: typing.Optional[int] = None
    image: typing.Optional["Image"] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        variant_id: typing.Optional[int] = None,
        image: typing.Optional["Image"] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            variant_id,
            image,
            staged,
        )


@attr.s(auto_attribs=True)
class ProductPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["Product"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["Product"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class ProductProjection(Resource):
    key: typing.Optional[str] = None
    product_type: typing.Optional["ProductTypeReference"] = None
    name: typing.Optional["LocalizedString"] = None
    description: typing.Optional["LocalizedString"] = None
    slug: typing.Optional["LocalizedString"] = None
    categories: typing.Optional[typing.List["CategoryReference"]] = None
    category_order_hints: typing.Optional["CategoryOrderHints"] = None
    meta_title: typing.Optional["LocalizedString"] = None
    meta_description: typing.Optional["LocalizedString"] = None
    meta_keywords: typing.Optional["LocalizedString"] = None
    search_keywords: typing.Optional["SearchKeywords"] = None
    has_staged_changes: typing.Optional[bool] = None
    published: typing.Optional[bool] = None
    master_variant: typing.Optional["ProductVariant"] = None
    variants: typing.Optional[typing.List["ProductVariant"]] = None
    tax_category: typing.Optional["TaxCategoryReference"] = None
    state: typing.Optional["StateReference"] = None
    review_rating_statistics: typing.Optional["ReviewRatingStatistics"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        key: typing.Optional[str] = None,
        product_type: typing.Optional["ProductTypeReference"] = None,
        name: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        slug: typing.Optional["LocalizedString"] = None,
        categories: typing.Optional[typing.List["CategoryReference"]] = None,
        category_order_hints: typing.Optional["CategoryOrderHints"] = None,
        meta_title: typing.Optional["LocalizedString"] = None,
        meta_description: typing.Optional["LocalizedString"] = None,
        meta_keywords: typing.Optional["LocalizedString"] = None,
        search_keywords: typing.Optional["SearchKeywords"] = None,
        has_staged_changes: typing.Optional[bool] = None,
        published: typing.Optional[bool] = None,
        master_variant: typing.Optional["ProductVariant"] = None,
        variants: typing.Optional[typing.List["ProductVariant"]] = None,
        tax_category: typing.Optional["TaxCategoryReference"] = None,
        state: typing.Optional["StateReference"] = None,
        review_rating_statistics: typing.Optional["ReviewRatingStatistics"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            key,
            product_type,
            name,
            description,
            slug,
            categories,
            category_order_hints,
            meta_title,
            meta_description,
            meta_keywords,
            search_keywords,
            has_staged_changes,
            published,
            master_variant,
            variants,
            tax_category,
            state,
            review_rating_statistics,
        )


@attr.s(auto_attribs=True)
class ProductProjectionPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["ProductProjection"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["ProductProjection"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class ProductProjectionPagedSearchResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["ProductProjection"]] = None
    facets: typing.Optional["FacetResults"] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["ProductProjection"]] = None,
        facets: typing.Optional["FacetResults"] = None,
    ) -> None:
        super().__init__(count, total, offset, results, facets)


class ProductPublishScope(enum.Enum):
    ALL = "All"
    PRICES = "Prices"


@attr.s(auto_attribs=True)
class ProductPublishedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ProductPublished"
    )
    removed_image_urls: typing.Optional[list] = None
    product_projection: typing.Optional["ProductProjection"] = None
    scope: typing.Optional["ProductPublishScope"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        removed_image_urls: typing.Optional[list] = None,
        product_projection: typing.Optional["ProductProjection"] = None,
        scope: typing.Optional["ProductPublishScope"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            removed_image_urls,
            product_projection,
            scope,
        )


@attr.s(auto_attribs=True)
class ProductRevertedStagedChangesMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ProductRevertedStagedChanges"
    )
    removed_image_urls: typing.Optional[list] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        removed_image_urls: typing.Optional[list] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            removed_image_urls,
        )


@attr.s(auto_attribs=True)
class ProductSlugChangedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ProductSlugChanged"
    )
    slug: typing.Optional["LocalizedString"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        slug: typing.Optional["LocalizedString"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            slug,
        )


@attr.s(auto_attribs=True)
class ProductStateTransitionMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ProductStateTransition"
    )
    state: typing.Optional["StateReference"] = None
    force: typing.Optional[bool] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        state: typing.Optional["StateReference"] = None,
        force: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            state,
            force,
        )


@attr.s(auto_attribs=True)
class ProductType(Resource):
    key: typing.Optional[str] = None
    name: typing.Optional[str] = None
    description: typing.Optional[str] = None
    attributes: typing.Optional[typing.List["AttributeDefinition"]] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        key: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        attributes: typing.Optional[typing.List["AttributeDefinition"]] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            key,
            name,
            description,
            attributes,
        )


@attr.s(auto_attribs=True)
class ProductTypePagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["ProductType"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["ProductType"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class ProductTypeUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class ProductTypeUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class ProductUnpublishedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ProductUnpublished"
    )

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
        )


@attr.s(auto_attribs=True)
class ProductUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class ProductUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class ProductVariantDeletedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ProductVariantDeleted"
    )
    removed_image_urls: typing.Optional[list] = None
    variant: typing.Optional["ProductVariant"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        removed_image_urls: typing.Optional[list] = None,
        variant: typing.Optional["ProductVariant"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            removed_image_urls,
            variant,
        )


@attr.s(auto_attribs=True)
class ProjectUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class ProjectUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class RangeFacetResult(FacetResult):
    type: typing.Optional["FacetTypes"] = attr.ib(
        repr=False, init=False, default="range"
    )
    ranges: typing.Optional[typing.List["FacetResultRange"]] = None

    def __init__(
        self, ranges: typing.Optional[typing.List["FacetResultRange"]] = None
    ) -> None:
        super().__init__(ranges)


@attr.s(auto_attribs=True)
class Reference(ResourceIdentifier):
    type_id: typing.Optional["ReferenceTypeId"] = None

    def __init__(
        self,
        type_id: typing.Optional["ReferenceTypeId"] = None,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
    ) -> None:
        super().__init__(type_id, id, key)


class ReferenceTypeId(enum.Enum):
    CART = "cart"
    CART_DISCOUNT = "cart-discount"
    CATEGORY = "category"
    CHANNEL = "channel"
    CUSTOMER = "customer"
    CUSTOMER_GROUP = "customer-group"
    DISCOUNT_CODE = "discount-code"
    KEY_VALUE_DOCUMENT = "key-value-document"
    PAYMENT = "payment"
    PRODUCT = "product"
    PRODUCT_TYPE = "product-type"
    PRODUCT_DISCOUNT = "product-discount"
    ORDER = "order"
    REVIEW = "review"
    SHOPPING_LIST = "shopping-list"
    SHIPPING_METHOD = "shipping-method"
    STATE = "state"
    TAX_CATEGORY = "tax-category"
    TYPE = "type"
    ZONE = "zone"
    INVENTORY_ENTRY = "inventory-entry"


@attr.s(auto_attribs=True)
class RequiredFieldError(ErrorObject):
    code: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="RequiredField"
    )
    field: typing.Optional[str] = None

    def __init__(
        self, message: typing.Optional[str] = None, field: typing.Optional[str] = None
    ) -> None:
        super().__init__(message, field)


@attr.s(auto_attribs=True)
class ResourceCreatedDelivery(SubscriptionDelivery):
    notification_type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ResourceCreated"
    )
    version: typing.Optional[int] = None
    modified_at: typing.Optional[datetime.datetime] = None

    def __init__(
        self,
        project_key: typing.Optional[str] = None,
        resource: typing.Optional["Reference"] = None,
        version: typing.Optional[int] = None,
        modified_at: typing.Optional[datetime.datetime] = None,
    ) -> None:
        super().__init__(project_key, resource, version, modified_at)


@attr.s(auto_attribs=True)
class ResourceDeletedDelivery(SubscriptionDelivery):
    notification_type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ResourceDeleted"
    )
    version: typing.Optional[int] = None
    modified_at: typing.Optional[datetime.datetime] = None

    def __init__(
        self,
        project_key: typing.Optional[str] = None,
        resource: typing.Optional["Reference"] = None,
        version: typing.Optional[int] = None,
        modified_at: typing.Optional[datetime.datetime] = None,
    ) -> None:
        super().__init__(project_key, resource, version, modified_at)


@attr.s(auto_attribs=True)
class ResourceNotFoundError(ErrorObject):
    code: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ResourceNotFound"
    )

    def __init__(self, message: typing.Optional[str] = None) -> None:
        super().__init__(message)


class ResourceTypeId(enum.Enum):
    ASSET = "asset"
    CATEGORY = "category"
    CHANNEL = "channel"
    CUSTOMER = "customer"
    ORDER = "order"
    INVENTORY_ENTRY = "inventory-entry"
    LINE_ITEM = "line-item"
    CUSTOM_LINE_ITEM = "custom-line-item"
    PRODUCT_PRICE = "product-price"
    PAYMENT = "payment"
    PAYMENT_INTERFACE_INTERACTION = "payment-interface-interaction"
    REVIEW = "review"
    SHOPPING_LIST = "shopping-list"
    SHOPPING_LIST_TEXT_LINE_ITEM = "shopping-list-text-line-item"
    DISCOUNT_CODE = "discount-code"
    CART_DISCOUNT = "cart-discount"
    CUSTOMER_GROUP = "customer-group"


@attr.s(auto_attribs=True)
class ResourceUpdatedDelivery(SubscriptionDelivery):
    notification_type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ResourceUpdated"
    )
    version: typing.Optional[int] = None
    old_version: typing.Optional[int] = None
    modified_at: typing.Optional[datetime.datetime] = None

    def __init__(
        self,
        project_key: typing.Optional[str] = None,
        resource: typing.Optional["Reference"] = None,
        version: typing.Optional[int] = None,
        old_version: typing.Optional[int] = None,
        modified_at: typing.Optional[datetime.datetime] = None,
    ) -> None:
        super().__init__(project_key, resource, version, old_version, modified_at)


class ReturnPaymentState(enum.Enum):
    NON_REFUNDABLE = "NonRefundable"
    INITIAL = "Initial"
    REFUNDED = "Refunded"
    NOT_REFUNDED = "NotRefunded"


class ReturnShipmentState(enum.Enum):
    ADVISED = "Advised"
    RETURNED = "Returned"
    BACK_IN_STOCK = "BackInStock"
    UNUSABLE = "Unusable"


@attr.s(auto_attribs=True)
class Review(Resource):
    key: typing.Optional[str] = None
    uniqueness_value: typing.Optional[str] = None
    locale: typing.Optional[str] = None
    author_name: typing.Optional[str] = None
    title: typing.Optional[str] = None
    text: typing.Optional[str] = None
    target: typing.Optional["ProductReference"] = None
    included_in_statistics: typing.Optional[bool] = None
    rating: typing.Optional[int] = None
    state: typing.Optional["StateReference"] = None
    customer: typing.Optional["CustomerReference"] = None
    custom: typing.Optional["CustomFields"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        key: typing.Optional[str] = None,
        uniqueness_value: typing.Optional[str] = None,
        locale: typing.Optional[str] = None,
        author_name: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        text: typing.Optional[str] = None,
        target: typing.Optional["ProductReference"] = None,
        included_in_statistics: typing.Optional[bool] = None,
        rating: typing.Optional[int] = None,
        state: typing.Optional["StateReference"] = None,
        customer: typing.Optional["CustomerReference"] = None,
        custom: typing.Optional["CustomFields"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            key,
            uniqueness_value,
            locale,
            author_name,
            title,
            text,
            target,
            included_in_statistics,
            rating,
            state,
            customer,
            custom,
        )


@attr.s(auto_attribs=True)
class ReviewCreatedMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ReviewCreated"
    )
    review: typing.Optional["Review"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        review: typing.Optional["Review"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            review,
        )


@attr.s(auto_attribs=True)
class ReviewPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["Review"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["Review"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class ReviewRatingSetMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ReviewRatingSet"
    )
    old_rating: typing.Optional[int] = None
    new_rating: typing.Optional[int] = None
    included_in_statistics: typing.Optional[bool] = None
    target: typing.Optional["Reference"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        old_rating: typing.Optional[int] = None,
        new_rating: typing.Optional[int] = None,
        included_in_statistics: typing.Optional[bool] = None,
        target: typing.Optional["Reference"] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            old_rating,
            new_rating,
            included_in_statistics,
            target,
        )


@attr.s(auto_attribs=True)
class ReviewStateTransitionMessage(Message):
    type: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="ReviewStateTransition"
    )
    old_state: typing.Optional["StateReference"] = None
    new_state: typing.Optional["StateReference"] = None
    old_included_in_statistics: typing.Optional[bool] = None
    new_included_in_statistics: typing.Optional[bool] = None
    target: typing.Optional["Reference"] = None
    force: typing.Optional[bool] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        sequence_number: typing.Optional[int] = None,
        resource: typing.Optional["Reference"] = None,
        resource_version: typing.Optional[int] = None,
        old_state: typing.Optional["StateReference"] = None,
        new_state: typing.Optional["StateReference"] = None,
        old_included_in_statistics: typing.Optional[bool] = None,
        new_included_in_statistics: typing.Optional[bool] = None,
        target: typing.Optional["Reference"] = None,
        force: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            sequence_number,
            resource,
            resource_version,
            old_state,
            new_state,
            old_included_in_statistics,
            new_included_in_statistics,
            target,
            force,
        )


@attr.s(auto_attribs=True)
class ReviewUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class ReviewUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


class RoundingMode(enum.Enum):
    HALF_EVEN = "HalfEven"
    HALF_UP = "HalfUp"
    HALF_DOWN = "HalfDown"


@attr.s(auto_attribs=True)
class ScoreShippingRateInput(ShippingRateInput):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="Score")
    score: typing.Optional[int] = None

    def __init__(self, score: typing.Optional[int] = None) -> None:
        super().__init__(score)


@attr.s(auto_attribs=True)
class ScoreShippingRateInputDraft(ShippingRateInputDraft):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="Score")
    score: typing.Optional[int] = None

    def __init__(self, score: typing.Optional[int] = None) -> None:
        super().__init__(score)


class SelectionMode(enum.Enum):
    CHEAPEST = "Cheapest"
    MOST_EXPENSIVE = "MostExpensive"


class ShipmentState(enum.Enum):
    SHIPPED = "Shipped"
    READY = "Ready"
    PENDING = "Pending"
    DELAYED = "Delayed"
    PARTIAL = "Partial"
    BACKORDER = "Backorder"


@attr.s(auto_attribs=True)
class ShippingMethod(Resource):
    key: typing.Optional[str] = None
    name: typing.Optional[str] = None
    description: typing.Optional[str] = None
    tax_category: typing.Optional["TaxCategoryReference"] = None
    zone_rates: typing.Optional[typing.List["ZoneRate"]] = None
    is_default: typing.Optional[bool] = None
    predicate: typing.Optional[str] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        key: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        tax_category: typing.Optional["TaxCategoryReference"] = None,
        zone_rates: typing.Optional[typing.List["ZoneRate"]] = None,
        is_default: typing.Optional[bool] = None,
        predicate: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            key,
            name,
            description,
            tax_category,
            zone_rates,
            is_default,
            predicate,
        )


@attr.s(auto_attribs=True)
class ShippingMethodPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["ShippingMethod"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["ShippingMethod"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


class ShippingMethodState(enum.Enum):
    DOES_NOT_MATCH_CART = "DoesNotMatchCart"
    MATCHES_CART = "MatchesCart"


@attr.s(auto_attribs=True)
class ShippingMethodUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class ShippingMethodUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


class ShippingRateTierType(enum.Enum):
    CART_VALUE = "CartValue"
    CART_CLASSIFICATION = "CartClassification"
    CART_SCORE = "CartScore"


@attr.s(auto_attribs=True)
class ShoppingList(Resource):
    custom: typing.Optional["CustomFields"] = None
    customer: typing.Optional["CustomerReference"] = None
    delete_days_after_last_modification: typing.Optional[int] = None
    description: typing.Optional["LocalizedString"] = None
    key: typing.Optional[str] = None
    line_items: typing.Optional[typing.List["ShoppingListLineItem"]] = None
    name: typing.Optional["LocalizedString"] = None
    slug: typing.Optional["LocalizedString"] = None
    text_line_items: typing.Optional[typing.List["TextLineItem"]] = None
    anonymous_id: typing.Optional[str] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        custom: typing.Optional["CustomFields"] = None,
        customer: typing.Optional["CustomerReference"] = None,
        delete_days_after_last_modification: typing.Optional[int] = None,
        description: typing.Optional["LocalizedString"] = None,
        key: typing.Optional[str] = None,
        line_items: typing.Optional[typing.List["ShoppingListLineItem"]] = None,
        name: typing.Optional["LocalizedString"] = None,
        slug: typing.Optional["LocalizedString"] = None,
        text_line_items: typing.Optional[typing.List["TextLineItem"]] = None,
        anonymous_id: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            custom,
            customer,
            delete_days_after_last_modification,
            description,
            key,
            line_items,
            name,
            slug,
            text_line_items,
            anonymous_id,
        )


@attr.s(auto_attribs=True)
class ShoppingListPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["ShoppingList"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["ShoppingList"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class ShoppingListUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class ShoppingListUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class SnsDestination(Destination):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="SNS")
    access_key: typing.Optional[str] = None
    access_secret: typing.Optional[str] = None
    topic_arn: typing.Optional[str] = None

    def __init__(
        self,
        access_key: typing.Optional[str] = None,
        access_secret: typing.Optional[str] = None,
        topic_arn: typing.Optional[str] = None,
    ) -> None:
        super().__init__(access_key, access_secret, topic_arn)


@attr.s(auto_attribs=True)
class SqsDestination(Destination):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="SQS")
    access_key: typing.Optional[str] = None
    access_secret: typing.Optional[str] = None
    queue_url: typing.Optional[str] = None
    region: typing.Optional[str] = None

    def __init__(
        self,
        access_key: typing.Optional[str] = None,
        access_secret: typing.Optional[str] = None,
        queue_url: typing.Optional[str] = None,
        region: typing.Optional[str] = None,
    ) -> None:
        super().__init__(access_key, access_secret, queue_url, region)


class StackingMode(enum.Enum):
    STACKING = "Stacking"
    STOP_AFTER_THIS_DISCOUNT = "StopAfterThisDiscount"


@attr.s(auto_attribs=True)
class State(Resource):
    key: typing.Optional[str] = None
    type: typing.Optional["StateTypeEnum"] = None
    name: typing.Optional["LocalizedString"] = None
    description: typing.Optional["LocalizedString"] = None
    initial: typing.Optional[bool] = None
    built_in: typing.Optional[bool] = None
    roles: typing.Optional[typing.List["StateRoleEnum"]] = None
    transitions: typing.Optional[typing.List["StateReference"]] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        key: typing.Optional[str] = None,
        type: typing.Optional["StateTypeEnum"] = None,
        name: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        initial: typing.Optional[bool] = None,
        built_in: typing.Optional[bool] = None,
        roles: typing.Optional[typing.List["StateRoleEnum"]] = None,
        transitions: typing.Optional[typing.List["StateReference"]] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            key,
            type,
            name,
            description,
            initial,
            built_in,
            roles,
            transitions,
        )


@attr.s(auto_attribs=True)
class StatePagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["State"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["State"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


class StateRoleEnum(enum.Enum):
    REVIEW_INCLUDED_IN_STATISTICS = "ReviewIncludedInStatistics"


class StateTypeEnum(enum.Enum):
    ORDER_STATE = "OrderState"
    LINE_ITEM_STATE = "LineItemState"
    PRODUCT_STATE = "ProductState"
    REVIEW_STATE = "ReviewState"
    PAYMENT_STATE = "PaymentState"


@attr.s(auto_attribs=True)
class StateUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class StateUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class Subscription(Resource):
    changes: typing.Optional[typing.List["ChangeSubscription"]] = None
    destination: typing.Optional["Destination"] = None
    key: typing.Optional[str] = None
    messages: typing.Optional[typing.List["MessageSubscription"]] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        changes: typing.Optional[typing.List["ChangeSubscription"]] = None,
        destination: typing.Optional["Destination"] = None,
        key: typing.Optional[str] = None,
        messages: typing.Optional[typing.List["MessageSubscription"]] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            changes,
            destination,
            key,
            messages,
        )


@attr.s(auto_attribs=True)
class SubscriptionPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["Subscription"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["Subscription"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class SubscriptionUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class SubscriptionUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


class TaxCalculationMode(enum.Enum):
    LINE_ITEM_LEVEL = "LineItemLevel"
    UNIT_PRICE_LEVEL = "UnitPriceLevel"


@attr.s(auto_attribs=True)
class TaxCategory(Resource):
    name: typing.Optional[str] = None
    description: typing.Optional[str] = None
    rates: typing.Optional[typing.List["TaxRate"]] = None
    key: typing.Optional[str] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        name: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        rates: typing.Optional[typing.List["TaxRate"]] = None,
        key: typing.Optional[str] = None,
    ) -> None:
        super().__init__(
            id, version, created_at, last_modified_at, name, description, rates, key
        )


@attr.s(auto_attribs=True)
class TaxCategoryPagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["TaxCategory"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["TaxCategory"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class TaxCategoryUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class TaxCategoryUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


class TaxMode(enum.Enum):
    PLATFORM = "Platform"
    EXTERNAL = "External"
    EXTERNAL_AMOUNT = "ExternalAmount"
    DISABLED = "Disabled"


@attr.s(auto_attribs=True)
class TermFacetResult(FacetResult):
    type: typing.Optional["FacetTypes"] = attr.ib(
        repr=False, init=False, default="terms"
    )
    data_type: typing.Optional["TermFacetResultType"] = None
    missing: typing.Optional[int] = None
    total: typing.Optional[int] = None
    other: typing.Optional[int] = None
    terms: typing.Optional[typing.List["FacetResultTerm"]] = None

    def __init__(
        self,
        data_type: typing.Optional["TermFacetResultType"] = None,
        missing: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        other: typing.Optional[int] = None,
        terms: typing.Optional[typing.List["FacetResultTerm"]] = None,
    ) -> None:
        super().__init__(data_type, missing, total, other, terms)


class TermFacetResultType(enum.Enum):
    TEXT = "text"
    DATE = "date"
    TIME = "time"
    DATETIME = "datetime"
    BOOLEAN = "boolean"
    NUMBER = "number"


class TextInputHint(enum.Enum):
    SINGLE_LINE = "SingleLine"
    MULTI_LINE = "MultiLine"


class TransactionState(enum.Enum):
    INITIAL = "Initial"
    PENDING = "Pending"
    SUCCESS = "Success"
    FAILURE = "Failure"


class TransactionType(enum.Enum):
    AUTHORIZATION = "Authorization"
    CANCEL_AUTHORIZATION = "CancelAuthorization"
    CHARGE = "Charge"
    REFUND = "Refund"
    CHARGEBACK = "Chargeback"


@attr.s(auto_attribs=True)
class Type(Resource):
    key: typing.Optional[str] = None
    name: typing.Optional["LocalizedString"] = None
    description: typing.Optional["LocalizedString"] = None
    resource_type_ids: typing.Optional[typing.List["ResourceTypeId"]] = None
    field_definitions: typing.Optional[typing.List["FieldDefinition"]] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        key: typing.Optional[str] = None,
        name: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        resource_type_ids: typing.Optional[typing.List["ResourceTypeId"]] = None,
        field_definitions: typing.Optional[typing.List["FieldDefinition"]] = None,
    ) -> None:
        super().__init__(
            id,
            version,
            created_at,
            last_modified_at,
            key,
            name,
            description,
            resource_type_ids,
            field_definitions,
        )


@attr.s(auto_attribs=True)
class TypePagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["Type"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["Type"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class TypeUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class TypeUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class TypedMoney(Money):
    type: typing.Optional["MoneyType"] = None
    fraction_digits: typing.Optional[int] = None

    def __init__(
        self,
        cent_amount: typing.Optional[int] = None,
        currency_code: typing.Optional["CurrencyCode"] = None,
        type: typing.Optional["MoneyType"] = None,
        fraction_digits: typing.Optional[int] = None,
    ) -> None:
        super().__init__(cent_amount, currency_code, type, fraction_digits)


@attr.s(auto_attribs=True)
class WhitespaceTokenizer(SuggestTokenizer):
    type: typing.Optional[str] = attr.ib(repr=False, init=False, default="whitespace")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class Zone(Resource):
    name: typing.Optional[str] = None
    description: typing.Optional[str] = None
    locations: typing.Optional[typing.List["Location"]] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        name: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        locations: typing.Optional[typing.List["Location"]] = None,
    ) -> None:
        super().__init__(
            id, version, created_at, last_modified_at, name, description, locations
        )


@attr.s(auto_attribs=True)
class ZonePagedQueryResponse(PagedQueryResponse):
    results: typing.Optional[typing.List["Zone"]] = None

    def __init__(
        self,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.List["Zone"]] = None,
    ) -> None:
        super().__init__(count, total, offset, results)


@attr.s(auto_attribs=True)
class ZoneUpdate(Update):
    actions: typing.Optional[list] = None

    def __init__(
        self,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None,
    ) -> None:
        super().__init__(version, actions)


@attr.s(auto_attribs=True)
class ZoneUpdateAction(UpdateAction):
    def __init__(self, action: typing.Optional[str] = None) -> None:
        super().__init__(action)


@attr.s(auto_attribs=True)
class CartAddCustomLineItemAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addCustomLineItem"
    )
    money: typing.Optional["Money"] = None
    name: typing.Optional["LocalizedString"] = None
    quantity: typing.Optional[int] = None
    slug: typing.Optional[str] = None
    tax_category: typing.Optional["TaxCategoryReference"] = None
    custom: typing.Optional["CustomFieldsDraft"] = None
    external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None

    def __init__(
        self,
        money: typing.Optional["Money"] = None,
        name: typing.Optional["LocalizedString"] = None,
        quantity: typing.Optional[int] = None,
        slug: typing.Optional[str] = None,
        tax_category: typing.Optional["TaxCategoryReference"] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None,
    ) -> None:
        super().__init__(
            money, name, quantity, slug, tax_category, custom, external_tax_rate
        )


@attr.s(auto_attribs=True)
class CartAddDiscountCodeAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addDiscountCode"
    )
    code: typing.Optional[str] = None

    def __init__(self, code: typing.Optional[str] = None) -> None:
        super().__init__(code)


@attr.s(auto_attribs=True)
class CartAddItemShippingAddressAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addItemShippingAddress"
    )
    address: typing.Optional["Address"] = None

    def __init__(self, address: typing.Optional["Address"] = None) -> None:
        super().__init__(address)


@attr.s(auto_attribs=True)
class CartAddLineItemAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addLineItem"
    )
    custom: typing.Optional["CustomFieldsDraft"] = None
    distribution_channel: typing.Optional["ChannelReference"] = None
    external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None
    product_id: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    sku: typing.Optional[str] = None
    quantity: typing.Optional[int] = None
    supply_channel: typing.Optional["ChannelReference"] = None
    external_price: typing.Optional["Money"] = None
    external_total_price: typing.Optional["ExternalLineItemTotalPrice"] = None
    shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None

    def __init__(
        self,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        distribution_channel: typing.Optional["ChannelReference"] = None,
        external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None,
        product_id: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        sku: typing.Optional[str] = None,
        quantity: typing.Optional[int] = None,
        supply_channel: typing.Optional["ChannelReference"] = None,
        external_price: typing.Optional["Money"] = None,
        external_total_price: typing.Optional["ExternalLineItemTotalPrice"] = None,
        shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None,
    ) -> None:
        super().__init__(
            custom,
            distribution_channel,
            external_tax_rate,
            product_id,
            variant_id,
            sku,
            quantity,
            supply_channel,
            external_price,
            external_total_price,
            shipping_details,
        )


@attr.s(auto_attribs=True)
class CartAddPaymentAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="addPayment")
    payment: typing.Optional["PaymentReference"] = None

    def __init__(self, payment: typing.Optional["PaymentReference"] = None) -> None:
        super().__init__(payment)


@attr.s(auto_attribs=True)
class CartAddShoppingListAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addShoppingList"
    )
    shopping_list: typing.Optional["ShoppingListReference"] = None
    supply_channel: typing.Optional["ChannelReference"] = None
    distribution_channel: typing.Optional["ChannelReference"] = None

    def __init__(
        self,
        shopping_list: typing.Optional["ShoppingListReference"] = None,
        supply_channel: typing.Optional["ChannelReference"] = None,
        distribution_channel: typing.Optional["ChannelReference"] = None,
    ) -> None:
        super().__init__(shopping_list, supply_channel, distribution_channel)


@attr.s(auto_attribs=True)
class CartApplyDeltaToCustomLineItemShippingDetailsTargetsAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False,
        init=False,
        default="applyDeltaToCustomLineItemShippingDetailsTargets",
    )
    custom_line_item_id: typing.Optional[str] = None
    targets_delta: typing.Optional[typing.List["ItemShippingTarget"]] = None

    def __init__(
        self,
        custom_line_item_id: typing.Optional[str] = None,
        targets_delta: typing.Optional[typing.List["ItemShippingTarget"]] = None,
    ) -> None:
        super().__init__(custom_line_item_id, targets_delta)


@attr.s(auto_attribs=True)
class CartApplyDeltaToLineItemShippingDetailsTargetsAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="applyDeltaToLineItemShippingDetailsTargets"
    )
    line_item_id: typing.Optional[str] = None
    targets_delta: typing.Optional[typing.List["ItemShippingTarget"]] = None

    def __init__(
        self,
        line_item_id: typing.Optional[str] = None,
        targets_delta: typing.Optional[typing.List["ItemShippingTarget"]] = None,
    ) -> None:
        super().__init__(line_item_id, targets_delta)


@attr.s(auto_attribs=True)
class CartChangeCustomLineItemMoneyAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeCustomLineItemMoney"
    )
    custom_line_item_id: typing.Optional[str] = None
    money: typing.Optional["Money"] = None

    def __init__(
        self,
        custom_line_item_id: typing.Optional[str] = None,
        money: typing.Optional["Money"] = None,
    ) -> None:
        super().__init__(custom_line_item_id, money)


@attr.s(auto_attribs=True)
class CartChangeCustomLineItemQuantityAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeCustomLineItemQuantity"
    )
    custom_line_item_id: typing.Optional[str] = None
    quantity: typing.Optional[int] = None

    def __init__(
        self,
        custom_line_item_id: typing.Optional[str] = None,
        quantity: typing.Optional[int] = None,
    ) -> None:
        super().__init__(custom_line_item_id, quantity)


@attr.s(auto_attribs=True)
class CartChangeLineItemQuantityAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeLineItemQuantity"
    )
    line_item_id: typing.Optional[str] = None
    quantity: typing.Optional[int] = None
    external_price: typing.Optional["Money"] = None
    external_total_price: typing.Optional["ExternalLineItemTotalPrice"] = None

    def __init__(
        self,
        line_item_id: typing.Optional[str] = None,
        quantity: typing.Optional[int] = None,
        external_price: typing.Optional["Money"] = None,
        external_total_price: typing.Optional["ExternalLineItemTotalPrice"] = None,
    ) -> None:
        super().__init__(line_item_id, quantity, external_price, external_total_price)


@attr.s(auto_attribs=True)
class CartChangeTaxCalculationModeAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeTaxCalculationMode"
    )
    tax_calculation_mode: typing.Optional["TaxCalculationMode"] = None

    def __init__(
        self, tax_calculation_mode: typing.Optional["TaxCalculationMode"] = None
    ) -> None:
        super().__init__(tax_calculation_mode)


@attr.s(auto_attribs=True)
class CartChangeTaxModeAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeTaxMode"
    )
    tax_mode: typing.Optional["TaxMode"] = None

    def __init__(self, tax_mode: typing.Optional["TaxMode"] = None) -> None:
        super().__init__(tax_mode)


@attr.s(auto_attribs=True)
class CartChangeTaxRoundingModeAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeTaxRoundingMode"
    )
    tax_rounding_mode: typing.Optional["RoundingMode"] = None

    def __init__(
        self, tax_rounding_mode: typing.Optional["RoundingMode"] = None
    ) -> None:
        super().__init__(tax_rounding_mode)


@attr.s(auto_attribs=True)
class CartDiscountChangeCartPredicateAction(CartDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeCartPredicate"
    )
    cart_predicate: typing.Optional[str] = None

    def __init__(self, cart_predicate: typing.Optional[str] = None) -> None:
        super().__init__(cart_predicate)


@attr.s(auto_attribs=True)
class CartDiscountChangeIsActiveAction(CartDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeIsActive"
    )
    is_active: typing.Optional[bool] = None

    def __init__(self, is_active: typing.Optional[bool] = None) -> None:
        super().__init__(is_active)


@attr.s(auto_attribs=True)
class CartDiscountChangeNameAction(CartDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeName")
    name: typing.Optional["LocalizedString"] = None

    def __init__(self, name: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class CartDiscountChangeRequiresDiscountCodeAction(CartDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeRequiresDiscountCode"
    )
    requires_discount_code: typing.Optional[bool] = None

    def __init__(self, requires_discount_code: typing.Optional[bool] = None) -> None:
        super().__init__(requires_discount_code)


@attr.s(auto_attribs=True)
class CartDiscountChangeSortOrderAction(CartDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeSortOrder"
    )
    sort_order: typing.Optional[str] = None

    def __init__(self, sort_order: typing.Optional[str] = None) -> None:
        super().__init__(sort_order)


@attr.s(auto_attribs=True)
class CartDiscountChangeStackingModeAction(CartDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeStackingMode"
    )
    stacking_mode: typing.Optional["StackingMode"] = None

    def __init__(self, stacking_mode: typing.Optional["StackingMode"] = None) -> None:
        super().__init__(stacking_mode)


@attr.s(auto_attribs=True)
class CartDiscountChangeTargetAction(CartDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeTarget"
    )
    target: typing.Optional["CartDiscountTarget"] = None

    def __init__(self, target: typing.Optional["CartDiscountTarget"] = None) -> None:
        super().__init__(target)


@attr.s(auto_attribs=True)
class CartDiscountChangeValueAction(CartDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeValue"
    )
    value: typing.Optional["CartDiscountValue"] = None

    def __init__(self, value: typing.Optional["CartDiscountValue"] = None) -> None:
        super().__init__(value)


@attr.s(auto_attribs=True)
class CartDiscountReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="cart-discount"
    )
    obj: typing.Optional["CartDiscount"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["CartDiscount"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class CartDiscountSetCustomFieldAction(CartDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomField"
    )
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(name, value)


@attr.s(auto_attribs=True)
class CartDiscountSetCustomTypeAction(CartDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomType"
    )
    fields: typing.Optional[str] = None
    type: typing.Optional["TypeReference"] = None

    def __init__(
        self,
        fields: typing.Optional[str] = None,
        type: typing.Optional["TypeReference"] = None,
    ) -> None:
        super().__init__(fields, type)


@attr.s(auto_attribs=True)
class CartDiscountSetDescriptionAction(CartDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDescription"
    )
    description: typing.Optional["LocalizedString"] = None

    def __init__(self, description: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(description)


@attr.s(auto_attribs=True)
class CartDiscountSetValidFromAction(CartDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setValidFrom"
    )
    valid_from: typing.Optional[datetime.datetime] = None

    def __init__(self, valid_from: typing.Optional[datetime.datetime] = None) -> None:
        super().__init__(valid_from)


@attr.s(auto_attribs=True)
class CartDiscountSetValidFromAndUntilAction(CartDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setValidFromAndUntil"
    )
    valid_from: typing.Optional[datetime.datetime] = None
    valid_until: typing.Optional[datetime.datetime] = None

    def __init__(
        self,
        valid_from: typing.Optional[datetime.datetime] = None,
        valid_until: typing.Optional[datetime.datetime] = None,
    ) -> None:
        super().__init__(valid_from, valid_until)


@attr.s(auto_attribs=True)
class CartDiscountSetValidUntilAction(CartDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setValidUntil"
    )
    valid_until: typing.Optional[datetime.datetime] = None

    def __init__(self, valid_until: typing.Optional[datetime.datetime] = None) -> None:
        super().__init__(valid_until)


@attr.s(auto_attribs=True)
class CartRecalculateAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="recalculate"
    )
    update_product_data: typing.Optional[bool] = None

    def __init__(self, update_product_data: typing.Optional[bool] = None) -> None:
        super().__init__(update_product_data)


@attr.s(auto_attribs=True)
class CartReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="cart"
    )
    obj: typing.Optional["Cart"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["Cart"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class CartRemoveCustomLineItemAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeCustomLineItem"
    )
    custom_line_item_id: typing.Optional[str] = None

    def __init__(self, custom_line_item_id: typing.Optional[str] = None) -> None:
        super().__init__(custom_line_item_id)


@attr.s(auto_attribs=True)
class CartRemoveDiscountCodeAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeDiscountCode"
    )
    discount_code: typing.Optional["DiscountCodeReference"] = None

    def __init__(
        self, discount_code: typing.Optional["DiscountCodeReference"] = None
    ) -> None:
        super().__init__(discount_code)


@attr.s(auto_attribs=True)
class CartRemoveItemShippingAddressAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeItemShippingAddress"
    )
    address_key: typing.Optional[str] = None

    def __init__(self, address_key: typing.Optional[str] = None) -> None:
        super().__init__(address_key)


@attr.s(auto_attribs=True)
class CartRemoveLineItemAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeLineItem"
    )
    line_item_id: typing.Optional[str] = None
    quantity: typing.Optional[int] = None
    external_price: typing.Optional["Money"] = None
    external_total_price: typing.Optional["ExternalLineItemTotalPrice"] = None
    shipping_details_to_remove: typing.Optional["ItemShippingDetailsDraft"] = None

    def __init__(
        self,
        line_item_id: typing.Optional[str] = None,
        quantity: typing.Optional[int] = None,
        external_price: typing.Optional["Money"] = None,
        external_total_price: typing.Optional["ExternalLineItemTotalPrice"] = None,
        shipping_details_to_remove: typing.Optional["ItemShippingDetailsDraft"] = None,
    ) -> None:
        super().__init__(
            line_item_id,
            quantity,
            external_price,
            external_total_price,
            shipping_details_to_remove,
        )


@attr.s(auto_attribs=True)
class CartRemovePaymentAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removePayment"
    )
    payment: typing.Optional["PaymentReference"] = None

    def __init__(self, payment: typing.Optional["PaymentReference"] = None) -> None:
        super().__init__(payment)


@attr.s(auto_attribs=True)
class CartSetAnonymousIdAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAnonymousId"
    )
    anonymous_id: typing.Optional[str] = None

    def __init__(self, anonymous_id: typing.Optional[str] = None) -> None:
        super().__init__(anonymous_id)


@attr.s(auto_attribs=True)
class CartSetBillingAddressAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setBillingAddress"
    )
    address: typing.Optional["Address"] = None

    def __init__(self, address: typing.Optional["Address"] = None) -> None:
        super().__init__(address)


@attr.s(auto_attribs=True)
class CartSetCartTotalTaxAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCartTotalTax"
    )
    external_total_gross: typing.Optional["Money"] = None
    external_tax_portions: typing.Optional[typing.List["TaxPortion"]] = None

    def __init__(
        self,
        external_total_gross: typing.Optional["Money"] = None,
        external_tax_portions: typing.Optional[typing.List["TaxPortion"]] = None,
    ) -> None:
        super().__init__(external_total_gross, external_tax_portions)


@attr.s(auto_attribs=True)
class CartSetCountryAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setCountry")
    country: typing.Optional["CountryCode"] = None

    def __init__(self, country: typing.Optional["CountryCode"] = None) -> None:
        super().__init__(country)


@attr.s(auto_attribs=True)
class CartSetCustomFieldAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomField"
    )
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(name, value)


@attr.s(auto_attribs=True)
class CartSetCustomLineItemCustomFieldAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomLineItemCustomField"
    )
    custom_line_item_id: typing.Optional[str] = None
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        custom_line_item_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(custom_line_item_id, name, value)


@attr.s(auto_attribs=True)
class CartSetCustomLineItemCustomTypeAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomLineItemCustomType"
    )
    custom_line_item_id: typing.Optional[str] = None
    type: typing.Optional["TypeReference"] = None
    fields: typing.Optional[str] = None

    def __init__(
        self,
        custom_line_item_id: typing.Optional[str] = None,
        type: typing.Optional["TypeReference"] = None,
        fields: typing.Optional[str] = None,
    ) -> None:
        super().__init__(custom_line_item_id, type, fields)


@attr.s(auto_attribs=True)
class CartSetCustomLineItemShippingDetailsAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomLineItemShippingDetails"
    )
    custom_line_item_id: typing.Optional[str] = None
    shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None

    def __init__(
        self,
        custom_line_item_id: typing.Optional[str] = None,
        shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None,
    ) -> None:
        super().__init__(custom_line_item_id, shipping_details)


@attr.s(auto_attribs=True)
class CartSetCustomLineItemTaxAmountAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomLineItemTaxAmount"
    )
    custom_line_item_id: typing.Optional[str] = None
    external_tax_amount: typing.Optional["ExternalTaxAmountDraft"] = None

    def __init__(
        self,
        custom_line_item_id: typing.Optional[str] = None,
        external_tax_amount: typing.Optional["ExternalTaxAmountDraft"] = None,
    ) -> None:
        super().__init__(custom_line_item_id, external_tax_amount)


@attr.s(auto_attribs=True)
class CartSetCustomLineItemTaxRateAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomLineItemTaxRate"
    )
    custom_line_item_id: typing.Optional[str] = None
    external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None

    def __init__(
        self,
        custom_line_item_id: typing.Optional[str] = None,
        external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None,
    ) -> None:
        super().__init__(custom_line_item_id, external_tax_rate)


@attr.s(auto_attribs=True)
class CartSetCustomShippingMethodAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomShippingMethod"
    )
    shipping_method_name: typing.Optional[str] = None
    shipping_rate: typing.Optional["ShippingRateDraft"] = None
    tax_category: typing.Optional["TaxCategoryReference"] = None
    external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None

    def __init__(
        self,
        shipping_method_name: typing.Optional[str] = None,
        shipping_rate: typing.Optional["ShippingRateDraft"] = None,
        tax_category: typing.Optional["TaxCategoryReference"] = None,
        external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None,
    ) -> None:
        super().__init__(
            shipping_method_name, shipping_rate, tax_category, external_tax_rate
        )


@attr.s(auto_attribs=True)
class CartSetCustomTypeAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomType"
    )
    type: typing.Optional["TypeReference"] = None
    fields: typing.Optional[object] = None

    def __init__(
        self,
        type: typing.Optional["TypeReference"] = None,
        fields: typing.Optional[object] = None,
    ) -> None:
        super().__init__(type, fields)


@attr.s(auto_attribs=True)
class CartSetCustomerEmailAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomerEmail"
    )
    email: typing.Optional[str] = None

    def __init__(self, email: typing.Optional[str] = None) -> None:
        super().__init__(email)


@attr.s(auto_attribs=True)
class CartSetCustomerGroupAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomerGroup"
    )
    customer_group: typing.Optional["CustomerGroupReference"] = None

    def __init__(
        self, customer_group: typing.Optional["CustomerGroupReference"] = None
    ) -> None:
        super().__init__(customer_group)


@attr.s(auto_attribs=True)
class CartSetCustomerIdAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomerId"
    )
    customer_id: typing.Optional[str] = None

    def __init__(self, customer_id: typing.Optional[str] = None) -> None:
        super().__init__(customer_id)


@attr.s(auto_attribs=True)
class CartSetDeleteDaysAfterLastModificationAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDeleteDaysAfterLastModification"
    )
    delete_days_after_last_modification: typing.Optional[int] = None

    def __init__(
        self, delete_days_after_last_modification: typing.Optional[int] = None
    ) -> None:
        super().__init__(delete_days_after_last_modification)


@attr.s(auto_attribs=True)
class CartSetLineItemCustomFieldAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setLineItemCustomField"
    )
    line_item_id: typing.Optional[str] = None
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        line_item_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(line_item_id, name, value)


@attr.s(auto_attribs=True)
class CartSetLineItemCustomTypeAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setLineItemCustomType"
    )
    line_item_id: typing.Optional[str] = None
    type: typing.Optional["TypeReference"] = None
    fields: typing.Optional[str] = None

    def __init__(
        self,
        line_item_id: typing.Optional[str] = None,
        type: typing.Optional["TypeReference"] = None,
        fields: typing.Optional[str] = None,
    ) -> None:
        super().__init__(line_item_id, type, fields)


@attr.s(auto_attribs=True)
class CartSetLineItemPriceAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setLineItemPrice"
    )
    line_item_id: typing.Optional[str] = None
    external_price: typing.Optional["Money"] = None

    def __init__(
        self,
        line_item_id: typing.Optional[str] = None,
        external_price: typing.Optional["Money"] = None,
    ) -> None:
        super().__init__(line_item_id, external_price)


@attr.s(auto_attribs=True)
class CartSetLineItemShippingDetailsAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setLineItemShippingDetails"
    )
    line_item_id: typing.Optional[str] = None
    shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None

    def __init__(
        self,
        line_item_id: typing.Optional[str] = None,
        shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None,
    ) -> None:
        super().__init__(line_item_id, shipping_details)


@attr.s(auto_attribs=True)
class CartSetLineItemTaxAmountAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setLineItemTaxAmount"
    )
    line_item_id: typing.Optional[str] = None
    external_tax_amount: typing.Optional["ExternalTaxAmountDraft"] = None

    def __init__(
        self,
        line_item_id: typing.Optional[str] = None,
        external_tax_amount: typing.Optional["ExternalTaxAmountDraft"] = None,
    ) -> None:
        super().__init__(line_item_id, external_tax_amount)


@attr.s(auto_attribs=True)
class CartSetLineItemTaxRateAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setLineItemTaxRate"
    )
    line_item_id: typing.Optional[str] = None
    external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None

    def __init__(
        self,
        line_item_id: typing.Optional[str] = None,
        external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None,
    ) -> None:
        super().__init__(line_item_id, external_tax_rate)


@attr.s(auto_attribs=True)
class CartSetLineItemTotalPriceAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setLineItemTotalPrice"
    )
    line_item_id: typing.Optional[str] = None
    external_total_price: typing.Optional["ExternalLineItemTotalPrice"] = None

    def __init__(
        self,
        line_item_id: typing.Optional[str] = None,
        external_total_price: typing.Optional["ExternalLineItemTotalPrice"] = None,
    ) -> None:
        super().__init__(line_item_id, external_total_price)


@attr.s(auto_attribs=True)
class CartSetLocaleAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setLocale")
    locale: typing.Optional[str] = None

    def __init__(self, locale: typing.Optional[str] = None) -> None:
        super().__init__(locale)


@attr.s(auto_attribs=True)
class CartSetShippingAddressAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setShippingAddress"
    )
    address: typing.Optional["Address"] = None

    def __init__(self, address: typing.Optional["Address"] = None) -> None:
        super().__init__(address)


@attr.s(auto_attribs=True)
class CartSetShippingMethodAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setShippingMethod"
    )
    shipping_method: typing.Optional["TypeReference"] = None
    external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None

    def __init__(
        self,
        shipping_method: typing.Optional["TypeReference"] = None,
        external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None,
    ) -> None:
        super().__init__(shipping_method, external_tax_rate)


@attr.s(auto_attribs=True)
class CartSetShippingMethodTaxAmountAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setShippingMethodTaxAmount"
    )
    external_tax_amount: typing.Optional["ExternalTaxAmountDraft"] = None

    def __init__(
        self, external_tax_amount: typing.Optional["ExternalTaxAmountDraft"] = None
    ) -> None:
        super().__init__(external_tax_amount)


@attr.s(auto_attribs=True)
class CartSetShippingMethodTaxRateAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setShippingMethodTaxRate"
    )
    external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None

    def __init__(
        self, external_tax_rate: typing.Optional["ExternalTaxRateDraft"] = None
    ) -> None:
        super().__init__(external_tax_rate)


@attr.s(auto_attribs=True)
class CartSetShippingRateInputAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setShippingRateInput"
    )
    shipping_rate_input: typing.Optional["ShippingRateInputDraft"] = None

    def __init__(
        self, shipping_rate_input: typing.Optional["ShippingRateInputDraft"] = None
    ) -> None:
        super().__init__(shipping_rate_input)


@attr.s(auto_attribs=True)
class CartUpdateItemShippingAddressAction(CartUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="updateItemShippingAddress"
    )
    address: typing.Optional["Address"] = None

    def __init__(self, address: typing.Optional["Address"] = None) -> None:
        super().__init__(address)


@attr.s(auto_attribs=True)
class CategoryAddAssetAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="addAsset")
    asset: typing.Optional["AssetDraft"] = None
    position: typing.Optional[int] = None

    def __init__(
        self,
        asset: typing.Optional["AssetDraft"] = None,
        position: typing.Optional[int] = None,
    ) -> None:
        super().__init__(asset, position)


@attr.s(auto_attribs=True)
class CategoryChangeAssetNameAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeAssetName"
    )
    asset_id: typing.Optional[str] = None
    asset_key: typing.Optional[str] = None
    name: typing.Optional["LocalizedString"] = None

    def __init__(
        self,
        asset_id: typing.Optional[str] = None,
        asset_key: typing.Optional[str] = None,
        name: typing.Optional["LocalizedString"] = None,
    ) -> None:
        super().__init__(asset_id, asset_key, name)


@attr.s(auto_attribs=True)
class CategoryChangeAssetOrderAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeAssetOrder"
    )
    asset_order: typing.Optional[typing.List[str]] = None

    def __init__(self, asset_order: typing.Optional[typing.List[str]] = None) -> None:
        super().__init__(asset_order)


@attr.s(auto_attribs=True)
class CategoryChangeNameAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeName")
    name: typing.Optional["LocalizedString"] = None

    def __init__(self, name: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class CategoryChangeOrderHintAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeOrderHint"
    )
    order_hint: typing.Optional[str] = None

    def __init__(self, order_hint: typing.Optional[str] = None) -> None:
        super().__init__(order_hint)


@attr.s(auto_attribs=True)
class CategoryChangeParentAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeParent"
    )
    parent: typing.Optional["CategoryReference"] = None

    def __init__(self, parent: typing.Optional["CategoryReference"] = None) -> None:
        super().__init__(parent)


@attr.s(auto_attribs=True)
class CategoryChangeSlugAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeSlug")
    slug: typing.Optional["LocalizedString"] = None

    def __init__(self, slug: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(slug)


@attr.s(auto_attribs=True)
class CategoryReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="category"
    )
    obj: typing.Optional["Category"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["Category"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class CategoryRemoveAssetAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeAsset"
    )
    asset_id: typing.Optional[str] = None
    asset_key: typing.Optional[str] = None

    def __init__(
        self,
        asset_id: typing.Optional[str] = None,
        asset_key: typing.Optional[str] = None,
    ) -> None:
        super().__init__(asset_id, asset_key)


@attr.s(auto_attribs=True)
class CategorySetAssetCustomFieldAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAssetCustomField"
    )
    asset_id: typing.Optional[str] = None
    asset_key: typing.Optional[str] = None
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        asset_id: typing.Optional[str] = None,
        asset_key: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(asset_id, asset_key, name, value)


@attr.s(auto_attribs=True)
class CategorySetAssetCustomTypeAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAssetCustomType"
    )
    asset_id: typing.Optional[str] = None
    asset_key: typing.Optional[str] = None
    type: typing.Optional["TypeReference"] = None
    fields: typing.Optional[object] = None

    def __init__(
        self,
        asset_id: typing.Optional[str] = None,
        asset_key: typing.Optional[str] = None,
        type: typing.Optional["TypeReference"] = None,
        fields: typing.Optional[object] = None,
    ) -> None:
        super().__init__(asset_id, asset_key, type, fields)


@attr.s(auto_attribs=True)
class CategorySetAssetDescriptionAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAssetDescription"
    )
    asset_id: typing.Optional[str] = None
    asset_key: typing.Optional[str] = None
    description: typing.Optional["LocalizedString"] = None

    def __init__(
        self,
        asset_id: typing.Optional[str] = None,
        asset_key: typing.Optional[str] = None,
        description: typing.Optional["LocalizedString"] = None,
    ) -> None:
        super().__init__(asset_id, asset_key, description)


@attr.s(auto_attribs=True)
class CategorySetAssetKeyAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAssetKey"
    )
    asset_id: typing.Optional[str] = None
    asset_key: typing.Optional[str] = None

    def __init__(
        self,
        asset_id: typing.Optional[str] = None,
        asset_key: typing.Optional[str] = None,
    ) -> None:
        super().__init__(asset_id, asset_key)


@attr.s(auto_attribs=True)
class CategorySetAssetSourcesAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAssetSources"
    )
    asset_id: typing.Optional[str] = None
    asset_key: typing.Optional[str] = None
    sources: typing.Optional[typing.List["AssetSource"]] = None

    def __init__(
        self,
        asset_id: typing.Optional[str] = None,
        asset_key: typing.Optional[str] = None,
        sources: typing.Optional[typing.List["AssetSource"]] = None,
    ) -> None:
        super().__init__(asset_id, asset_key, sources)


@attr.s(auto_attribs=True)
class CategorySetAssetTagsAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAssetTags"
    )
    asset_id: typing.Optional[str] = None
    asset_key: typing.Optional[str] = None
    tags: typing.Optional[typing.List[str]] = None

    def __init__(
        self,
        asset_id: typing.Optional[str] = None,
        asset_key: typing.Optional[str] = None,
        tags: typing.Optional[typing.List[str]] = None,
    ) -> None:
        super().__init__(asset_id, asset_key, tags)


@attr.s(auto_attribs=True)
class CategorySetCustomFieldAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomField"
    )
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(name, value)


@attr.s(auto_attribs=True)
class CategorySetCustomTypeAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomType"
    )
    type: typing.Optional["TypeReference"] = None
    fields: typing.Optional[object] = None

    def __init__(
        self,
        type: typing.Optional["TypeReference"] = None,
        fields: typing.Optional[object] = None,
    ) -> None:
        super().__init__(type, fields)


@attr.s(auto_attribs=True)
class CategorySetDescriptionAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDescription"
    )
    description: typing.Optional["LocalizedString"] = None

    def __init__(self, description: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(description)


@attr.s(auto_attribs=True)
class CategorySetExternalIdAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setExternalId"
    )
    external_id: typing.Optional[str] = None

    def __init__(self, external_id: typing.Optional[str] = None) -> None:
        super().__init__(external_id)


@attr.s(auto_attribs=True)
class CategorySetKeyAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setKey")
    key: typing.Optional[str] = None

    def __init__(self, key: typing.Optional[str] = None) -> None:
        super().__init__(key)


@attr.s(auto_attribs=True)
class CategorySetMetaDescriptionAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setMetaDescription"
    )
    meta_description: typing.Optional["LocalizedString"] = None

    def __init__(
        self, meta_description: typing.Optional["LocalizedString"] = None
    ) -> None:
        super().__init__(meta_description)


@attr.s(auto_attribs=True)
class CategorySetMetaKeywordsAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setMetaKeywords"
    )
    meta_keywords: typing.Optional["LocalizedString"] = None

    def __init__(
        self, meta_keywords: typing.Optional["LocalizedString"] = None
    ) -> None:
        super().__init__(meta_keywords)


@attr.s(auto_attribs=True)
class CategorySetMetaTitleAction(CategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setMetaTitle"
    )
    meta_title: typing.Optional["LocalizedString"] = None

    def __init__(self, meta_title: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(meta_title)


@attr.s(auto_attribs=True)
class CentPrecisionMoney(TypedMoney):
    type: typing.Optional["MoneyType"] = attr.ib(
        repr=False, init=False, default="centPrecision"
    )

    def __init__(
        self,
        cent_amount: typing.Optional[int] = None,
        currency_code: typing.Optional["CurrencyCode"] = None,
        fraction_digits: typing.Optional[int] = None,
    ) -> None:
        super().__init__(cent_amount, currency_code, fraction_digits)


@attr.s(auto_attribs=True)
class ChannelAddRolesAction(ChannelUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="addRoles")
    roles: typing.Optional[typing.List["ChannelRoleEnum"]] = None

    def __init__(
        self, roles: typing.Optional[typing.List["ChannelRoleEnum"]] = None
    ) -> None:
        super().__init__(roles)


@attr.s(auto_attribs=True)
class ChannelChangeDescriptionAction(ChannelUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeDescription"
    )
    description: typing.Optional["LocalizedString"] = None

    def __init__(self, description: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(description)


@attr.s(auto_attribs=True)
class ChannelChangeKeyAction(ChannelUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeKey")
    key: typing.Optional[str] = None

    def __init__(self, key: typing.Optional[str] = None) -> None:
        super().__init__(key)


@attr.s(auto_attribs=True)
class ChannelChangeNameAction(ChannelUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeName")
    name: typing.Optional["LocalizedString"] = None

    def __init__(self, name: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class ChannelReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="channel"
    )
    obj: typing.Optional["Channel"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["Channel"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class ChannelRemoveRolesAction(ChannelUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeRoles"
    )
    roles: typing.Optional[typing.List["ChannelRoleEnum"]] = None

    def __init__(
        self, roles: typing.Optional[typing.List["ChannelRoleEnum"]] = None
    ) -> None:
        super().__init__(roles)


@attr.s(auto_attribs=True)
class ChannelSetAddressAction(ChannelUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setAddress")
    address: typing.Optional["Address"] = None

    def __init__(self, address: typing.Optional["Address"] = None) -> None:
        super().__init__(address)


@attr.s(auto_attribs=True)
class ChannelSetCustomFieldAction(ChannelUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomField"
    )
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(name, value)


@attr.s(auto_attribs=True)
class ChannelSetCustomTypeAction(ChannelUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomType"
    )
    type: typing.Optional["TypeReference"] = None
    fields: typing.Optional[object] = None

    def __init__(
        self,
        type: typing.Optional["TypeReference"] = None,
        fields: typing.Optional[object] = None,
    ) -> None:
        super().__init__(type, fields)


@attr.s(auto_attribs=True)
class ChannelSetGeoLocationAction(ChannelUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setGeoLocation"
    )
    geo_location: typing.Optional["GeoJsonPoint"] = None

    def __init__(self, geo_location: typing.Optional["GeoJsonPoint"] = None) -> None:
        super().__init__(geo_location)


@attr.s(auto_attribs=True)
class ChannelSetRolesAction(ChannelUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setRoles")
    roles: typing.Optional[typing.List["ChannelRoleEnum"]] = None

    def __init__(
        self, roles: typing.Optional[typing.List["ChannelRoleEnum"]] = None
    ) -> None:
        super().__init__(roles)


@attr.s(auto_attribs=True)
class CustomObjectReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="key-value-document"
    )
    obj: typing.Optional["CustomObject"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["CustomObject"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class CustomerAddAddressAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="addAddress")
    address: typing.Optional["Address"] = None

    def __init__(self, address: typing.Optional["Address"] = None) -> None:
        super().__init__(address)


@attr.s(auto_attribs=True)
class CustomerAddBillingAddressIdAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addBillingAddressId"
    )
    address_id: typing.Optional[str] = None

    def __init__(self, address_id: typing.Optional[str] = None) -> None:
        super().__init__(address_id)


@attr.s(auto_attribs=True)
class CustomerAddShippingAddressIdAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addShippingAddressId"
    )
    address_id: typing.Optional[str] = None

    def __init__(self, address_id: typing.Optional[str] = None) -> None:
        super().__init__(address_id)


@attr.s(auto_attribs=True)
class CustomerChangeAddressAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeAddress"
    )
    address_id: typing.Optional[str] = None
    address: typing.Optional["Address"] = None

    def __init__(
        self,
        address_id: typing.Optional[str] = None,
        address: typing.Optional["Address"] = None,
    ) -> None:
        super().__init__(address_id, address)


@attr.s(auto_attribs=True)
class CustomerChangeEmailAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeEmail"
    )
    email: typing.Optional[str] = None

    def __init__(self, email: typing.Optional[str] = None) -> None:
        super().__init__(email)


@attr.s(auto_attribs=True)
class CustomerGroupChangeNameAction(CustomerGroupUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeName")
    name: typing.Optional[str] = None

    def __init__(self, name: typing.Optional[str] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class CustomerGroupReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="customer-group"
    )
    obj: typing.Optional["CustomerGroup"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["CustomerGroup"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class CustomerGroupSetCustomFieldAction(CustomerGroupUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomField"
    )
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(name, value)


@attr.s(auto_attribs=True)
class CustomerGroupSetCustomTypeAction(CustomerGroupUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomType"
    )
    type: typing.Optional["TypeReference"] = None
    fields: typing.Optional[object] = None

    def __init__(
        self,
        type: typing.Optional["TypeReference"] = None,
        fields: typing.Optional[object] = None,
    ) -> None:
        super().__init__(type, fields)


@attr.s(auto_attribs=True)
class CustomerGroupSetKeyAction(CustomerGroupUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setKey")
    key: typing.Optional[str] = None

    def __init__(self, key: typing.Optional[str] = None) -> None:
        super().__init__(key)


@attr.s(auto_attribs=True)
class CustomerReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="customer"
    )
    obj: typing.Optional["Customer"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["Customer"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class CustomerRemoveAddressAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeAddress"
    )
    address_id: typing.Optional[str] = None

    def __init__(self, address_id: typing.Optional[str] = None) -> None:
        super().__init__(address_id)


@attr.s(auto_attribs=True)
class CustomerRemoveBillingAddressIdAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeBillingAddressId"
    )
    address_id: typing.Optional[str] = None

    def __init__(self, address_id: typing.Optional[str] = None) -> None:
        super().__init__(address_id)


@attr.s(auto_attribs=True)
class CustomerRemoveShippingAddressIdAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeShippingAddressId"
    )
    address_id: typing.Optional[str] = None

    def __init__(self, address_id: typing.Optional[str] = None) -> None:
        super().__init__(address_id)


@attr.s(auto_attribs=True)
class CustomerSetCompanyNameAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCompanyName"
    )
    company_name: typing.Optional[str] = None

    def __init__(self, company_name: typing.Optional[str] = None) -> None:
        super().__init__(company_name)


@attr.s(auto_attribs=True)
class CustomerSetCustomFieldAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomField"
    )
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(name, value)


@attr.s(auto_attribs=True)
class CustomerSetCustomTypeAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomType"
    )
    type: typing.Optional["TypeReference"] = None
    fields: typing.Optional[object] = None

    def __init__(
        self,
        type: typing.Optional["TypeReference"] = None,
        fields: typing.Optional[object] = None,
    ) -> None:
        super().__init__(type, fields)


@attr.s(auto_attribs=True)
class CustomerSetCustomerGroupAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomerGroup"
    )
    customer_group: typing.Optional["CustomerGroupReference"] = None

    def __init__(
        self, customer_group: typing.Optional["CustomerGroupReference"] = None
    ) -> None:
        super().__init__(customer_group)


@attr.s(auto_attribs=True)
class CustomerSetCustomerNumberAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomerNumber"
    )
    customer_number: typing.Optional[str] = None

    def __init__(self, customer_number: typing.Optional[str] = None) -> None:
        super().__init__(customer_number)


@attr.s(auto_attribs=True)
class CustomerSetDateOfBirthAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDateOfBirth"
    )
    date_of_birth: typing.Optional[datetime.date] = None

    def __init__(self, date_of_birth: typing.Optional[datetime.date] = None) -> None:
        super().__init__(date_of_birth)


@attr.s(auto_attribs=True)
class CustomerSetDefaultBillingAddressAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDefaultBillingAddress"
    )
    address_id: typing.Optional[str] = None

    def __init__(self, address_id: typing.Optional[str] = None) -> None:
        super().__init__(address_id)


@attr.s(auto_attribs=True)
class CustomerSetDefaultShippingAddressAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDefaultShippingAddress"
    )
    address_id: typing.Optional[str] = None

    def __init__(self, address_id: typing.Optional[str] = None) -> None:
        super().__init__(address_id)


@attr.s(auto_attribs=True)
class CustomerSetExternalIdAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setExternalId"
    )
    external_id: typing.Optional[str] = None

    def __init__(self, external_id: typing.Optional[str] = None) -> None:
        super().__init__(external_id)


@attr.s(auto_attribs=True)
class CustomerSetFirstNameAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setFirstName"
    )
    first_name: typing.Optional[str] = None

    def __init__(self, first_name: typing.Optional[str] = None) -> None:
        super().__init__(first_name)


@attr.s(auto_attribs=True)
class CustomerSetKeyAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setKey")
    key: typing.Optional[str] = None

    def __init__(self, key: typing.Optional[str] = None) -> None:
        super().__init__(key)


@attr.s(auto_attribs=True)
class CustomerSetLastNameAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setLastName"
    )
    last_name: typing.Optional[str] = None

    def __init__(self, last_name: typing.Optional[str] = None) -> None:
        super().__init__(last_name)


@attr.s(auto_attribs=True)
class CustomerSetLocaleAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setLocale")
    locale: typing.Optional[str] = None

    def __init__(self, locale: typing.Optional[str] = None) -> None:
        super().__init__(locale)


@attr.s(auto_attribs=True)
class CustomerSetMiddleNameAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setMiddleName"
    )
    middle_name: typing.Optional[str] = None

    def __init__(self, middle_name: typing.Optional[str] = None) -> None:
        super().__init__(middle_name)


@attr.s(auto_attribs=True)
class CustomerSetSalutationAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setSalutation"
    )
    salutation: typing.Optional[str] = None

    def __init__(self, salutation: typing.Optional[str] = None) -> None:
        super().__init__(salutation)


@attr.s(auto_attribs=True)
class CustomerSetTitleAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setTitle")
    title: typing.Optional[str] = None

    def __init__(self, title: typing.Optional[str] = None) -> None:
        super().__init__(title)


@attr.s(auto_attribs=True)
class CustomerSetVatIdAction(CustomerUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setVatId")
    vat_id: typing.Optional[str] = None

    def __init__(self, vat_id: typing.Optional[str] = None) -> None:
        super().__init__(vat_id)


@attr.s(auto_attribs=True)
class DiscountCodeChangeCartDiscountsAction(DiscountCodeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeCartDiscounts"
    )
    cart_discounts: typing.Optional[typing.List["CartDiscountReference"]] = None

    def __init__(
        self,
        cart_discounts: typing.Optional[typing.List["CartDiscountReference"]] = None,
    ) -> None:
        super().__init__(cart_discounts)


@attr.s(auto_attribs=True)
class DiscountCodeChangeGroupsAction(DiscountCodeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeGroups"
    )
    groups: typing.Optional[typing.List[str]] = None

    def __init__(self, groups: typing.Optional[typing.List[str]] = None) -> None:
        super().__init__(groups)


@attr.s(auto_attribs=True)
class DiscountCodeChangeIsActiveAction(DiscountCodeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeIsActive"
    )
    is_active: typing.Optional[bool] = None

    def __init__(self, is_active: typing.Optional[bool] = None) -> None:
        super().__init__(is_active)


@attr.s(auto_attribs=True)
class DiscountCodeReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="discount-code"
    )
    obj: typing.Optional["DiscountCode"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["DiscountCode"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class DiscountCodeSetCartPredicateAction(DiscountCodeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCartPredicate"
    )
    cart_predicate: typing.Optional[str] = None

    def __init__(self, cart_predicate: typing.Optional[str] = None) -> None:
        super().__init__(cart_predicate)


@attr.s(auto_attribs=True)
class DiscountCodeSetCustomFieldAction(DiscountCodeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomField"
    )
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(name, value)


@attr.s(auto_attribs=True)
class DiscountCodeSetCustomTypeAction(DiscountCodeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomType"
    )
    type: typing.Optional["TypeReference"] = None
    fields: typing.Optional[object] = None

    def __init__(
        self,
        type: typing.Optional["TypeReference"] = None,
        fields: typing.Optional[object] = None,
    ) -> None:
        super().__init__(type, fields)


@attr.s(auto_attribs=True)
class DiscountCodeSetDescriptionAction(DiscountCodeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDescription"
    )
    description: typing.Optional["LocalizedString"] = None

    def __init__(self, description: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(description)


@attr.s(auto_attribs=True)
class DiscountCodeSetMaxApplicationsAction(DiscountCodeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setMaxApplications"
    )
    max_applications: typing.Optional[int] = None

    def __init__(self, max_applications: typing.Optional[int] = None) -> None:
        super().__init__(max_applications)


@attr.s(auto_attribs=True)
class DiscountCodeSetMaxApplicationsPerCustomerAction(DiscountCodeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setMaxApplicationsPerCustomer"
    )
    max_applications_per_customer: typing.Optional[int] = None

    def __init__(
        self, max_applications_per_customer: typing.Optional[int] = None
    ) -> None:
        super().__init__(max_applications_per_customer)


@attr.s(auto_attribs=True)
class DiscountCodeSetNameAction(DiscountCodeUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setName")
    name: typing.Optional["LocalizedString"] = None

    def __init__(self, name: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class DiscountCodeSetValidFromAction(DiscountCodeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setValidFrom"
    )
    valid_from: typing.Optional[datetime.datetime] = None

    def __init__(self, valid_from: typing.Optional[datetime.datetime] = None) -> None:
        super().__init__(valid_from)


@attr.s(auto_attribs=True)
class DiscountCodeSetValidFromAndUntilAction(DiscountCodeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setValidFromAndUntil"
    )
    valid_from: typing.Optional[datetime.datetime] = None
    valid_until: typing.Optional[datetime.datetime] = None

    def __init__(
        self,
        valid_from: typing.Optional[datetime.datetime] = None,
        valid_until: typing.Optional[datetime.datetime] = None,
    ) -> None:
        super().__init__(valid_from, valid_until)


@attr.s(auto_attribs=True)
class DiscountCodeSetValidUntilAction(DiscountCodeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setValidUntil"
    )
    valid_until: typing.Optional[datetime.datetime] = None

    def __init__(self, valid_until: typing.Optional[datetime.datetime] = None) -> None:
        super().__init__(valid_until)


@attr.s(auto_attribs=True)
class ExtensionChangeDestinationAction(ExtensionUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeDestination"
    )
    destination: typing.Optional["ExtensionDestination"] = None

    def __init__(
        self, destination: typing.Optional["ExtensionDestination"] = None
    ) -> None:
        super().__init__(destination)


@attr.s(auto_attribs=True)
class ExtensionChangeTriggersAction(ExtensionUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeTriggers"
    )
    triggers: typing.Optional[typing.List["ExtensionTrigger"]] = None

    def __init__(
        self, triggers: typing.Optional[typing.List["ExtensionTrigger"]] = None
    ) -> None:
        super().__init__(triggers)


@attr.s(auto_attribs=True)
class ExtensionSetKeyAction(ExtensionUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setKey")
    key: typing.Optional[str] = None

    def __init__(self, key: typing.Optional[str] = None) -> None:
        super().__init__(key)


@attr.s(auto_attribs=True)
class HighPrecisionMoney(TypedMoney):
    type: typing.Optional["MoneyType"] = attr.ib(
        repr=False, init=False, default="highPrecision"
    )
    precise_amount: typing.Optional[int] = None

    def __init__(
        self,
        cent_amount: typing.Optional[int] = None,
        currency_code: typing.Optional["CurrencyCode"] = None,
        fraction_digits: typing.Optional[int] = None,
        precise_amount: typing.Optional[int] = None,
    ) -> None:
        super().__init__(cent_amount, currency_code, fraction_digits, precise_amount)


@attr.s(auto_attribs=True)
class InventoryAddQuantityAction(InventoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addQuantity"
    )
    quantity: typing.Optional[int] = None

    def __init__(self, quantity: typing.Optional[int] = None) -> None:
        super().__init__(quantity)


@attr.s(auto_attribs=True)
class InventoryChangeQuantityAction(InventoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeQuantity"
    )
    quantity: typing.Optional[int] = None

    def __init__(self, quantity: typing.Optional[int] = None) -> None:
        super().__init__(quantity)


@attr.s(auto_attribs=True)
class InventoryEntryReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="inventory-entry"
    )
    obj: typing.Optional["InventoryEntry"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["InventoryEntry"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class InventoryRemoveQuantityAction(InventoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeQuantity"
    )
    quantity: typing.Optional[int] = None

    def __init__(self, quantity: typing.Optional[int] = None) -> None:
        super().__init__(quantity)


@attr.s(auto_attribs=True)
class InventorySetCustomFieldAction(InventoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomField"
    )
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(name, value)


@attr.s(auto_attribs=True)
class InventorySetCustomTypeAction(InventoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomType"
    )
    type: typing.Optional["TypeReference"] = None
    fields: typing.Optional[object] = None

    def __init__(
        self,
        type: typing.Optional["TypeReference"] = None,
        fields: typing.Optional[object] = None,
    ) -> None:
        super().__init__(type, fields)


@attr.s(auto_attribs=True)
class InventorySetExpectedDeliveryAction(InventoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setExpectedDelivery"
    )
    expected_delivery: typing.Optional[datetime.datetime] = None

    def __init__(
        self, expected_delivery: typing.Optional[datetime.datetime] = None
    ) -> None:
        super().__init__(expected_delivery)


@attr.s(auto_attribs=True)
class InventorySetRestockableInDaysAction(InventoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setRestockableInDays"
    )
    restockable_in_days: typing.Optional[int] = None

    def __init__(self, restockable_in_days: typing.Optional[int] = None) -> None:
        super().__init__(restockable_in_days)


@attr.s(auto_attribs=True)
class InventorySetSupplyChannelAction(InventoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setSupplyChannel"
    )
    supply_channel: typing.Optional["ChannelReference"] = None

    def __init__(
        self, supply_channel: typing.Optional["ChannelReference"] = None
    ) -> None:
        super().__init__(supply_channel)


@attr.s(auto_attribs=True)
class OrderAddDeliveryAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addDelivery"
    )
    items: typing.Optional[typing.List["DeliveryItem"]] = None
    parcels: typing.Optional[typing.List["ParcelDraft"]] = None
    address: typing.Optional["Address"] = None

    def __init__(
        self,
        items: typing.Optional[typing.List["DeliveryItem"]] = None,
        parcels: typing.Optional[typing.List["ParcelDraft"]] = None,
        address: typing.Optional["Address"] = None,
    ) -> None:
        super().__init__(items, parcels, address)


@attr.s(auto_attribs=True)
class OrderAddItemShippingAddressAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addItemShippingAddress"
    )
    address: typing.Optional["Address"] = None

    def __init__(self, address: typing.Optional["Address"] = None) -> None:
        super().__init__(address)


@attr.s(auto_attribs=True)
class OrderAddParcelToDeliveryAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addParcelToDelivery"
    )
    delivery_id: typing.Optional[str] = None
    measurements: typing.Optional["ParcelMeasurements"] = None
    tracking_data: typing.Optional["TrackingData"] = None
    items: typing.Optional[typing.List["DeliveryItem"]] = None

    def __init__(
        self,
        delivery_id: typing.Optional[str] = None,
        measurements: typing.Optional["ParcelMeasurements"] = None,
        tracking_data: typing.Optional["TrackingData"] = None,
        items: typing.Optional[typing.List["DeliveryItem"]] = None,
    ) -> None:
        super().__init__(delivery_id, measurements, tracking_data, items)


@attr.s(auto_attribs=True)
class OrderAddPaymentAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="addPayment")
    payment: typing.Optional["PaymentReference"] = None

    def __init__(self, payment: typing.Optional["PaymentReference"] = None) -> None:
        super().__init__(payment)


@attr.s(auto_attribs=True)
class OrderAddReturnInfoAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addReturnInfo"
    )
    items: typing.Optional[typing.List["ReturnItemDraft"]] = None
    return_date: typing.Optional[datetime.datetime] = None
    return_tracking_id: typing.Optional[str] = None

    def __init__(
        self,
        items: typing.Optional[typing.List["ReturnItemDraft"]] = None,
        return_date: typing.Optional[datetime.datetime] = None,
        return_tracking_id: typing.Optional[str] = None,
    ) -> None:
        super().__init__(items, return_date, return_tracking_id)


@attr.s(auto_attribs=True)
class OrderChangeOrderStateAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeOrderState"
    )
    order_state: typing.Optional["OrderState"] = None

    def __init__(self, order_state: typing.Optional["OrderState"] = None) -> None:
        super().__init__(order_state)


@attr.s(auto_attribs=True)
class OrderChangePaymentStateAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changePaymentState"
    )
    payment_state: typing.Optional["PaymentState"] = None

    def __init__(self, payment_state: typing.Optional["PaymentState"] = None) -> None:
        super().__init__(payment_state)


@attr.s(auto_attribs=True)
class OrderChangeShipmentStateAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeShipmentState"
    )
    shipment_state: typing.Optional["ShipmentState"] = None

    def __init__(self, shipment_state: typing.Optional["ShipmentState"] = None) -> None:
        super().__init__(shipment_state)


@attr.s(auto_attribs=True)
class OrderImportCustomLineItemStateAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="importCustomLineItemState"
    )
    custom_line_item_id: typing.Optional[str] = None
    state: typing.Optional[typing.List["ItemState"]] = None

    def __init__(
        self,
        custom_line_item_id: typing.Optional[str] = None,
        state: typing.Optional[typing.List["ItemState"]] = None,
    ) -> None:
        super().__init__(custom_line_item_id, state)


@attr.s(auto_attribs=True)
class OrderImportLineItemStateAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="importLineItemState"
    )
    line_item_id: typing.Optional[str] = None
    state: typing.Optional[typing.List["ItemState"]] = None

    def __init__(
        self,
        line_item_id: typing.Optional[str] = None,
        state: typing.Optional[typing.List["ItemState"]] = None,
    ) -> None:
        super().__init__(line_item_id, state)


@attr.s(auto_attribs=True)
class OrderReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="order"
    )
    obj: typing.Optional["Order"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["Order"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class OrderRemoveDeliveryAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeDelivery"
    )
    delivery_id: typing.Optional[str] = None

    def __init__(self, delivery_id: typing.Optional[str] = None) -> None:
        super().__init__(delivery_id)


@attr.s(auto_attribs=True)
class OrderRemoveItemShippingAddressAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeItemShippingAddress"
    )
    address_key: typing.Optional[str] = None

    def __init__(self, address_key: typing.Optional[str] = None) -> None:
        super().__init__(address_key)


@attr.s(auto_attribs=True)
class OrderRemoveParcelFromDeliveryAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeParcelFromDelivery"
    )
    parcel_id: typing.Optional[str] = None

    def __init__(self, parcel_id: typing.Optional[str] = None) -> None:
        super().__init__(parcel_id)


@attr.s(auto_attribs=True)
class OrderRemovePaymentAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removePayment"
    )
    payment: typing.Optional["PaymentReference"] = None

    def __init__(self, payment: typing.Optional["PaymentReference"] = None) -> None:
        super().__init__(payment)


@attr.s(auto_attribs=True)
class OrderSetBillingAddressAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setBillingAddress"
    )
    address: typing.Optional["Address"] = None

    def __init__(self, address: typing.Optional["Address"] = None) -> None:
        super().__init__(address)


@attr.s(auto_attribs=True)
class OrderSetCustomFieldAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomField"
    )
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(name, value)


@attr.s(auto_attribs=True)
class OrderSetCustomLineItemCustomFieldAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomLineItemCustomField"
    )
    custom_line_item_id: typing.Optional[str] = None
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        custom_line_item_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(custom_line_item_id, name, value)


@attr.s(auto_attribs=True)
class OrderSetCustomLineItemCustomTypeAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomLineItemCustomType"
    )
    custom_line_item_id: typing.Optional[str] = None
    fields: typing.Optional[str] = None
    type: typing.Optional["TypeReference"] = None

    def __init__(
        self,
        custom_line_item_id: typing.Optional[str] = None,
        fields: typing.Optional[str] = None,
        type: typing.Optional["TypeReference"] = None,
    ) -> None:
        super().__init__(custom_line_item_id, fields, type)


@attr.s(auto_attribs=True)
class OrderSetCustomLineItemShippingDetailsAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomLineItemShippingDetails"
    )
    custom_line_item_id: typing.Optional[str] = None
    shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None

    def __init__(
        self,
        custom_line_item_id: typing.Optional[str] = None,
        shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None,
    ) -> None:
        super().__init__(custom_line_item_id, shipping_details)


@attr.s(auto_attribs=True)
class OrderSetCustomTypeAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomType"
    )
    fields: typing.Optional[str] = None
    type: typing.Optional["TypeReference"] = None

    def __init__(
        self,
        fields: typing.Optional[str] = None,
        type: typing.Optional["TypeReference"] = None,
    ) -> None:
        super().__init__(fields, type)


@attr.s(auto_attribs=True)
class OrderSetCustomerEmailAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomerEmail"
    )
    email: typing.Optional[str] = None

    def __init__(self, email: typing.Optional[str] = None) -> None:
        super().__init__(email)


@attr.s(auto_attribs=True)
class OrderSetCustomerIdAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomerId"
    )
    customer_id: typing.Optional[str] = None

    def __init__(self, customer_id: typing.Optional[str] = None) -> None:
        super().__init__(customer_id)


@attr.s(auto_attribs=True)
class OrderSetDeliveryAddressAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDeliveryAddress"
    )
    delivery_id: typing.Optional[str] = None
    address: typing.Optional["Address"] = None

    def __init__(
        self,
        delivery_id: typing.Optional[str] = None,
        address: typing.Optional["Address"] = None,
    ) -> None:
        super().__init__(delivery_id, address)


@attr.s(auto_attribs=True)
class OrderSetDeliveryItemsAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDeliveryItems"
    )
    delivery_id: typing.Optional[str] = None
    items: typing.Optional[typing.List["DeliveryItem"]] = None

    def __init__(
        self,
        delivery_id: typing.Optional[str] = None,
        items: typing.Optional[typing.List["DeliveryItem"]] = None,
    ) -> None:
        super().__init__(delivery_id, items)


@attr.s(auto_attribs=True)
class OrderSetLineItemCustomFieldAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setLineItemCustomField"
    )
    line_item_id: typing.Optional[str] = None
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        line_item_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(line_item_id, name, value)


@attr.s(auto_attribs=True)
class OrderSetLineItemCustomTypeAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setLineItemCustomType"
    )
    fields: typing.Optional[str] = None
    line_item_id: typing.Optional[str] = None
    type: typing.Optional["TypeReference"] = None

    def __init__(
        self,
        fields: typing.Optional[str] = None,
        line_item_id: typing.Optional[str] = None,
        type: typing.Optional["TypeReference"] = None,
    ) -> None:
        super().__init__(fields, line_item_id, type)


@attr.s(auto_attribs=True)
class OrderSetLineItemShippingDetailsAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setLineItemShippingDetails"
    )
    line_item_id: typing.Optional[str] = None
    shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None

    def __init__(
        self,
        line_item_id: typing.Optional[str] = None,
        shipping_details: typing.Optional["ItemShippingDetailsDraft"] = None,
    ) -> None:
        super().__init__(line_item_id, shipping_details)


@attr.s(auto_attribs=True)
class OrderSetLocaleAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setLocale")
    locale: typing.Optional[str] = None

    def __init__(self, locale: typing.Optional[str] = None) -> None:
        super().__init__(locale)


@attr.s(auto_attribs=True)
class OrderSetOrderNumberAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setOrderNumber"
    )
    order_number: typing.Optional[str] = None

    def __init__(self, order_number: typing.Optional[str] = None) -> None:
        super().__init__(order_number)


@attr.s(auto_attribs=True)
class OrderSetParcelItemsAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setParcelItems"
    )
    parcel_id: typing.Optional[str] = None
    items: typing.Optional[typing.List["DeliveryItem"]] = None

    def __init__(
        self,
        parcel_id: typing.Optional[str] = None,
        items: typing.Optional[typing.List["DeliveryItem"]] = None,
    ) -> None:
        super().__init__(parcel_id, items)


@attr.s(auto_attribs=True)
class OrderSetParcelMeasurementsAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setParcelMeasurements"
    )
    parcel_id: typing.Optional[str] = None
    measurements: typing.Optional["ParcelMeasurements"] = None

    def __init__(
        self,
        parcel_id: typing.Optional[str] = None,
        measurements: typing.Optional["ParcelMeasurements"] = None,
    ) -> None:
        super().__init__(parcel_id, measurements)


@attr.s(auto_attribs=True)
class OrderSetParcelTrackingDataAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setParcelTrackingData"
    )
    parcel_id: typing.Optional[str] = None
    tracking_data: typing.Optional["TrackingData"] = None

    def __init__(
        self,
        parcel_id: typing.Optional[str] = None,
        tracking_data: typing.Optional["TrackingData"] = None,
    ) -> None:
        super().__init__(parcel_id, tracking_data)


@attr.s(auto_attribs=True)
class OrderSetReturnPaymentStateAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setReturnPaymentState"
    )
    payment_state: typing.Optional["ReturnPaymentState"] = None
    return_item_id: typing.Optional[str] = None

    def __init__(
        self,
        payment_state: typing.Optional["ReturnPaymentState"] = None,
        return_item_id: typing.Optional[str] = None,
    ) -> None:
        super().__init__(payment_state, return_item_id)


@attr.s(auto_attribs=True)
class OrderSetReturnShipmentStateAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setReturnShipmentState"
    )
    return_item_id: typing.Optional[str] = None
    shipment_state: typing.Optional["ReturnShipmentState"] = None

    def __init__(
        self,
        return_item_id: typing.Optional[str] = None,
        shipment_state: typing.Optional["ReturnShipmentState"] = None,
    ) -> None:
        super().__init__(return_item_id, shipment_state)


@attr.s(auto_attribs=True)
class OrderSetShippingAddressAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setShippingAddress"
    )
    address: typing.Optional["Address"] = None

    def __init__(self, address: typing.Optional["Address"] = None) -> None:
        super().__init__(address)


@attr.s(auto_attribs=True)
class OrderTransitionCustomLineItemStateAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="transitionCustomLineItemState"
    )
    actual_transition_date: typing.Optional[datetime.datetime] = None
    custom_line_item_id: typing.Optional[str] = None
    from_state: typing.Optional["StateReference"] = None
    quantity: typing.Optional[int] = None
    to_state: typing.Optional["StateReference"] = None

    def __init__(
        self,
        actual_transition_date: typing.Optional[datetime.datetime] = None,
        custom_line_item_id: typing.Optional[str] = None,
        from_state: typing.Optional["StateReference"] = None,
        quantity: typing.Optional[int] = None,
        to_state: typing.Optional["StateReference"] = None,
    ) -> None:
        super().__init__(
            actual_transition_date, custom_line_item_id, from_state, quantity, to_state
        )


@attr.s(auto_attribs=True)
class OrderTransitionLineItemStateAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="transitionLineItemState"
    )
    actual_transition_date: typing.Optional[datetime.datetime] = None
    from_state: typing.Optional["StateReference"] = None
    line_item_id: typing.Optional[str] = None
    quantity: typing.Optional[int] = None
    to_state: typing.Optional["StateReference"] = None

    def __init__(
        self,
        actual_transition_date: typing.Optional[datetime.datetime] = None,
        from_state: typing.Optional["StateReference"] = None,
        line_item_id: typing.Optional[str] = None,
        quantity: typing.Optional[int] = None,
        to_state: typing.Optional["StateReference"] = None,
    ) -> None:
        super().__init__(
            actual_transition_date, from_state, line_item_id, quantity, to_state
        )


@attr.s(auto_attribs=True)
class OrderTransitionStateAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="transitionState"
    )
    state: typing.Optional["ResourceIdentifier"] = None
    force: typing.Optional[bool] = None

    def __init__(
        self,
        state: typing.Optional["ResourceIdentifier"] = None,
        force: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(state, force)


@attr.s(auto_attribs=True)
class OrderUpdateItemShippingAddressAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="updateItemShippingAddress"
    )
    address: typing.Optional["Address"] = None

    def __init__(self, address: typing.Optional["Address"] = None) -> None:
        super().__init__(address)


@attr.s(auto_attribs=True)
class OrderUpdateSyncInfoAction(OrderUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="updateSyncInfo"
    )
    channel: typing.Optional["ChannelReference"] = None
    external_id: typing.Optional[str] = None
    synced_at: typing.Optional[datetime.datetime] = None

    def __init__(
        self,
        channel: typing.Optional["ChannelReference"] = None,
        external_id: typing.Optional[str] = None,
        synced_at: typing.Optional[datetime.datetime] = None,
    ) -> None:
        super().__init__(channel, external_id, synced_at)


@attr.s(auto_attribs=True)
class PaymentAddInterfaceInteractionAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addInterfaceInteraction"
    )
    fields: typing.Optional[str] = None
    type: typing.Optional["TypeReference"] = None

    def __init__(
        self,
        fields: typing.Optional[str] = None,
        type: typing.Optional["TypeReference"] = None,
    ) -> None:
        super().__init__(fields, type)


@attr.s(auto_attribs=True)
class PaymentAddTransactionAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addTransaction"
    )
    transaction: typing.Optional["TransactionDraft"] = None

    def __init__(self, transaction: typing.Optional["TransactionDraft"] = None) -> None:
        super().__init__(transaction)


@attr.s(auto_attribs=True)
class PaymentChangeAmountPlannedAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeAmountPlanned"
    )
    amount: typing.Optional["Money"] = None

    def __init__(self, amount: typing.Optional["Money"] = None) -> None:
        super().__init__(amount)


@attr.s(auto_attribs=True)
class PaymentChangeTransactionInteractionIdAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeTransactionInteractionId"
    )
    interaction_id: typing.Optional[str] = None
    transaction_id: typing.Optional[str] = None

    def __init__(
        self,
        interaction_id: typing.Optional[str] = None,
        transaction_id: typing.Optional[str] = None,
    ) -> None:
        super().__init__(interaction_id, transaction_id)


@attr.s(auto_attribs=True)
class PaymentChangeTransactionStateAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeTransactionState"
    )
    state: typing.Optional["TransactionState"] = None
    transaction_id: typing.Optional[str] = None

    def __init__(
        self,
        state: typing.Optional["TransactionState"] = None,
        transaction_id: typing.Optional[str] = None,
    ) -> None:
        super().__init__(state, transaction_id)


@attr.s(auto_attribs=True)
class PaymentChangeTransactionTimestampAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeTransactionTimestamp"
    )
    timestamp: typing.Optional[datetime.datetime] = None
    transaction_id: typing.Optional[str] = None

    def __init__(
        self,
        timestamp: typing.Optional[datetime.datetime] = None,
        transaction_id: typing.Optional[str] = None,
    ) -> None:
        super().__init__(timestamp, transaction_id)


@attr.s(auto_attribs=True)
class PaymentReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="payment"
    )
    obj: typing.Optional["Payment"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["Payment"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class PaymentSetAmountPaidAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAmountPaid"
    )
    amount: typing.Optional["Money"] = None

    def __init__(self, amount: typing.Optional["Money"] = None) -> None:
        super().__init__(amount)


@attr.s(auto_attribs=True)
class PaymentSetAmountRefundedAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAmountRefunded"
    )
    amount: typing.Optional["Money"] = None

    def __init__(self, amount: typing.Optional["Money"] = None) -> None:
        super().__init__(amount)


@attr.s(auto_attribs=True)
class PaymentSetAnonymousIdAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAnonymousId"
    )
    anonymous_id: typing.Optional[str] = None

    def __init__(self, anonymous_id: typing.Optional[str] = None) -> None:
        super().__init__(anonymous_id)


@attr.s(auto_attribs=True)
class PaymentSetAuthorizationAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAuthorization"
    )
    amount: typing.Optional["Money"] = None
    until: typing.Optional[datetime.datetime] = None

    def __init__(
        self,
        amount: typing.Optional["Money"] = None,
        until: typing.Optional[datetime.datetime] = None,
    ) -> None:
        super().__init__(amount, until)


@attr.s(auto_attribs=True)
class PaymentSetCustomFieldAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomField"
    )
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(name, value)


@attr.s(auto_attribs=True)
class PaymentSetCustomTypeAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomType"
    )
    fields: typing.Optional[str] = None
    type: typing.Optional["TypeReference"] = None

    def __init__(
        self,
        fields: typing.Optional[str] = None,
        type: typing.Optional["TypeReference"] = None,
    ) -> None:
        super().__init__(fields, type)


@attr.s(auto_attribs=True)
class PaymentSetCustomerAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomer"
    )
    customer: typing.Optional["CustomerReference"] = None

    def __init__(self, customer: typing.Optional["CustomerReference"] = None) -> None:
        super().__init__(customer)


@attr.s(auto_attribs=True)
class PaymentSetExternalIdAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setExternalId"
    )
    external_id: typing.Optional[str] = None

    def __init__(self, external_id: typing.Optional[str] = None) -> None:
        super().__init__(external_id)


@attr.s(auto_attribs=True)
class PaymentSetInterfaceIdAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setInterfaceId"
    )
    interface_id: typing.Optional[str] = None

    def __init__(self, interface_id: typing.Optional[str] = None) -> None:
        super().__init__(interface_id)


@attr.s(auto_attribs=True)
class PaymentSetKeyAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setKey")
    key: typing.Optional[str] = None

    def __init__(self, key: typing.Optional[str] = None) -> None:
        super().__init__(key)


@attr.s(auto_attribs=True)
class PaymentSetMethodInfoInterfaceAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setMethodInfoInterface"
    )
    interface: typing.Optional[str] = None

    def __init__(self, interface: typing.Optional[str] = None) -> None:
        super().__init__(interface)


@attr.s(auto_attribs=True)
class PaymentSetMethodInfoMethodAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setMethodInfoMethod"
    )
    method: typing.Optional[str] = None

    def __init__(self, method: typing.Optional[str] = None) -> None:
        super().__init__(method)


@attr.s(auto_attribs=True)
class PaymentSetMethodInfoNameAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setMethodInfoName"
    )
    name: typing.Optional["LocalizedString"] = None

    def __init__(self, name: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class PaymentSetStatusInterfaceCodeAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setStatusInterfaceCode"
    )
    interface_code: typing.Optional[str] = None

    def __init__(self, interface_code: typing.Optional[str] = None) -> None:
        super().__init__(interface_code)


@attr.s(auto_attribs=True)
class PaymentSetStatusInterfaceTextAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setStatusInterfaceText"
    )
    interface_text: typing.Optional[str] = None

    def __init__(self, interface_text: typing.Optional[str] = None) -> None:
        super().__init__(interface_text)


@attr.s(auto_attribs=True)
class PaymentTransitionStateAction(PaymentUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="transitionState"
    )
    state: typing.Optional["StateReference"] = None
    force: typing.Optional[bool] = None

    def __init__(
        self,
        state: typing.Optional["StateReference"] = None,
        force: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(state, force)


@attr.s(auto_attribs=True)
class ProductAddAssetAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="addAsset")
    asset: typing.Optional["AssetDraft"] = None
    sku: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    staged: typing.Optional[bool] = None
    position: typing.Optional[int] = None

    def __init__(
        self,
        asset: typing.Optional["AssetDraft"] = None,
        sku: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        staged: typing.Optional[bool] = None,
        position: typing.Optional[int] = None,
    ) -> None:
        super().__init__(asset, sku, variant_id, staged, position)


@attr.s(auto_attribs=True)
class ProductAddExternalImageAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addExternalImage"
    )
    image: typing.Optional["Image"] = None
    sku: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        image: typing.Optional["Image"] = None,
        sku: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(image, sku, variant_id, staged)


@attr.s(auto_attribs=True)
class ProductAddPriceAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="addPrice")
    price: typing.Optional["PriceDraft"] = None
    sku: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        price: typing.Optional["PriceDraft"] = None,
        sku: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(price, sku, variant_id, staged)


@attr.s(auto_attribs=True)
class ProductAddToCategoryAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addToCategory"
    )
    category: typing.Optional["CategoryReference"] = None
    order_hint: typing.Optional[str] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        category: typing.Optional["CategoryReference"] = None,
        order_hint: typing.Optional[str] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(category, order_hint, staged)


@attr.s(auto_attribs=True)
class ProductAddVariantAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="addVariant")
    attributes: typing.Optional[typing.List["Attribute"]] = None
    images: typing.Optional[typing.List["Image"]] = None
    key: typing.Optional[str] = None
    prices: typing.Optional[typing.List["PriceDraft"]] = None
    sku: typing.Optional[str] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        attributes: typing.Optional[typing.List["Attribute"]] = None,
        images: typing.Optional[typing.List["Image"]] = None,
        key: typing.Optional[str] = None,
        prices: typing.Optional[typing.List["PriceDraft"]] = None,
        sku: typing.Optional[str] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(attributes, images, key, prices, sku, staged)


@attr.s(auto_attribs=True)
class ProductChangeAssetNameAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeAssetName"
    )
    asset_key: typing.Optional[str] = None
    asset_id: typing.Optional[str] = None
    name: typing.Optional["LocalizedString"] = None
    sku: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        asset_key: typing.Optional[str] = None,
        asset_id: typing.Optional[str] = None,
        name: typing.Optional["LocalizedString"] = None,
        sku: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(asset_key, asset_id, name, sku, variant_id, staged)


@attr.s(auto_attribs=True)
class ProductChangeAssetOrderAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeAssetOrder"
    )
    asset_order: typing.Optional[typing.List[str]] = None
    sku: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        asset_order: typing.Optional[typing.List[str]] = None,
        sku: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(asset_order, sku, variant_id, staged)


@attr.s(auto_attribs=True)
class ProductChangeMasterVariantAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeMasterVariant"
    )
    sku: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        sku: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(sku, variant_id, staged)


@attr.s(auto_attribs=True)
class ProductChangeNameAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeName")
    name: typing.Optional["LocalizedString"] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        name: typing.Optional["LocalizedString"] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(name, staged)


@attr.s(auto_attribs=True)
class ProductChangePriceAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changePrice"
    )
    price: typing.Optional["PriceDraft"] = None
    price_id: typing.Optional[str] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        price: typing.Optional["PriceDraft"] = None,
        price_id: typing.Optional[str] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(price, price_id, staged)


@attr.s(auto_attribs=True)
class ProductChangeSlugAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeSlug")
    slug: typing.Optional["LocalizedString"] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        slug: typing.Optional["LocalizedString"] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(slug, staged)


@attr.s(auto_attribs=True)
class ProductDiscountChangeIsActiveAction(ProductDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeIsActive"
    )
    is_active: typing.Optional[bool] = None

    def __init__(self, is_active: typing.Optional[bool] = None) -> None:
        super().__init__(is_active)


@attr.s(auto_attribs=True)
class ProductDiscountChangeNameAction(ProductDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeName")
    name: typing.Optional["LocalizedString"] = None

    def __init__(self, name: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class ProductDiscountChangePredicateAction(ProductDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changePredicate"
    )
    predicate: typing.Optional[str] = None

    def __init__(self, predicate: typing.Optional[str] = None) -> None:
        super().__init__(predicate)


@attr.s(auto_attribs=True)
class ProductDiscountChangeSortOrderAction(ProductDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeSortOrder"
    )
    sort_order: typing.Optional[str] = None

    def __init__(self, sort_order: typing.Optional[str] = None) -> None:
        super().__init__(sort_order)


@attr.s(auto_attribs=True)
class ProductDiscountChangeValueAction(ProductDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeValue"
    )
    value: typing.Optional["ProductDiscountValue"] = None

    def __init__(self, value: typing.Optional["ProductDiscountValue"] = None) -> None:
        super().__init__(value)


@attr.s(auto_attribs=True)
class ProductDiscountReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="product-discount"
    )
    obj: typing.Optional["ProductDiscount"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["ProductDiscount"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class ProductDiscountSetDescriptionAction(ProductDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDescription"
    )
    description: typing.Optional["LocalizedString"] = None

    def __init__(self, description: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(description)


@attr.s(auto_attribs=True)
class ProductDiscountSetValidFromAction(ProductDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setValidFrom"
    )
    valid_from: typing.Optional[datetime.datetime] = None

    def __init__(self, valid_from: typing.Optional[datetime.datetime] = None) -> None:
        super().__init__(valid_from)


@attr.s(auto_attribs=True)
class ProductDiscountSetValidFromAndUntilAction(ProductDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setValidFromAndUntil"
    )
    valid_from: typing.Optional[datetime.datetime] = None
    valid_until: typing.Optional[datetime.datetime] = None

    def __init__(
        self,
        valid_from: typing.Optional[datetime.datetime] = None,
        valid_until: typing.Optional[datetime.datetime] = None,
    ) -> None:
        super().__init__(valid_from, valid_until)


@attr.s(auto_attribs=True)
class ProductDiscountSetValidUntilAction(ProductDiscountUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setValidUntil"
    )
    valid_until: typing.Optional[datetime.datetime] = None

    def __init__(self, valid_until: typing.Optional[datetime.datetime] = None) -> None:
        super().__init__(valid_until)


@attr.s(auto_attribs=True)
class ProductLegacySetSkuAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="legacySetSku"
    )
    sku: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None

    def __init__(
        self, sku: typing.Optional[str] = None, variant_id: typing.Optional[int] = None
    ) -> None:
        super().__init__(sku, variant_id)


@attr.s(auto_attribs=True)
class ProductMoveImageToPositionAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="moveImageToPosition"
    )
    image_url: typing.Optional[str] = None
    position: typing.Optional[int] = None
    sku: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        image_url: typing.Optional[str] = None,
        position: typing.Optional[int] = None,
        sku: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(image_url, position, sku, variant_id, staged)


@attr.s(auto_attribs=True)
class ProductPublishAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="publish")
    scope: typing.Optional["ProductPublishScope"] = None

    def __init__(self, scope: typing.Optional["ProductPublishScope"] = None) -> None:
        super().__init__(scope)


@attr.s(auto_attribs=True)
class ProductReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="product"
    )
    obj: typing.Optional["Product"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["Product"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class ProductRemoveAssetAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeAsset"
    )
    asset_key: typing.Optional[str] = None
    asset_id: typing.Optional[str] = None
    sku: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        asset_key: typing.Optional[str] = None,
        asset_id: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(asset_key, asset_id, sku, variant_id, staged)


@attr.s(auto_attribs=True)
class ProductRemoveFromCategoryAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeFromCategory"
    )
    category: typing.Optional["CategoryReference"] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        category: typing.Optional["CategoryReference"] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(category, staged)


@attr.s(auto_attribs=True)
class ProductRemoveImageAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeImage"
    )
    image_url: typing.Optional[str] = None
    sku: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        image_url: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(image_url, sku, variant_id, staged)


@attr.s(auto_attribs=True)
class ProductRemovePriceAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removePrice"
    )
    price_id: typing.Optional[str] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        price_id: typing.Optional[str] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(price_id, staged)


@attr.s(auto_attribs=True)
class ProductRemoveVariantAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeVariant"
    )
    id: typing.Optional[int] = None
    sku: typing.Optional[str] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        id: typing.Optional[int] = None,
        sku: typing.Optional[str] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(id, sku, staged)


@attr.s(auto_attribs=True)
class ProductRevertStagedChangesAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="revertStagedChanges"
    )

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class ProductRevertStagedVariantChangesAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="revertStagedVariantChanges"
    )
    variant_id: typing.Optional[int] = None

    def __init__(self, variant_id: typing.Optional[int] = None) -> None:
        super().__init__(variant_id)


@attr.s(auto_attribs=True)
class ProductSetAssetCustomFieldAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAssetCustomField"
    )
    asset_key: typing.Optional[str] = None
    asset_id: typing.Optional[str] = None
    name: typing.Optional[str] = None
    sku: typing.Optional[str] = None
    staged: typing.Optional[bool] = None
    value: typing.Optional[typing.Any] = None
    variant_id: typing.Optional[int] = None

    def __init__(
        self,
        asset_key: typing.Optional[str] = None,
        asset_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        staged: typing.Optional[bool] = None,
        value: typing.Optional[typing.Any] = None,
        variant_id: typing.Optional[int] = None,
    ) -> None:
        super().__init__(asset_key, asset_id, name, sku, staged, value, variant_id)


@attr.s(auto_attribs=True)
class ProductSetAssetCustomTypeAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAssetCustomType"
    )
    asset_key: typing.Optional[str] = None
    asset_id: typing.Optional[str] = None
    fields: typing.Optional[str] = None
    sku: typing.Optional[str] = None
    staged: typing.Optional[bool] = None
    type: typing.Optional["TypeReference"] = None
    variant_id: typing.Optional[int] = None

    def __init__(
        self,
        asset_key: typing.Optional[str] = None,
        asset_id: typing.Optional[str] = None,
        fields: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        staged: typing.Optional[bool] = None,
        type: typing.Optional["TypeReference"] = None,
        variant_id: typing.Optional[int] = None,
    ) -> None:
        super().__init__(asset_key, asset_id, fields, sku, staged, type, variant_id)


@attr.s(auto_attribs=True)
class ProductSetAssetDescriptionAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAssetDescription"
    )
    asset_key: typing.Optional[str] = None
    asset_id: typing.Optional[str] = None
    description: typing.Optional["LocalizedString"] = None
    sku: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        asset_key: typing.Optional[str] = None,
        asset_id: typing.Optional[str] = None,
        description: typing.Optional["LocalizedString"] = None,
        sku: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(asset_key, asset_id, description, sku, variant_id, staged)


@attr.s(auto_attribs=True)
class ProductSetAssetKeyAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAssetKey"
    )
    variant_id: typing.Optional[int] = None
    sku: typing.Optional[str] = None
    staged: typing.Optional[bool] = None
    asset_id: typing.Optional[str] = None
    asset_key: typing.Optional[str] = None

    def __init__(
        self,
        variant_id: typing.Optional[int] = None,
        sku: typing.Optional[str] = None,
        staged: typing.Optional[bool] = None,
        asset_id: typing.Optional[str] = None,
        asset_key: typing.Optional[str] = None,
    ) -> None:
        super().__init__(variant_id, sku, staged, asset_id, asset_key)


@attr.s(auto_attribs=True)
class ProductSetAssetSourcesAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAssetSources"
    )
    variant_id: typing.Optional[int] = None
    sku: typing.Optional[str] = None
    asset_key: typing.Optional[str] = None
    asset_id: typing.Optional[str] = None
    staged: typing.Optional[bool] = None
    sources: typing.Optional[typing.List["AssetSource"]] = None

    def __init__(
        self,
        variant_id: typing.Optional[int] = None,
        sku: typing.Optional[str] = None,
        asset_key: typing.Optional[str] = None,
        asset_id: typing.Optional[str] = None,
        staged: typing.Optional[bool] = None,
        sources: typing.Optional[typing.List["AssetSource"]] = None,
    ) -> None:
        super().__init__(variant_id, sku, asset_key, asset_id, staged, sources)


@attr.s(auto_attribs=True)
class ProductSetAssetTagsAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAssetTags"
    )
    asset_key: typing.Optional[str] = None
    asset_id: typing.Optional[str] = None
    sku: typing.Optional[str] = None
    tags: typing.Optional[typing.List[str]] = None
    variant_id: typing.Optional[int] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        asset_key: typing.Optional[str] = None,
        asset_id: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        tags: typing.Optional[typing.List[str]] = None,
        variant_id: typing.Optional[int] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(asset_key, asset_id, sku, tags, variant_id, staged)


@attr.s(auto_attribs=True)
class ProductSetAttributeAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAttribute"
    )
    name: typing.Optional[str] = None
    sku: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None
    variant_id: typing.Optional[int] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
        variant_id: typing.Optional[int] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(name, sku, value, variant_id, staged)


@attr.s(auto_attribs=True)
class ProductSetAttributeInAllVariantsAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAttributeInAllVariants"
    )
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(name, value, staged)


@attr.s(auto_attribs=True)
class ProductSetCategoryOrderHintAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCategoryOrderHint"
    )
    category_id: typing.Optional[str] = None
    order_hint: typing.Optional[str] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        category_id: typing.Optional[str] = None,
        order_hint: typing.Optional[str] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(category_id, order_hint, staged)


@attr.s(auto_attribs=True)
class ProductSetDescriptionAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDescription"
    )
    description: typing.Optional["LocalizedString"] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        description: typing.Optional["LocalizedString"] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(description, staged)


@attr.s(auto_attribs=True)
class ProductSetDiscountedPriceAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDiscountedPrice"
    )
    discounted: typing.Optional["DiscountedPrice"] = None
    price_id: typing.Optional[str] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        discounted: typing.Optional["DiscountedPrice"] = None,
        price_id: typing.Optional[str] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(discounted, price_id, staged)


@attr.s(auto_attribs=True)
class ProductSetImageLabelAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setImageLabel"
    )
    sku: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    image_url: typing.Optional[str] = None
    label: typing.Optional[str] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        sku: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        image_url: typing.Optional[str] = None,
        label: typing.Optional[str] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(sku, variant_id, image_url, label, staged)


@attr.s(auto_attribs=True)
class ProductSetKeyAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setKey")
    key: typing.Optional[str] = None

    def __init__(self, key: typing.Optional[str] = None) -> None:
        super().__init__(key)


@attr.s(auto_attribs=True)
class ProductSetMetaDescriptionAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setMetaDescription"
    )
    meta_description: typing.Optional["LocalizedString"] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        meta_description: typing.Optional["LocalizedString"] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(meta_description, staged)


@attr.s(auto_attribs=True)
class ProductSetMetaKeywordsAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setMetaKeywords"
    )
    meta_keywords: typing.Optional["LocalizedString"] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        meta_keywords: typing.Optional["LocalizedString"] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(meta_keywords, staged)


@attr.s(auto_attribs=True)
class ProductSetMetaTitleAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setMetaTitle"
    )
    meta_title: typing.Optional["LocalizedString"] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        meta_title: typing.Optional["LocalizedString"] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(meta_title, staged)


@attr.s(auto_attribs=True)
class ProductSetPricesAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setPrices")
    prices: typing.Optional[typing.List["PriceDraft"]] = None
    sku: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        prices: typing.Optional[typing.List["PriceDraft"]] = None,
        sku: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(prices, sku, variant_id, staged)


@attr.s(auto_attribs=True)
class ProductSetProductPriceCustomFieldAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setProductPriceCustomField"
    )
    name: typing.Optional[str] = None
    price_id: typing.Optional[str] = None
    staged: typing.Optional[bool] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        price_id: typing.Optional[str] = None,
        staged: typing.Optional[bool] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(name, price_id, staged, value)


@attr.s(auto_attribs=True)
class ProductSetProductPriceCustomTypeAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setProductPriceCustomType"
    )
    fields: typing.Optional[str] = None
    price_id: typing.Optional[str] = None
    staged: typing.Optional[bool] = None
    type: typing.Optional["TypeReference"] = None

    def __init__(
        self,
        fields: typing.Optional[str] = None,
        price_id: typing.Optional[str] = None,
        staged: typing.Optional[bool] = None,
        type: typing.Optional["TypeReference"] = None,
    ) -> None:
        super().__init__(fields, price_id, staged, type)


@attr.s(auto_attribs=True)
class ProductSetProductVariantKeyAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setProductVariantKey"
    )
    key: typing.Optional[str] = None
    sku: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        key: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(key, sku, variant_id, staged)


@attr.s(auto_attribs=True)
class ProductSetSearchKeywordsAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setSearchKeywords"
    )
    search_keywords: typing.Optional["SearchKeywords"] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        search_keywords: typing.Optional["SearchKeywords"] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(search_keywords, staged)


@attr.s(auto_attribs=True)
class ProductSetSkuAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setSku")
    sku: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    staged: typing.Optional[bool] = None

    def __init__(
        self,
        sku: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        staged: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(sku, variant_id, staged)


@attr.s(auto_attribs=True)
class ProductSetTaxCategoryAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setTaxCategory"
    )
    tax_category: typing.Optional["TaxCategoryReference"] = None

    def __init__(
        self, tax_category: typing.Optional["TaxCategoryReference"] = None
    ) -> None:
        super().__init__(tax_category)


@attr.s(auto_attribs=True)
class ProductTransitionStateAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="transitionState"
    )
    state: typing.Optional["StateReference"] = None
    force: typing.Optional[bool] = None

    def __init__(
        self,
        state: typing.Optional["StateReference"] = None,
        force: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(state, force)


@attr.s(auto_attribs=True)
class ProductTypeAddAttributeDefinitionAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addAttributeDefinition"
    )
    attribute: typing.Optional["AttributeDefinitionDraft"] = None

    def __init__(
        self, attribute: typing.Optional["AttributeDefinitionDraft"] = None
    ) -> None:
        super().__init__(attribute)


@attr.s(auto_attribs=True)
class ProductTypeAddLocalizedEnumValueAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addLocalizedEnumValue"
    )
    attribute_name: typing.Optional[str] = None
    value: typing.Optional["AttributeLocalizedEnumValue"] = None

    def __init__(
        self,
        attribute_name: typing.Optional[str] = None,
        value: typing.Optional["AttributeLocalizedEnumValue"] = None,
    ) -> None:
        super().__init__(attribute_name, value)


@attr.s(auto_attribs=True)
class ProductTypeAddPlainEnumValueAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addPlainEnumValue"
    )
    attribute_name: typing.Optional[str] = None
    value: typing.Optional["AttributePlainEnumValue"] = None

    def __init__(
        self,
        attribute_name: typing.Optional[str] = None,
        value: typing.Optional["AttributePlainEnumValue"] = None,
    ) -> None:
        super().__init__(attribute_name, value)


@attr.s(auto_attribs=True)
class ProductTypeChangeAttributeConstraintAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeAttributeConstraint"
    )
    attribute_name: typing.Optional[str] = None
    new_value: typing.Optional["AttributeConstraintEnum"] = None

    def __init__(
        self,
        attribute_name: typing.Optional[str] = None,
        new_value: typing.Optional["AttributeConstraintEnum"] = None,
    ) -> None:
        super().__init__(attribute_name, new_value)


@attr.s(auto_attribs=True)
class ProductTypeChangeAttributeNameAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeAttributeName"
    )
    attribute_name: typing.Optional[str] = None
    new_attribute_name: typing.Optional[str] = None

    def __init__(
        self,
        attribute_name: typing.Optional[str] = None,
        new_attribute_name: typing.Optional[str] = None,
    ) -> None:
        super().__init__(attribute_name, new_attribute_name)


@attr.s(auto_attribs=True)
class ProductTypeChangeAttributeOrderAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeAttributeOrder"
    )
    attributes: typing.Optional[typing.List["AttributeDefinitionDraft"]] = None

    def __init__(
        self,
        attributes: typing.Optional[typing.List["AttributeDefinitionDraft"]] = None,
    ) -> None:
        super().__init__(attributes)


@attr.s(auto_attribs=True)
class ProductTypeChangeDescriptionAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeDescription"
    )
    description: typing.Optional[str] = None

    def __init__(self, description: typing.Optional[str] = None) -> None:
        super().__init__(description)


@attr.s(auto_attribs=True)
class ProductTypeChangeEnumKeyAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeEnumKey"
    )
    attribute_name: typing.Optional[str] = None
    key: typing.Optional[str] = None
    new_key: typing.Optional[str] = None

    def __init__(
        self,
        attribute_name: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        new_key: typing.Optional[str] = None,
    ) -> None:
        super().__init__(attribute_name, key, new_key)


@attr.s(auto_attribs=True)
class ProductTypeChangeInputHintAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeInputHint"
    )
    attribute_name: typing.Optional[str] = None
    new_value: typing.Optional[str] = None

    def __init__(
        self,
        attribute_name: typing.Optional[str] = None,
        new_value: typing.Optional[str] = None,
    ) -> None:
        super().__init__(attribute_name, new_value)


@attr.s(auto_attribs=True)
class ProductTypeChangeIsSearchableAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeIsSearchable"
    )
    attribute_name: typing.Optional[str] = None
    is_searchable: typing.Optional[bool] = None

    def __init__(
        self,
        attribute_name: typing.Optional[str] = None,
        is_searchable: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(attribute_name, is_searchable)


@attr.s(auto_attribs=True)
class ProductTypeChangeLabelAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeLabel"
    )
    attribute_name: typing.Optional[str] = None
    label: typing.Optional["LocalizedString"] = None

    def __init__(
        self,
        attribute_name: typing.Optional[str] = None,
        label: typing.Optional["LocalizedString"] = None,
    ) -> None:
        super().__init__(attribute_name, label)


@attr.s(auto_attribs=True)
class ProductTypeChangeLocalizedEnumValueLabelAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeLocalizedEnumValueLabel"
    )
    attribute_name: typing.Optional[str] = None
    new_value: typing.Optional["AttributeLocalizedEnumValue"] = None

    def __init__(
        self,
        attribute_name: typing.Optional[str] = None,
        new_value: typing.Optional["AttributeLocalizedEnumValue"] = None,
    ) -> None:
        super().__init__(attribute_name, new_value)


@attr.s(auto_attribs=True)
class ProductTypeChangeLocalizedEnumValueOrderAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeLocalizedEnumValueOrder"
    )
    attribute_name: typing.Optional[str] = None
    values: typing.Optional[typing.List["AttributeLocalizedEnumValue"]] = None

    def __init__(
        self,
        attribute_name: typing.Optional[str] = None,
        values: typing.Optional[typing.List["AttributeLocalizedEnumValue"]] = None,
    ) -> None:
        super().__init__(attribute_name, values)


@attr.s(auto_attribs=True)
class ProductTypeChangeNameAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeName")
    name: typing.Optional[str] = None

    def __init__(self, name: typing.Optional[str] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class ProductTypeChangePlainEnumValueLabelAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changePlainEnumValueLabel"
    )
    attribute_name: typing.Optional[str] = None
    new_value: typing.Optional["AttributePlainEnumValue"] = None

    def __init__(
        self,
        attribute_name: typing.Optional[str] = None,
        new_value: typing.Optional["AttributePlainEnumValue"] = None,
    ) -> None:
        super().__init__(attribute_name, new_value)


@attr.s(auto_attribs=True)
class ProductTypeChangePlainEnumValueOrderAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changePlainEnumValueOrder"
    )
    attribute_name: typing.Optional[str] = None
    values: typing.Optional[typing.List["AttributePlainEnumValue"]] = None

    def __init__(
        self,
        attribute_name: typing.Optional[str] = None,
        values: typing.Optional[typing.List["AttributePlainEnumValue"]] = None,
    ) -> None:
        super().__init__(attribute_name, values)


@attr.s(auto_attribs=True)
class ProductTypeReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="product-type"
    )
    obj: typing.Optional["ProductType"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["ProductType"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class ProductTypeRemoveAttributeDefinitionAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeAttributeDefinition"
    )
    name: typing.Optional[str] = None

    def __init__(self, name: typing.Optional[str] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class ProductTypeRemoveEnumValuesAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeEnumValues"
    )
    attribute_name: typing.Optional[str] = None
    keys: typing.Optional[typing.List[str]] = None

    def __init__(
        self,
        attribute_name: typing.Optional[str] = None,
        keys: typing.Optional[typing.List[str]] = None,
    ) -> None:
        super().__init__(attribute_name, keys)


@attr.s(auto_attribs=True)
class ProductTypeSetInputTipAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setInputTip"
    )
    attribute_name: typing.Optional[str] = None
    input_tip: typing.Optional["LocalizedString"] = None

    def __init__(
        self,
        attribute_name: typing.Optional[str] = None,
        input_tip: typing.Optional["LocalizedString"] = None,
    ) -> None:
        super().__init__(attribute_name, input_tip)


@attr.s(auto_attribs=True)
class ProductTypeSetKeyAction(ProductTypeUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setKey")
    key: typing.Optional[str] = None

    def __init__(self, key: typing.Optional[str] = None) -> None:
        super().__init__(key)


@attr.s(auto_attribs=True)
class ProductUnpublishAction(ProductUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="unpublish")

    def __init__(self) -> None:
        super().__init__()


@attr.s(auto_attribs=True)
class ProjectChangeCountriesAction(ProjectUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeCountries"
    )
    countries: typing.Optional[list] = None

    def __init__(self, countries: typing.Optional[list] = None) -> None:
        super().__init__(countries)


@attr.s(auto_attribs=True)
class ProjectChangeCurrenciesAction(ProjectUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeCurrencies"
    )
    currencies: typing.Optional[list] = None

    def __init__(self, currencies: typing.Optional[list] = None) -> None:
        super().__init__(currencies)


@attr.s(auto_attribs=True)
class ProjectChangeLanguagesAction(ProjectUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeLanguages"
    )
    languages: typing.Optional[list] = None

    def __init__(self, languages: typing.Optional[list] = None) -> None:
        super().__init__(languages)


@attr.s(auto_attribs=True)
class ProjectChangeMessagesEnabledAction(ProjectUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeMessagesEnabled"
    )
    messages_enabled: typing.Optional[bool] = None

    def __init__(self, messages_enabled: typing.Optional[bool] = None) -> None:
        super().__init__(messages_enabled)


@attr.s(auto_attribs=True)
class ProjectChangeNameAction(ProjectUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeName")
    name: typing.Optional[str] = None

    def __init__(self, name: typing.Optional[str] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class ProjectSetShippingRateInputTypeAction(ProjectUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setShippingRateInputType"
    )
    shipping_rate_input_type: typing.Optional["ShippingRateInputType"] = None

    def __init__(
        self, shipping_rate_input_type: typing.Optional["ShippingRateInputType"] = None
    ) -> None:
        super().__init__(shipping_rate_input_type)


@attr.s(auto_attribs=True)
class ReviewReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="review"
    )
    obj: typing.Optional["Review"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["Review"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class ReviewSetAuthorNameAction(ReviewUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAuthorName"
    )
    author_name: typing.Optional[str] = None

    def __init__(self, author_name: typing.Optional[str] = None) -> None:
        super().__init__(author_name)


@attr.s(auto_attribs=True)
class ReviewSetCustomFieldAction(ReviewUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomField"
    )
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(name, value)


@attr.s(auto_attribs=True)
class ReviewSetCustomTypeAction(ReviewUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomType"
    )
    fields: typing.Optional[str] = None
    type: typing.Optional["ResourceIdentifier"] = None

    def __init__(
        self,
        fields: typing.Optional[str] = None,
        type: typing.Optional["ResourceIdentifier"] = None,
    ) -> None:
        super().__init__(fields, type)


@attr.s(auto_attribs=True)
class ReviewSetCustomerAction(ReviewUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomer"
    )
    customer: typing.Optional["ResourceIdentifier"] = None

    def __init__(self, customer: typing.Optional["ResourceIdentifier"] = None) -> None:
        super().__init__(customer)


@attr.s(auto_attribs=True)
class ReviewSetKeyAction(ReviewUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setKey")
    key: typing.Optional[str] = None

    def __init__(self, key: typing.Optional[str] = None) -> None:
        super().__init__(key)


@attr.s(auto_attribs=True)
class ReviewSetLocaleAction(ReviewUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setLocale")
    locale: typing.Optional[str] = None

    def __init__(self, locale: typing.Optional[str] = None) -> None:
        super().__init__(locale)


@attr.s(auto_attribs=True)
class ReviewSetRatingAction(ReviewUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setRating")
    rating: typing.Optional[int] = None

    def __init__(self, rating: typing.Optional[int] = None) -> None:
        super().__init__(rating)


@attr.s(auto_attribs=True)
class ReviewSetTargetAction(ReviewUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setTarget")
    target: typing.Optional["ResourceIdentifier"] = None

    def __init__(self, target: typing.Optional["ResourceIdentifier"] = None) -> None:
        super().__init__(target)


@attr.s(auto_attribs=True)
class ReviewSetTextAction(ReviewUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setText")
    text: typing.Optional[str] = None

    def __init__(self, text: typing.Optional[str] = None) -> None:
        super().__init__(text)


@attr.s(auto_attribs=True)
class ReviewSetTitleAction(ReviewUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setTitle")
    title: typing.Optional[str] = None

    def __init__(self, title: typing.Optional[str] = None) -> None:
        super().__init__(title)


@attr.s(auto_attribs=True)
class ReviewTransitionStateAction(ReviewUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="transitionState"
    )
    state: typing.Optional["ResourceIdentifier"] = None
    force: typing.Optional[bool] = None

    def __init__(
        self,
        state: typing.Optional["ResourceIdentifier"] = None,
        force: typing.Optional[bool] = None,
    ) -> None:
        super().__init__(state, force)


@attr.s(auto_attribs=True)
class ShippingMethodAddShippingRateAction(ShippingMethodUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addShippingRate"
    )
    shipping_rate: typing.Optional["ShippingRateDraft"] = None
    zone: typing.Optional["ZoneReference"] = None

    def __init__(
        self,
        shipping_rate: typing.Optional["ShippingRateDraft"] = None,
        zone: typing.Optional["ZoneReference"] = None,
    ) -> None:
        super().__init__(shipping_rate, zone)


@attr.s(auto_attribs=True)
class ShippingMethodAddZoneAction(ShippingMethodUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="addZone")
    zone: typing.Optional["ZoneReference"] = None

    def __init__(self, zone: typing.Optional["ZoneReference"] = None) -> None:
        super().__init__(zone)


@attr.s(auto_attribs=True)
class ShippingMethodChangeIsDefaultAction(ShippingMethodUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeIsDefault"
    )
    is_default: typing.Optional[bool] = None

    def __init__(self, is_default: typing.Optional[bool] = None) -> None:
        super().__init__(is_default)


@attr.s(auto_attribs=True)
class ShippingMethodChangeNameAction(ShippingMethodUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeName")
    name: typing.Optional[str] = None

    def __init__(self, name: typing.Optional[str] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class ShippingMethodChangeTaxCategoryAction(ShippingMethodUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeTaxCategory"
    )
    tax_category: typing.Optional["TaxCategoryReference"] = None

    def __init__(
        self, tax_category: typing.Optional["TaxCategoryReference"] = None
    ) -> None:
        super().__init__(tax_category)


@attr.s(auto_attribs=True)
class ShippingMethodReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="shipping-method"
    )
    obj: typing.Optional["ShippingMethod"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["ShippingMethod"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class ShippingMethodRemoveShippingRateAction(ShippingMethodUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeShippingRate"
    )
    shipping_rate: typing.Optional["ShippingRateDraft"] = None
    zone: typing.Optional["ZoneReference"] = None

    def __init__(
        self,
        shipping_rate: typing.Optional["ShippingRateDraft"] = None,
        zone: typing.Optional["ZoneReference"] = None,
    ) -> None:
        super().__init__(shipping_rate, zone)


@attr.s(auto_attribs=True)
class ShippingMethodRemoveZoneAction(ShippingMethodUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="removeZone")
    zone: typing.Optional["ZoneReference"] = None

    def __init__(self, zone: typing.Optional["ZoneReference"] = None) -> None:
        super().__init__(zone)


@attr.s(auto_attribs=True)
class ShippingMethodSetDescriptionAction(ShippingMethodUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDescription"
    )
    description: typing.Optional[str] = None

    def __init__(self, description: typing.Optional[str] = None) -> None:
        super().__init__(description)


@attr.s(auto_attribs=True)
class ShippingMethodSetKeyAction(ShippingMethodUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setKey")
    key: typing.Optional[str] = None

    def __init__(self, key: typing.Optional[str] = None) -> None:
        super().__init__(key)


@attr.s(auto_attribs=True)
class ShippingMethodSetPredicateAction(ShippingMethodUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setPredicate"
    )
    predicate: typing.Optional[str] = None

    def __init__(self, predicate: typing.Optional[str] = None) -> None:
        super().__init__(predicate)


@attr.s(auto_attribs=True)
class ShoppingListAddLineItemAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addLineItem"
    )
    added_at: typing.Optional[datetime.datetime] = None
    custom: typing.Optional["CustomFieldsDraft"] = None
    sku: typing.Optional[str] = None
    product_id: typing.Optional[str] = None
    variant_id: typing.Optional[int] = None
    quantity: typing.Optional[int] = None

    def __init__(
        self,
        added_at: typing.Optional[datetime.datetime] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        sku: typing.Optional[str] = None,
        product_id: typing.Optional[str] = None,
        variant_id: typing.Optional[int] = None,
        quantity: typing.Optional[int] = None,
    ) -> None:
        super().__init__(added_at, custom, sku, product_id, variant_id, quantity)


@attr.s(auto_attribs=True)
class ShoppingListAddTextLineItemAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addTextLineItem"
    )
    custom: typing.Optional["CustomFieldsDraft"] = None
    description: typing.Optional["LocalizedString"] = None
    name: typing.Optional["LocalizedString"] = None
    quantity: typing.Optional[int] = None
    added_at: typing.Optional[datetime.datetime] = None

    def __init__(
        self,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        description: typing.Optional["LocalizedString"] = None,
        name: typing.Optional["LocalizedString"] = None,
        quantity: typing.Optional[int] = None,
        added_at: typing.Optional[datetime.datetime] = None,
    ) -> None:
        super().__init__(custom, description, name, quantity, added_at)


@attr.s(auto_attribs=True)
class ShoppingListChangeLineItemQuantityAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeLineItemQuantity"
    )
    line_item_id: typing.Optional[str] = None
    quantity: typing.Optional[int] = None

    def __init__(
        self,
        line_item_id: typing.Optional[str] = None,
        quantity: typing.Optional[int] = None,
    ) -> None:
        super().__init__(line_item_id, quantity)


@attr.s(auto_attribs=True)
class ShoppingListChangeLineItemsOrderAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeLineItemsOrder"
    )
    line_item_order: typing.Optional[typing.List[str]] = None

    def __init__(
        self, line_item_order: typing.Optional[typing.List[str]] = None
    ) -> None:
        super().__init__(line_item_order)


@attr.s(auto_attribs=True)
class ShoppingListChangeNameAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeName")
    name: typing.Optional["LocalizedString"] = None

    def __init__(self, name: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class ShoppingListChangeTextLineItemNameAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeTextLineItemName"
    )
    name: typing.Optional["LocalizedString"] = None
    text_line_item_id: typing.Optional[str] = None

    def __init__(
        self,
        name: typing.Optional["LocalizedString"] = None,
        text_line_item_id: typing.Optional[str] = None,
    ) -> None:
        super().__init__(name, text_line_item_id)


@attr.s(auto_attribs=True)
class ShoppingListChangeTextLineItemQuantityAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeTextLineItemQuantity"
    )
    quantity: typing.Optional[int] = None
    text_line_item_id: typing.Optional[str] = None

    def __init__(
        self,
        quantity: typing.Optional[int] = None,
        text_line_item_id: typing.Optional[str] = None,
    ) -> None:
        super().__init__(quantity, text_line_item_id)


@attr.s(auto_attribs=True)
class ShoppingListChangeTextLineItemsOrderAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeTextLineItemsOrder"
    )
    text_line_item_order: typing.Optional[typing.List[str]] = None

    def __init__(
        self, text_line_item_order: typing.Optional[typing.List[str]] = None
    ) -> None:
        super().__init__(text_line_item_order)


@attr.s(auto_attribs=True)
class ShoppingListReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="shopping-list"
    )
    obj: typing.Optional["ShoppingList"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["ShoppingList"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class ShoppingListRemoveLineItemAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeLineItem"
    )
    line_item_id: typing.Optional[str] = None
    quantity: typing.Optional[int] = None

    def __init__(
        self,
        line_item_id: typing.Optional[str] = None,
        quantity: typing.Optional[int] = None,
    ) -> None:
        super().__init__(line_item_id, quantity)


@attr.s(auto_attribs=True)
class ShoppingListRemoveTextLineItemAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeTextLineItem"
    )
    quantity: typing.Optional[int] = None
    text_line_item_id: typing.Optional[str] = None

    def __init__(
        self,
        quantity: typing.Optional[int] = None,
        text_line_item_id: typing.Optional[str] = None,
    ) -> None:
        super().__init__(quantity, text_line_item_id)


@attr.s(auto_attribs=True)
class ShoppingListSetAnonymousIdAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setAnonymousId"
    )
    anonymous_id: typing.Optional[str] = None

    def __init__(self, anonymous_id: typing.Optional[str] = None) -> None:
        super().__init__(anonymous_id)


@attr.s(auto_attribs=True)
class ShoppingListSetCustomFieldAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomField"
    )
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(name, value)


@attr.s(auto_attribs=True)
class ShoppingListSetCustomTypeAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomType"
    )
    fields: typing.Optional[str] = None
    type: typing.Optional["TypeReference"] = None

    def __init__(
        self,
        fields: typing.Optional[str] = None,
        type: typing.Optional["TypeReference"] = None,
    ) -> None:
        super().__init__(fields, type)


@attr.s(auto_attribs=True)
class ShoppingListSetCustomerAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setCustomer"
    )
    customer: typing.Optional["CustomerReference"] = None

    def __init__(self, customer: typing.Optional["CustomerReference"] = None) -> None:
        super().__init__(customer)


@attr.s(auto_attribs=True)
class ShoppingListSetDeleteDaysAfterLastModificationAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDeleteDaysAfterLastModification"
    )
    delete_days_after_last_modification: typing.Optional[int] = None

    def __init__(
        self, delete_days_after_last_modification: typing.Optional[int] = None
    ) -> None:
        super().__init__(delete_days_after_last_modification)


@attr.s(auto_attribs=True)
class ShoppingListSetDescriptionAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDescription"
    )
    description: typing.Optional["LocalizedString"] = None

    def __init__(self, description: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(description)


@attr.s(auto_attribs=True)
class ShoppingListSetKeyAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setKey")
    key: typing.Optional[str] = None

    def __init__(self, key: typing.Optional[str] = None) -> None:
        super().__init__(key)


@attr.s(auto_attribs=True)
class ShoppingListSetLineItemCustomFieldAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setLineItemCustomField"
    )
    line_item_id: typing.Optional[str] = None
    name: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        line_item_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(line_item_id, name, value)


@attr.s(auto_attribs=True)
class ShoppingListSetLineItemCustomTypeAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setLineItemCustomType"
    )
    fields: typing.Optional[str] = None
    line_item_id: typing.Optional[str] = None
    type: typing.Optional["TypeReference"] = None

    def __init__(
        self,
        fields: typing.Optional[str] = None,
        line_item_id: typing.Optional[str] = None,
        type: typing.Optional["TypeReference"] = None,
    ) -> None:
        super().__init__(fields, line_item_id, type)


@attr.s(auto_attribs=True)
class ShoppingListSetSlugAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setSlug")
    slug: typing.Optional["LocalizedString"] = None

    def __init__(self, slug: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(slug)


@attr.s(auto_attribs=True)
class ShoppingListSetTextLineItemCustomFieldAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setTextLineItemCustomField"
    )
    name: typing.Optional[str] = None
    text_line_item_id: typing.Optional[str] = None
    value: typing.Optional[typing.Any] = None

    def __init__(
        self,
        name: typing.Optional[str] = None,
        text_line_item_id: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
    ) -> None:
        super().__init__(name, text_line_item_id, value)


@attr.s(auto_attribs=True)
class ShoppingListSetTextLineItemCustomTypeAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setTextLineItemCustomType"
    )
    fields: typing.Optional[str] = None
    text_line_item_id: typing.Optional[str] = None
    type: typing.Optional["TypeReference"] = None

    def __init__(
        self,
        fields: typing.Optional[str] = None,
        text_line_item_id: typing.Optional[str] = None,
        type: typing.Optional["TypeReference"] = None,
    ) -> None:
        super().__init__(fields, text_line_item_id, type)


@attr.s(auto_attribs=True)
class ShoppingListSetTextLineItemDescriptionAction(ShoppingListUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setTextLineItemDescription"
    )
    description: typing.Optional["LocalizedString"] = None
    text_line_item_id: typing.Optional[str] = None

    def __init__(
        self,
        description: typing.Optional["LocalizedString"] = None,
        text_line_item_id: typing.Optional[str] = None,
    ) -> None:
        super().__init__(description, text_line_item_id)


@attr.s(auto_attribs=True)
class StateAddRolesAction(StateUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="addRoles")
    roles: typing.Optional[typing.List["StateRoleEnum"]] = None

    def __init__(
        self, roles: typing.Optional[typing.List["StateRoleEnum"]] = None
    ) -> None:
        super().__init__(roles)


@attr.s(auto_attribs=True)
class StateChangeInitialAction(StateUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeInitial"
    )
    initial: typing.Optional[bool] = None

    def __init__(self, initial: typing.Optional[bool] = None) -> None:
        super().__init__(initial)


@attr.s(auto_attribs=True)
class StateChangeKeyAction(StateUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeKey")
    key: typing.Optional[str] = None

    def __init__(self, key: typing.Optional[str] = None) -> None:
        super().__init__(key)


@attr.s(auto_attribs=True)
class StateChangeTypeAction(StateUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeType")
    type: typing.Optional["StateTypeEnum"] = None

    def __init__(self, type: typing.Optional["StateTypeEnum"] = None) -> None:
        super().__init__(type)


@attr.s(auto_attribs=True)
class StateReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="state"
    )
    obj: typing.Optional["State"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["State"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class StateRemoveRolesAction(StateUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeRoles"
    )
    roles: typing.Optional[typing.List["StateRoleEnum"]] = None

    def __init__(
        self, roles: typing.Optional[typing.List["StateRoleEnum"]] = None
    ) -> None:
        super().__init__(roles)


@attr.s(auto_attribs=True)
class StateSetDescriptionAction(StateUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDescription"
    )
    description: typing.Optional["LocalizedString"] = None

    def __init__(self, description: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(description)


@attr.s(auto_attribs=True)
class StateSetNameAction(StateUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setName")
    name: typing.Optional["LocalizedString"] = None

    def __init__(self, name: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class StateSetRolesAction(StateUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setRoles")
    roles: typing.Optional[typing.List["StateRoleEnum"]] = None

    def __init__(
        self, roles: typing.Optional[typing.List["StateRoleEnum"]] = None
    ) -> None:
        super().__init__(roles)


@attr.s(auto_attribs=True)
class StateSetTransitionsAction(StateUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setTransitions"
    )
    transitions: typing.Optional[typing.List["StateReference"]] = None

    def __init__(
        self, transitions: typing.Optional[typing.List["StateReference"]] = None
    ) -> None:
        super().__init__(transitions)


@attr.s(auto_attribs=True)
class SubscriptionSetChangesAction(SubscriptionUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setChanges")
    changes: typing.Optional[typing.List["ChangeSubscription"]] = None

    def __init__(
        self, changes: typing.Optional[typing.List["ChangeSubscription"]] = None
    ) -> None:
        super().__init__(changes)


@attr.s(auto_attribs=True)
class SubscriptionSetKeyAction(SubscriptionUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setKey")
    key: typing.Optional[str] = None

    def __init__(self, key: typing.Optional[str] = None) -> None:
        super().__init__(key)


@attr.s(auto_attribs=True)
class SubscriptionSetMessagesAction(SubscriptionUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setMessages"
    )
    messages: typing.Optional[typing.List["MessageSubscription"]] = None

    def __init__(
        self, messages: typing.Optional[typing.List["MessageSubscription"]] = None
    ) -> None:
        super().__init__(messages)


@attr.s(auto_attribs=True)
class TaxCategoryAddTaxRateAction(TaxCategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="addTaxRate")
    tax_rate: typing.Optional["TaxRateDraft"] = None

    def __init__(self, tax_rate: typing.Optional["TaxRateDraft"] = None) -> None:
        super().__init__(tax_rate)


@attr.s(auto_attribs=True)
class TaxCategoryChangeNameAction(TaxCategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeName")
    name: typing.Optional[str] = None

    def __init__(self, name: typing.Optional[str] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class TaxCategoryReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="tax-category"
    )
    obj: typing.Optional["TaxCategory"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["TaxCategory"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class TaxCategoryRemoveTaxRateAction(TaxCategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeTaxRate"
    )
    tax_rate_id: typing.Optional[str] = None

    def __init__(self, tax_rate_id: typing.Optional[str] = None) -> None:
        super().__init__(tax_rate_id)


@attr.s(auto_attribs=True)
class TaxCategoryReplaceTaxRateAction(TaxCategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="replaceTaxRate"
    )
    tax_rate_id: typing.Optional[str] = None
    tax_rate: typing.Optional["TaxRateDraft"] = None

    def __init__(
        self,
        tax_rate_id: typing.Optional[str] = None,
        tax_rate: typing.Optional["TaxRateDraft"] = None,
    ) -> None:
        super().__init__(tax_rate_id, tax_rate)


@attr.s(auto_attribs=True)
class TaxCategorySetDescriptionAction(TaxCategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDescription"
    )
    description: typing.Optional[str] = None

    def __init__(self, description: typing.Optional[str] = None) -> None:
        super().__init__(description)


@attr.s(auto_attribs=True)
class TaxCategorySetKeyAction(TaxCategoryUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="setKey")
    key: typing.Optional[str] = None

    def __init__(self, key: typing.Optional[str] = None) -> None:
        super().__init__(key)


@attr.s(auto_attribs=True)
class TypeAddEnumValueAction(TypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addEnumValue"
    )
    field_name: typing.Optional[str] = None
    value: typing.Optional["CustomFieldEnumValue"] = None

    def __init__(
        self,
        field_name: typing.Optional[str] = None,
        value: typing.Optional["CustomFieldEnumValue"] = None,
    ) -> None:
        super().__init__(field_name, value)


@attr.s(auto_attribs=True)
class TypeAddFieldDefinitionAction(TypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addFieldDefinition"
    )
    field_definition: typing.Optional["FieldDefinition"] = None

    def __init__(
        self, field_definition: typing.Optional["FieldDefinition"] = None
    ) -> None:
        super().__init__(field_definition)


@attr.s(auto_attribs=True)
class TypeAddLocalizedEnumValueAction(TypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addLocalizedEnumValue"
    )
    field_name: typing.Optional[str] = None
    value: typing.Optional["CustomFieldLocalizedEnumValue"] = None

    def __init__(
        self,
        field_name: typing.Optional[str] = None,
        value: typing.Optional["CustomFieldLocalizedEnumValue"] = None,
    ) -> None:
        super().__init__(field_name, value)


@attr.s(auto_attribs=True)
class TypeChangeEnumValueOrderAction(TypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeEnumValueOrder"
    )
    field_name: typing.Optional[str] = None
    keys: typing.Optional[typing.List[str]] = None

    def __init__(
        self,
        field_name: typing.Optional[str] = None,
        keys: typing.Optional[typing.List[str]] = None,
    ) -> None:
        super().__init__(field_name, keys)


@attr.s(auto_attribs=True)
class TypeChangeFieldDefinitionLabelAction(TypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeFieldDefinitionLabel"
    )
    field_name: typing.Optional[str] = None
    label: typing.Optional["LocalizedString"] = None

    def __init__(
        self,
        field_name: typing.Optional[str] = None,
        label: typing.Optional["LocalizedString"] = None,
    ) -> None:
        super().__init__(field_name, label)


@attr.s(auto_attribs=True)
class TypeChangeFieldDefinitionOrderAction(TypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeFieldDefinitionOrder"
    )
    field_names: typing.Optional[typing.List[str]] = None

    def __init__(self, field_names: typing.Optional[typing.List[str]] = None) -> None:
        super().__init__(field_names)


@attr.s(auto_attribs=True)
class TypeChangeKeyAction(TypeUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeKey")
    key: typing.Optional[str] = None

    def __init__(self, key: typing.Optional[str] = None) -> None:
        super().__init__(key)


@attr.s(auto_attribs=True)
class TypeChangeLabelAction(TypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeLabel"
    )
    field_name: typing.Optional[str] = None
    label: typing.Optional["LocalizedString"] = None

    def __init__(
        self,
        field_name: typing.Optional[str] = None,
        label: typing.Optional["LocalizedString"] = None,
    ) -> None:
        super().__init__(field_name, label)


@attr.s(auto_attribs=True)
class TypeChangeLocalizedEnumValueOrderAction(TypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="changeLocalizedEnumValueOrder"
    )
    field_name: typing.Optional[str] = None
    keys: typing.Optional[typing.List[str]] = None

    def __init__(
        self,
        field_name: typing.Optional[str] = None,
        keys: typing.Optional[typing.List[str]] = None,
    ) -> None:
        super().__init__(field_name, keys)


@attr.s(auto_attribs=True)
class TypeChangeNameAction(TypeUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeName")
    name: typing.Optional["LocalizedString"] = None

    def __init__(self, name: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class TypeReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="type"
    )
    obj: typing.Optional["Type"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["Type"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class TypeRemoveFieldDefinitionAction(TypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeFieldDefinition"
    )
    field_name: typing.Optional[str] = None

    def __init__(self, field_name: typing.Optional[str] = None) -> None:
        super().__init__(field_name)


@attr.s(auto_attribs=True)
class TypeSetDescriptionAction(TypeUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDescription"
    )
    description: typing.Optional["LocalizedString"] = None

    def __init__(self, description: typing.Optional["LocalizedString"] = None) -> None:
        super().__init__(description)


@attr.s(auto_attribs=True)
class ZoneAddLocationAction(ZoneUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="addLocation"
    )
    location: typing.Optional["Location"] = None

    def __init__(self, location: typing.Optional["Location"] = None) -> None:
        super().__init__(location)


@attr.s(auto_attribs=True)
class ZoneChangeNameAction(ZoneUpdateAction):
    action: typing.Optional[str] = attr.ib(repr=False, init=False, default="changeName")
    name: typing.Optional[str] = None

    def __init__(self, name: typing.Optional[str] = None) -> None:
        super().__init__(name)


@attr.s(auto_attribs=True)
class ZoneReference(Reference):
    type_id: typing.Optional["ReferenceTypeId"] = attr.ib(
        repr=False, init=False, default="zone"
    )
    obj: typing.Optional["Zone"] = None

    def __init__(
        self,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["Zone"] = None,
    ) -> None:
        super().__init__(id, key, obj)


@attr.s(auto_attribs=True)
class ZoneRemoveLocationAction(ZoneUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="removeLocation"
    )
    location: typing.Optional["Location"] = None

    def __init__(self, location: typing.Optional["Location"] = None) -> None:
        super().__init__(location)


@attr.s(auto_attribs=True)
class ZoneSetDescriptionAction(ZoneUpdateAction):
    action: typing.Optional[str] = attr.ib(
        repr=False, init=False, default="setDescription"
    )
    description: typing.Optional[str] = None

    def __init__(self, description: typing.Optional[str] = None) -> None:
        super().__init__(description)
